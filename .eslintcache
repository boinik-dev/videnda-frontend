[{"F:\\2021\\Videnda-AI\\source\\frontend\\src\\index.js":"1","F:\\2021\\Videnda-AI\\source\\frontend\\src\\reportWebVitals.js":"2","F:\\2021\\Videnda-AI\\source\\frontend\\src\\App.js":"3","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth.service.js":"4","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home-bak.js":"5","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Login.js":"6","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\NoMatch.js":"7","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Deregister.js":"8","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ForgotPassword.js":"9","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ChangePassword.js":"10","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\VerifyEmail.js":"11","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ResetPassword.js":"12","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Register.js":"13","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Profile.js":"14","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardAdmin.js":"15","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardUser.js":"16","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardModerator.js":"17","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\AddTokenCode.js":"18","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\CategoryPlaylists.js":"19","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ExecuteService.js":"20","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\CategoryManagement.js":"21","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\UploadImage.js":"22","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\PPTFileList.js":"23","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\EditImage.js":"24","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\UploadVideo.js":"25","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\TokenManagement.js":"26","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\Playlist.js":"27","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\EditPPT.js":"28","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\VideoList.js":"29","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ReceivedPlaylist\\ReceivedPlaylist.js":"30","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home.js":"31","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth-header.js":"32","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\user.service.js":"33","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\playlist.service.js":"34","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\video.service.js":"35","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\category.service.js":"36","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\VideoPlayer.js":"37","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\EditDialog.js":"38","F:\\2021\\Videnda-AI\\source\\frontend\\src\\tools\\GlobalData.js":"39","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\received-playlist.service.js":"40","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Common\\SelectOptions.js":"41","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\downloadfile.js":"42","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\ppt.service.js":"43","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\image.service.js":"44","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\file-upload.service.js":"45","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\execute.service.js":"46"},{"size":618,"mtime":1614721524175,"results":"47","hashOfConfig":"48"},{"size":375,"mtime":1614721524175,"results":"49","hashOfConfig":"48"},{"size":7722,"mtime":1619536309134,"results":"50","hashOfConfig":"48"},{"size":3181,"mtime":1619596697117,"results":"51","hashOfConfig":"48"},{"size":3423,"mtime":1619484025586,"results":"52","hashOfConfig":"48"},{"size":4150,"mtime":1615071384168,"results":"53","hashOfConfig":"48"},{"size":291,"mtime":1614904337314,"results":"54","hashOfConfig":"48"},{"size":3788,"mtime":1615071386392,"results":"55","hashOfConfig":"48"},{"size":4299,"mtime":1615071385335,"results":"56","hashOfConfig":"48"},{"size":6936,"mtime":1614721524159,"results":"57","hashOfConfig":"48"},{"size":2087,"mtime":1614721524167,"results":"58","hashOfConfig":"48"},{"size":7839,"mtime":1614721524161,"results":"59","hashOfConfig":"48"},{"size":6674,"mtime":1615071392178,"results":"60","hashOfConfig":"48"},{"size":2961,"mtime":1614721524172,"results":"61","hashOfConfig":"48"},{"size":774,"mtime":1614721524171,"results":"62","hashOfConfig":"48"},{"size":771,"mtime":1614721524171,"results":"63","hashOfConfig":"48"},{"size":786,"mtime":1614721524171,"results":"64","hashOfConfig":"48"},{"size":3460,"mtime":1618936798579,"results":"65","hashOfConfig":"48"},{"size":2415,"mtime":1618779027676,"results":"66","hashOfConfig":"48"},{"size":8610,"mtime":1618936798507,"results":"67","hashOfConfig":"48"},{"size":17998,"mtime":1618861497286,"results":"68","hashOfConfig":"48"},{"size":23475,"mtime":1617922667549,"results":"69","hashOfConfig":"48"},{"size":6239,"mtime":1617824261879,"results":"70","hashOfConfig":"48"},{"size":20114,"mtime":1617959866034,"results":"71","hashOfConfig":"48"},{"size":35227,"mtime":1618395219589,"results":"72","hashOfConfig":"48"},{"size":10966,"mtime":1616549417416,"results":"73","hashOfConfig":"48"},{"size":30892,"mtime":1618395245879,"results":"74","hashOfConfig":"48"},{"size":6028,"mtime":1617828262912,"results":"75","hashOfConfig":"48"},{"size":18602,"mtime":1618936798544,"results":"76","hashOfConfig":"48"},{"size":11637,"mtime":1617928390639,"results":"77","hashOfConfig":"48"},{"size":4723,"mtime":1619596697113,"results":"78","hashOfConfig":"48"},{"size":248,"mtime":1614721524176,"results":"79","hashOfConfig":"48"},{"size":1993,"mtime":1616539170313,"results":"80","hashOfConfig":"48"},{"size":2321,"mtime":1618850754530,"results":"81","hashOfConfig":"48"},{"size":2330,"mtime":1618247169221,"results":"82","hashOfConfig":"48"},{"size":1824,"mtime":1618620604303,"results":"83","hashOfConfig":"48"},{"size":6772,"mtime":1618012884389,"results":"84","hashOfConfig":"48"},{"size":2373,"mtime":1617848072200,"results":"85","hashOfConfig":"48"},{"size":547,"mtime":1617958122311,"results":"86","hashOfConfig":"48"},{"size":1896,"mtime":1616272240383,"results":"87","hashOfConfig":"48"},{"size":1348,"mtime":1618396076264,"results":"88","hashOfConfig":"48"},{"size":1620,"mtime":1617821383031,"results":"89","hashOfConfig":"48"},{"size":1640,"mtime":1617821383119,"results":"90","hashOfConfig":"48"},{"size":2190,"mtime":1617821383097,"results":"91","hashOfConfig":"48"},{"size":1311,"mtime":1615414972033,"results":"92","hashOfConfig":"48"},{"size":997,"mtime":1617869378061,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"newphg",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"96"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"96"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"96"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"96"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"96"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"96"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"96"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"96"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"96"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"96"},"F:\\2021\\Videnda-AI\\source\\frontend\\src\\index.js",[],["203","204"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\reportWebVitals.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\App.js",["205"],"import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport './App.css';\r\n\r\nimport AuthService from './services/auth.service';\r\n\r\nimport Login from './components/Auth/Login';\r\nimport Register from './components/Auth/Register';\r\nimport ChangePassword from './components/Auth/ChangePassword';\r\nimport Deregister from './components/Auth/Deregister';\r\nimport ForgotPassword from './components/Auth/ForgotPassword';\r\nimport ResetPassword from './components/Auth/ResetPassword';\r\nimport VerifyEmail from './components/Auth/VerifyEmail';\r\nimport Home from './components/Home';\r\nimport HomeBK from './components/Home-bak';\r\nimport Profile from \"./components/User/Profile\";\r\nimport BoardUser from \"./components/User/BoardUser\";\r\nimport BoardModerator from \"./components/User/BoardModerator\";\r\nimport BoardAdmin from \"./components/User/BoardAdmin\";\r\nimport TokenManagement from \"./components/User/Admin/TokenManagement\";\r\nimport CategoryManagement from \"./components/User/Admin/CategoryManagement\";\r\nimport ExecuteService from \"./components/Service/ExecuteService\";\r\nimport NoMatch from './components/NoMatch';\r\n\r\nimport authService from './services/auth.service';\r\n// image\r\nimport UploadImage from './components/Service/Image/UploadImage';\r\nimport EditImage from './components/Service/Image/EditImage';\r\n// ppt\r\nimport PPTFileList from './components/Service/PPT/PPTFileList'\r\nimport EditPPT from './components/Service/PPT/EditPPT';\r\n// video\r\nimport UploadVideo from './components/Service/Video/UploadVideo'\r\nimport Playlist from './components/Service/Playlist/Playlist'\r\nimport ReceivedPlaylist from './components/Service/ReceivedPlaylist/ReceivedPlaylist';\r\nimport VideoList from './components/Service/Playlist/VideoList'\r\nimport AddTokenCode from './components/User/AddTokenCode';\r\nimport CategoryPlaylists from './components/User/CategoryPlaylists';\r\n\r\n\r\n\r\nfunction App() {\r\n  const [showModeratorBoard, setShowModeratorBoard] = useState(false);\r\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    const user = authService.getCurrentUser();\r\n    if (user) {\r\n      setCurrentUser(user);\r\n      setShowAdminBoard(user.roles.includes(\"ROLE_ADMIN\"));\r\n      setShowModeratorBoard(user.roles.includes(\"ROLE_MODERATOR\"));\r\n    }\r\n  }, []);\r\n\r\n  const logOut = () => {\r\n    AuthService.logout();\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n        <Navbar.Brand href=\"/\">Videnda AI Engine</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/home\">Home</Nav.Link>\r\n            <Nav.Link href=\"/home-back\">Home BK</Nav.Link>\r\n            {showModeratorBoard && (\r\n              <Nav.Link href=\"/mod\">Moderator Board</Nav.Link>\r\n            )}\r\n            {showAdminBoard && (\r\n              <Nav.Link href=\"/admin\">Admin Board</Nav.Link>\r\n            )}\r\n            {currentUser && (\r\n              <Nav.Link href=\"/user\">User</Nav.Link>\r\n            )}\r\n          </Nav>\r\n          {currentUser ? (\r\n            <Nav className=\"ml-auto\">\r\n              {showAdminBoard && (\r\n                <NavDropdown title='Admin Menu' id=\"collasible-nav-dropdown\" alignRight >\r\n                  <NavDropdown.Item href=\"/token_management\">Token Management</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"/admin/categories\">Category Management</NavDropdown.Item>\r\n                </NavDropdown>\r\n              )}\r\n              <NavDropdown title='Services' id=\"collasible-nav-dropdown\" alignRight >\r\n                <NavDropdown.Item href=\"/upload_image\">Upload Image</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/upload_video\">Upload Video</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/playlists\">Manage Playlist</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/received_playlist\">Received Playlists</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/manage_ppt/list\">Manage PowerPoint</NavDropdown.Item>\r\n              </NavDropdown>\r\n              <NavDropdown title={currentUser.username} id=\"collasible-nav-dropdown\" alignRight >\r\n                <NavDropdown.Item href=\"/add_token_code\">Add Tokens</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/execute_service\">Tokens History</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/profile\">View Profile</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/changePassword\">Change Password</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/deregister\">Deregister</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/signin\" onClick={logOut}>Logout</NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav>\r\n          ) : (\r\n              <Nav className=\"ml-auto\">\r\n                <Nav.Link href=\"/signin\">Login</Nav.Link>\r\n                <Nav.Link href=\"/register\">Sign Up</Nav.Link>\r\n              </Nav>\r\n            )}\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <div className=\"container mt-3\">\r\n        <Switch>\r\n          <Route exact path={[\"/\", \"/home\"]} component={Home}></Route>\r\n          <Route exact path=\"/home-back\" component={HomeBK}></Route>\r\n          <Route path=\"/signin\" component={Login} />\r\n          <Route path=\"/register\" component={Register} />\r\n          <Route path=\"/changePassword\" component={ChangePassword} />\r\n          <Route path=\"/deregister\" component={Deregister} />\r\n          <Route path=\"/resetpassword/forgotpassword\" component={ForgotPassword} />\r\n          <Route path=\"/verifyemail\" component={VerifyEmail} />\r\n          <Route path=\"/profile\" component={Profile} />\r\n          <Route path=\"/resetpassword/reset\" component={ResetPassword} />\r\n          <Route path=\"/token_management\" component={TokenManagement} />\r\n          <Route path=\"/execute_service\" component={ExecuteService} />\r\n          <Route path=\"/upload_image\" component={UploadImage} />\r\n          <Route path=\"/edit_image/:image_id\" component={EditImage} />\r\n          <Route path=\"/manage_ppt/list\" component={PPTFileList} />\r\n          <Route path=\"/manage_ppt/edit_ppt/:ppt_id\" component={EditPPT} />\r\n          <Route path=\"/upload_video\" component={UploadVideo} />\r\n          <Route path=\"/playlists\" component={Playlist} />\r\n          <Route path=\"/playlist/:playlist_id\" component={VideoList} />\r\n          <Route path=\"/received_playlist\" component={ReceivedPlaylist} />\r\n          <Route path=\"/user\" component={BoardUser} />\r\n          <Route path=\"/mod\" component={BoardModerator} />\r\n          <Route path=\"/admin/categories\" component={CategoryManagement} />\r\n          <Route path=\"/admin\" component={BoardAdmin} />\r\n          <Route path=\"/add_token_code\" component={AddTokenCode} />\r\n          <Route path=\"/category_playlists/:category_id\" component={CategoryPlaylists} />\r\n          <Route path=\"*\" component={NoMatch} />\r\n        </Switch>\r\n      </div>\r\n      <Navbar className=\"fixed-bottom\" bg=\"dark\" variant=\"dark\" sticky=\"bottom\">  \r\n        <div className=\"container text-center\">\r\n            <div className=\"col-sm-12\">\r\n\r\n                <p className=\"text-center twhite m-2\"> <a href=\"#\" className=\"twhite\"> Licence Terms</a> Copyright © 2021 Videnda AI</p>\r\n            </div>\r\n        </div>\r\n      </Navbar>\r\n    </Router>\r\n    \r\n  )\r\n}\r\n\r\nexport default App;\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth.service.js",["206"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home-bak.js",["207","208","209","210","211"],"import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\n\r\nimport UserService from '../services/user.service';\r\nimport CategoryService from '../services/category.service';\r\nimport {\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nconst HomeBK = ()=>{\r\n    const [content, setContent] = useState();\r\n    const [categories, setCategories] = useState();\r\n\r\n    useEffect(()=>{\r\n        UserService.getPublicContent().then(\r\n            (response)=>{\r\n                setContent(response.data);\r\n            },\r\n            (error)=>{\r\n                const _content = \r\n                    (error.response && error.response.data) ||\r\n                    error.message || \r\n                    error.toString();\r\n                setContent(_content);\r\n            }\r\n        )\r\n\r\n        getCategories();\r\n    }, []);\r\n\r\n    const getCategories = () => {\r\n        CategoryService.getAllCategory().then( response => {\r\n            setCategories(response.data);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {categories && categories.length && <CategoryList categories={categories}></CategoryList> || \r\n                <div className=\"jumbotron\">\r\n                    <h3>{content}</h3>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst CategoryList = (props) => {\r\n    let history = useHistory();\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                { data.thumb_image && <Image thumbnail src={data.thumb_image} className=\"mr-3\" style={{ cursor: 'pointer' }} /> || <InsertPhotoIcon style={{ fontSize: 140 }}/> }\r\n                <Media.Body>\r\n                    <h2><span>{data.title}</span></h2>\r\n                    <p style={{ marginBottom: \"10px\" }}><span>{data.description}</span></p>\r\n                    { data.public_playlists && data.public_playlists.length > 0 && \r\n                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                            className=\"mr-2\"\r\n                            onClick={ () => { let playlist = data.playlists.filter(item => item.id == data.public_playlists[0])[0]; console.log(playlist); history.push('/playlist/' + playlist.playlist_id) } }>\r\n                            Open Public Playlists\r\n                        </Button>\r\n                    }\r\n                    { data.private_playlists && data.private_playlists.length > 0 &&\r\n                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                            className=\"mr-2\"\r\n                            onClick={ () => { history.push('/category_playlists/' + data.category_id) } }>\r\n                            Open Private Playlists\r\n                        </Button>\r\n                    }\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <ListGroup variant=\"flush\">\r\n                    {props.categories\r\n                        && props.categories.map(item => {\r\n                                return renderItem(item)\r\n                        })}\r\n                </ListGroup>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default HomeBK;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Login.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\NoMatch.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Deregister.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ForgotPassword.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ChangePassword.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\VerifyEmail.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ResetPassword.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Register.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Profile.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardAdmin.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardUser.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardModerator.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\AddTokenCode.js",["212","213","214"],"import React from \"react\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport UserService from \"../../services/user.service\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InsertEmoticon from '@material-ui/icons/InsertEmoticon';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst AddTokenCode = () => {\r\n  console.log( \"AddTokenCode START\");\r\n  const [currentUser, setCurrentUser] = React.useState(undefined);\r\n  const [message, setMessage] = React.useState('');\r\n  const [tokenCode, setTokenCode] = React.useState('');\r\n  const history = useHistory();\r\n\r\n  console.log( \"AddTokenCode get profile\");\r\n  React.useEffect(()=>{\r\n    AuthService.getUserProfile()\r\n    \t.then((response)=>{\r\n\t\t  setCurrentUser(response);\r\n    \t})\r\n    \t.catch((err) => {\r\n\t\t\tconst err_str = err.toString();\r\n            const resMessage = \"Please Login [\" + err_str + \"]\";\r\n            setMessage(resMessage);\r\n            if( err_str.includes( \"403\"))\r\n            \thistory.push('/signin');\r\n            //setTimeout(() => {\r\n            //  setMessage('');\r\n            //}, 3000);\r\n        });\r\n  }, [])\r\n\r\n  console.log( \"AddTokenCode add tokens\");\r\n  const handleAddTokens = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13 || e.target.innerText == 'Add Tokens') {\r\n      UserService.addTokenCode(tokenCode)\r\n        .then(response => {\r\n          if (response.data.message === \"success\") {\r\n              window.location.reload();\r\n          }\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n\r\n            setMessage(resMessage);\r\n            setTimeout(() => {\r\n              setMessage('');\r\n            }, 3000);\r\n        });\r\n\r\n      document.getElementById('input-with-icon-textfield').value = '';\r\n      setTokenCode('');\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Row  className='mt-5'>\r\n        <Col md={4}>\r\n          <TextField\r\n            style={{width: '100%'}}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Input code\"\r\n            onChange={(e) => setTokenCode(e.target.value)}\r\n            onKeyDown={handleAddTokens}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <InsertEmoticon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={8}>\r\n          <Button size='sm' onClick={handleAddTokens}>\r\n            Add Tokens\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row  className='mt-5'>\r\n        <Col md={4}>\r\n           <a href=\"https://exquisiteview.com/Tokens_c13.htm\" target=\"_blank\">Get More Tokens</a>\r\n        </Col>\r\n        <Col md={8}>\r\n        </Col>\r\n      </Row>\r\n\r\n      { currentUser &&\r\n        <header className=\"jumbotron mt-4\">\r\n          <h3 className='mb-4'><strong>{currentUser.username}</strong></h3>\r\n          <p><strong>Current Tokens: </strong>{currentUser.nr_tokens}</p>\r\n        </header>\r\n      }\r\n\r\n      { message &&\r\n        <div className=\"alert alert-primary\">\r\n          {message}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTokenCode;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\CategoryPlaylists.js",["215","216","217","218","219","220","221"],"import React, {useState, useEffect} from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\n\r\nimport CategoryService from '../../services/category.service';\r\nimport {\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nconst Home = ()=>{\r\n    const [category, setCategory] = useState(null);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    let history = useHistory();\r\n    let params = useParams();\r\n    let categoryId = params.category_id || history.push(\"/404\");\r\n\r\n    useEffect(()=>{\r\n        getCategory();\r\n    }, []);\r\n\r\n    const getCategory = () => {\r\n        CategoryService.getCategory(categoryId).then( response => {\r\n          setCategory(response.data || null);\r\n          setPlaylists(response.data && response.data.playlists.filter(item => item.playlist_status == 0) || []);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {playlists && <PlaylistList playlists={playlists}></PlaylistList>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PlaylistList = (props) => {\r\n    let history = useHistory();\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                { data.thumb_image && <Image thumbnail src={data.thumb_image} className=\"mr-3\" style={{ cursor: 'pointer' }} /> || <InsertPhotoIcon style={{ fontSize: 140 }}/> }\r\n                \r\n                <Media.Body>\r\n                    <h2><span>{data.playlist_title}</span></h2>\r\n                    <p style={{ marginBottom: \"10px\" }}><span>{data.video_count} Videos</span></p>\r\n                    <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                        className=\"mr-2\"\r\n                        onClick={ () => { history.push('/playlist/' + data.playlist_id) } }>\r\n                        Open\r\n                    </Button>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <ListGroup variant=\"flush\">\r\n                    {props.playlists\r\n                        && props.playlists.map(item => {\r\n                                return renderItem(item)\r\n                        })}\r\n                </ListGroup>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ExecuteService.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\CategoryManagement.js",["222","223","224","225","226","227","228","229","230","231","232","233","234"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SelectOptions from '../../Common/SelectOptions';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge,\r\n  Modal,\r\n} from 'react-bootstrap';\r\n\r\nimport UserService from '../../../services/user.service';\r\nimport PlaylistService from '../../../services/playlist.service';\r\nimport CategoryService from '../../../services/category.service';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst CategoryModal = (props) => {\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.onHide}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Category Information\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <TextField placeholder=\"Name\" fullWidth value={props.title} onChange={ (e) => props.setCategoryTitle(e.target.value) } />\r\n                    </Col>\r\n                    <Col md={12} style={{marginTop: 15}}>\r\n                        <TextField placeholder=\"Description\" multiline fullWidth rows={4} value={props.description} onChange={ (e) => props.setCategoryDescription(e.target.value) } />\r\n                    </Col>\r\n                    <Col md={12} style={{marginTop: 15}}>\r\n                        <label> Thumbnail:&nbsp;&nbsp; </label>\r\n                        <input type=\"file\" accept=\"image/*\" onChange={ (e) => props.setCategoryThumb(e.target.files[0]) } />\r\n                    </Col>\r\n                    {props.publicPlaylists &&\r\n                        <Col md={6} style={{marginTop: 15}}>\r\n                            <SelectOptions\r\n                                label='Public Playlists'\r\n                                id={props.id}\r\n                                value={props.categoryPublicPlaylist}\r\n                                items={props.publicPlaylists}\r\n                                onSave={props.updateCategoryPublicPlaylist}\r\n                                multiple={false}\r\n                            />\r\n                        </Col>\r\n                    }\r\n                    {props.privatePlaylists.length > 0 &&\r\n                        <Col md={6} style={{marginTop: 15}}>\r\n                            <SelectOptions\r\n                                label='Private Playlists'\r\n                                id={props.id}\r\n                                value={props.categoryPrivatePlaylists}\r\n                                items={props.privatePlaylists}\r\n                                onSave={props.updateCategoryPrivatePlaylists}\r\n                                multiple={true}\r\n                            />\r\n                        </Col>\r\n                    }\r\n                </Row>\r\n                \r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={ props.onSave}>Save changes</Button>\r\n                <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function CategoryManagement() {\r\n    const classes = useStyles2();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const [data, setData] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [searchString, setSearchString] = useState('');\r\n    const [errorText, setErrorText] = useState('');\r\n    const [marketingPublicPlaylists, setMarketingPublicPlaylists] = useState([]);\r\n    const [marketingPrivatePlaylists, setMarketingPrivatePlaylists] = useState([]);\r\n        \r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const [showCategoryModal, setShowCategoryModal] = useState(false);\r\n\r\n    // for category modal\r\n    const [categoryId, setCategoryId] = useState('');\r\n    const [categoryTitle, setCategoryTitle] = useState('');\r\n    const [categoryDescription, setCategoryDescription] = useState('');\r\n    const [categoryThumb, setCategoryThumb] = useState(null);\r\n    const [categoryPublicPlaylist, setCategoryPublicPlaylist] = useState();\r\n    const [categoryPrivatePlaylists, setCategoryPrivatePlaylists] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!isLoaded) {\r\n            getAllCategory();\r\n            getAllPlaylists();\r\n            setIsLoaded(true)\r\n        }\r\n    })\r\n    \r\n    const getAllCategory = () => {\r\n        CategoryService.getAllCategory()\r\n            .then(result => {\r\n                setRows(result.data)\r\n                setData(result.data)\r\n            })\r\n    }\r\n\r\n    const getAllPlaylists = () => {\r\n        PlaylistService.getAllPlaylist()\r\n            .then(async response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    let privatePlaylists = [];\r\n                    let publicPlaylists = [];\r\n                    response.data.map(item => {\r\n                        if( item.type == 'marketing') {\r\n                            let obj = {id: item.id, name: item.playlist_title};\r\n                            item.playlist_status == 0 && privatePlaylists.push(obj) || publicPlaylists.push(obj);\r\n                        }\r\n                    })\r\n\r\n                    setMarketingPublicPlaylists(publicPlaylists);\r\n                    setMarketingPrivatePlaylists(privatePlaylists);\r\n                }\r\n            })\r\n    }\r\n\r\n    const resetCategoryData = () => {\r\n        setCategoryId('');\r\n        setCategoryTitle('');\r\n        setCategoryDescription('');\r\n        setCategoryThumb(null);\r\n        setCategoryPublicPlaylist();\r\n        setCategoryPrivatePlaylists([]);\r\n    }\r\n\r\n    const updateCategoryPublicPlaylist = (id, value) => {\r\n        if( value )\r\n            setCategoryPublicPlaylist(value)\r\n        else\r\n            setCategoryPublicPlaylist()\r\n    }\r\n\r\n    const updateCategoryPrivatePlaylists = (id, value) => {\r\n        setCategoryPrivatePlaylists(value)\r\n    }\r\n\r\n    const saveCategory = async () => {\r\n        setRows([])\r\n        setData([])\r\n\r\n        let thumb = '';\r\n        if( categoryThumb ) {\r\n            thumb = await CategoryService.uploadThumbnail(categoryThumb);\r\n        }\r\n\r\n        let playlists = [];\r\n        if( categoryPublicPlaylist > 0 )\r\n            playlists = [categoryPublicPlaylist, ...categoryPrivatePlaylists];\r\n        else\r\n            playlists = [...categoryPrivatePlaylists];\r\n\r\n        if( categoryId ) {\r\n            await CategoryService.updateCategory(categoryId, categoryTitle, categoryDescription, thumb, playlists)\r\n        } else {\r\n            await CategoryService.addCategory(categoryTitle, categoryDescription, thumb, playlists)\r\n        }\r\n\r\n        setShowCategoryModal(false)\r\n        resetCategoryData()\r\n        getAllCategory()\r\n    }\r\n\r\n    const editCategory = (id) => {\r\n        resetCategoryData()\r\n\r\n        const category = rows.filter(item => item.category_id == id)[0];\r\n        \r\n        setCategoryId(category.category_id);\r\n        setCategoryTitle(category.title);\r\n        setCategoryDescription(category.description);\r\n        setCategoryThumb(null);\r\n        setCategoryPublicPlaylist(category.public_playlists && category.public_playlists.length && category.public_playlists[0]);\r\n        setCategoryPrivatePlaylists(category.private_playlists);\r\n\r\n        setShowCategoryModal(true)\r\n    }\r\n\r\n    const removeCategory = (id) => {\r\n        setRows([])\r\n        setData([])\r\n        \r\n        CategoryService.removeCategory(id)\r\n        .then(response => {\r\n            if( response.data.message == 'success')\r\n                getAllCategory()\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n            console.log(resMessage);\r\n        });\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            let arr = [...data];\r\n            arr = arr.filter(item => (item.title).includes(e.target.value.trim().toLowerCase()) || (item.description).includes(e.target.value.trim().toLowerCase()) );\r\n            setRows(arr);\r\n        }\r\n    }\r\n    \r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {errorText &&\r\n                <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\r\n            }\r\n            <Row className='mt-5'>\r\n                <Col md={9}>\r\n                <Button size='sm' onClick={() => { resetCategoryData(); setShowCategoryModal(true); }}>\r\n                    Add Category\r\n                </Button>\r\n                </Col>\r\n                <Col md={3}>\r\n                <TextField\r\n                    className={classes.pasteTextField}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search token code\"\r\n                    onChange={(e) => setSearchString(e.target.value)}\r\n                    onKeyDown={handleSearch}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <SearchIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                    }}\r\n                />\r\n                </Col>\r\n            </Row>\r\n            \r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">No</TableCell>\r\n                            <TableCell align=\"center\">Image</TableCell>\r\n                            <TableCell align=\"center\">Title</TableCell>\r\n                            <TableCell align=\"center\">Description</TableCell>\r\n                            <TableCell align=\"center\">Public Playlists</TableCell>\r\n                            <TableCell align=\"center\">Private Playlists</TableCell>\r\n                            <TableCell align=\"center\">Operate</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {(rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows).map((row, index) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell style={{ width: 50 }} component=\"th\" scope=\"row\" align=\"center\">\r\n                                    {index + 1}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.thumb_image && <img src={row.thumb_image} width=\"100%\" style={{objectFit: 'cover'}} /> }\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.title}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 200 }} align=\"center\">\r\n                                    {row.description}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.public_playlists.length}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.private_playlists.length}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    <Button size='sm' variant='primary' block onClick={() => editCategory(row.category_id)}>Edit</Button>\r\n                                    <Button size='sm' variant='danger' block onClick={() => removeCategory(row.category_id)}>Delete</Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                                colSpan={7}\r\n                                count={rows.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                SelectProps={{\r\n                                inputProps: { 'aria-label': 'rows per page' },\r\n                                native: true,\r\n                                }}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                ActionsComponent={TablePaginationActions}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n            \r\n            <CategoryModal\r\n                show={showCategoryModal}\r\n                onHide={() => setShowCategoryModal(false)}\r\n                id={ categoryId }\r\n                title={ categoryTitle }\r\n                description={ categoryDescription }\r\n                categoryPublicPlaylist={ categoryPublicPlaylist }\r\n                categoryPrivatePlaylists={ categoryPrivatePlaylists }\r\n                publicPlaylists={ marketingPublicPlaylists }\r\n                privatePlaylists={ marketingPrivatePlaylists }\r\n                onSave={saveCategory}\r\n                setCategoryTitle={setCategoryTitle}\r\n                setCategoryDescription={setCategoryDescription}\r\n                setCategoryThumb={setCategoryThumb}\r\n                updateCategoryPublicPlaylist={updateCategoryPublicPlaylist}\r\n                updateCategoryPrivatePlaylists={updateCategoryPrivatePlaylists}\r\n            />\r\n        </>\r\n    );\r\n}","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\UploadImage.js",["235","236","237"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport MButton from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport downloadFile from '../../../services/downloadfile';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    ProgressBar,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nimport UploadService from '../../../services/file-upload.service';\r\nimport ImageService from '../../../services/image.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst ImageUpload = () => {\r\n    const [currentFile, setCurrentFile] = React.useState(undefined);\r\n    const [previewImage, setPreviewImage] = React.useState(undefined);\r\n    const [progress, setProgress] = React.useState(0);\r\n    const [message, setMessage] = React.useState('');\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('page') ? Number(localStorage.getItem('page')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [imageInfos, setImageInfos] = React.useState([]);\r\n    const [treeData, setTreeData] = useState('');\r\n    const [selected, setSelected] = useState('root');\r\n    const [imageData, setImageData] = useState([]);\r\n    const [alertVisible, setAlertVisible] = useState(false);\r\n    const [allImage, setAllImage] = useState([]);\r\n    const [expanded, setExpanded] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setExpand()\r\n    }, [])\r\n\r\n    const setExpand = () => {\r\n        // localStorage.getItem('selected') ? localStorage.getItem('selected')) :\r\n        const selectedNode = localStorage.getItem('selected');\r\n        let expand = ['root'];\r\n        if (selectedNode) {\r\n            let y, m, d;\r\n            if (selectedNode.length === 4 && Number(selectedNode) > 1000) {\r\n                y = selectedNode\r\n                expand.push(y)\r\n            } else if (selectedNode.length === 7) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n            } else if (selectedNode.length === 10) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                d = selectedNode.split(\"-\")[2];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n                expand.push(y + '-' + m + '-' + d)\r\n            }\r\n        }\r\n        setExpanded(expand)\r\n    }\r\n\r\n    // set tree data\r\n    const setTree = (plain) => {\r\n        const data = {\r\n            id: 'root',\r\n            name: 'Images',\r\n            children: [],\r\n        };\r\n        plain.forEach(value => {\r\n            let [year, month, day] = new Date(value.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n            let index = data.children.findIndex(item => item.id === String(year))\r\n            if (index < 0) {\r\n                data.children.push({\r\n                    id: year.toString(),\r\n                    name: year.toString(),\r\n                    children: [{\r\n                        id: year + '-' + month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        }]\r\n                    }]\r\n                })\r\n            } else {\r\n                let month_index = data.children[index].children.findIndex(item => String(item.id) === year + '-' + month)\r\n                if (month_index < 0) {\r\n                    data.children[index].children.push({\r\n                        id: year + '-' + month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let day_index = data.children[index].children[month_index].children.findIndex(item => String(item.id) === year + '-' + month + '-' + day)\r\n                    if (day_index < 0) {\r\n                        data.children[index].children[month_index].children.push({\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        setTreeData(data);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setMessage('qwe');\r\n\r\n        ImageService.getImageFiles()\r\n            .then(async response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setImageData(response.data)\r\n                    setTree(response.data)\r\n\r\n                    ///////\r\n                    const nodeId = localStorage.getItem('selected');\r\n                    let data = await response.data.filter(item => {\r\n                        let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n                        let selectedYear = '';\r\n                        let selectedMonth = '';\r\n                        let selectedDay = '';\r\n\r\n                        let fileName = item.file_name + item.description;\r\n                        fileName = fileName.trim().toLowerCase();\r\n\r\n                        if (nodeId === 'root') {\r\n                            return 1;\r\n                        }\r\n\r\n                        let selectedDate = '';\r\n                        if (String(nodeId).length === 4) {\r\n                            selectedYear = String(nodeId);\r\n                            if (selectedYear === year) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n\r\n                        if (String(nodeId).length >= 6) {\r\n                            selectedDate = nodeId.split('-');\r\n                            selectedYear = selectedDate[0];\r\n                            selectedMonth = selectedDate[1];\r\n                            if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                                return 1;\r\n                            }\r\n                            if (String(nodeId).length >= 8) {\r\n                                selectedDay = nodeId.split('-')[2];\r\n                                if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    });\r\n\r\n                    setImageInfos(data);\r\n\r\n                    const total = Math.ceil(data.length / itemsPerPage);\r\n                    setTotalPages(total);\r\n                }\r\n            })\r\n        ImageService.getAllImageFiles()\r\n            .then(response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setAllImage(response.data)\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const upload = () => {\r\n        setProgress(0);\r\n        UploadService.uploadImage(currentFile, (event) => {\r\n            setProgress(Math.round((100 * event.loaded) / event.total));\r\n        }).then(response => {\r\n            setMessage(response.data.message);\r\n            setAlertVisible(true)\r\n            setTimeout(() => {\r\n                setAlertVisible(false)\r\n            }, 2000)\r\n            return ImageService.getImageFiles();\r\n        }).then(files => {\r\n            if (files.data && files.data.length > 0) {\r\n                setImageData(files.data);\r\n                setTree(files.data);\r\n                setImageInfos(files.data);\r\n                const total = Math.ceil(files.data.length / itemsPerPage);\r\n                setTotalPages(total);\r\n            }\r\n        }).catch(error => {\r\n            const resMessage =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n\r\n            setMessage(resMessage);\r\n            setProgress(0);\r\n            setCurrentFile(undefined);\r\n        })\r\n    }\r\n\r\n    const selectFile = (event) => {\r\n        if (event.target.files[0]) {\r\n            setCurrentFile(event.target.files[0]);\r\n            setPreviewImage(URL.createObjectURL(event.target.files[0]));\r\n            setProgress(0);\r\n            setMessage(\"\");\r\n        }\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum) => {\r\n        setPageNumber(pagenum);\r\n        localStorage.setItem('page', pagenum)\r\n    }\r\n\r\n    const handleGoFirstPage = () => {\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleGoLastPage = () => {\r\n        setPageNumber(totalPages);\r\n    }\r\n\r\n    const handlePrevPage = () => {\r\n        if (pageNumber > 1) {\r\n            const page = pageNumber - 1;\r\n            setPageNumber(page);\r\n        }\r\n    }\r\n\r\n    const handleNextPage = () => {\r\n        if (pageNumber < totalPages) {\r\n            const page = pageNumber + 1;\r\n            setPageNumber(page);\r\n        }\r\n    }\r\n\r\n    const handleChangeKeyword = (key) => {\r\n        //handleNodeSelect(null, selected ? selected : 'root', );\r\n        const keyword = key.trim().toLowerCase();\r\n        const nodeId = selected;\r\n        let data = allImage.filter(item => {\r\n            let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n            let selectedYear = '';\r\n            let selectedMonth = '';\r\n            let selectedDay = '';\r\n\r\n            let fileName = item.file_name + item.description;\r\n            fileName = fileName.trim().toLowerCase();\r\n\r\n            if (nodeId === 'root') {\r\n                if (keyword === \"\") {\r\n                    return 1;\r\n                } else {\r\n                    if (fileName.includes(keyword)) {\r\n                        return 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let selectedDate = '';\r\n            if (String(nodeId).length === 4) {\r\n                selectedYear = String(nodeId);\r\n                if (selectedYear === year) {\r\n                    if (keyword === \"\") {\r\n                        return 1;\r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (String(nodeId).length >= 6) {\r\n                selectedDate = nodeId.split('-');\r\n                selectedYear = selectedDate[0];\r\n                selectedMonth = selectedDate[1];\r\n                if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                    if (keyword === \"\") {\r\n                        return 1;\r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n                if (String(nodeId).length >= 8) {\r\n                    selectedDay = nodeId.split('-')[2];\r\n                    if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                        if (keyword === \"\") {\r\n                            return 1;\r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        setImageInfos(data);\r\n\r\n        const total = Math.ceil(data.length / itemsPerPage);\r\n        setTotalPages(total);\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleNodeSelect = (event, nodeId, keyword) => {\r\n        if (keyword === \"\") {\r\n            document.getElementById('input-with-icon-textfield').value = '';\r\n        }\r\n        {\r\n            setSelected(nodeId);        // e.g. 2020-3-5\r\n            localStorage.setItem(\"selected\", nodeId);\r\n            setExpand();\r\n            let data = imageData.filter(item => {\r\n                let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n                let selectedYear = '';\r\n                let selectedMonth = '';\r\n                let selectedDay = '';\r\n\r\n                let fileName = item.file_name + item.description;\r\n                fileName = fileName.trim().toLowerCase();\r\n\r\n                if (nodeId === 'root') {\r\n                    if (keyword === \"\") {\r\n                        return 1;\r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let selectedDate = '';\r\n                if (String(nodeId).length === 4) {\r\n                    selectedYear = String(nodeId);\r\n                    if (selectedYear === year) {\r\n                        if (keyword === \"\") {\r\n                            return 1;\r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (String(nodeId).length >= 6) {\r\n                    selectedDate = nodeId.split('-');\r\n                    selectedYear = selectedDate[0];\r\n                    selectedMonth = selectedDate[1];\r\n                    if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                        if (keyword === \"\") {\r\n                            return 1;\r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (String(nodeId).length >= 8) {\r\n                        selectedDay = nodeId.split('-')[2];\r\n                        if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                            if (keyword === \"\") {\r\n                                return 1;\r\n                            } else {\r\n                                if (fileName.includes(keyword)) {\r\n                                    return 1;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n                return 0;\r\n            });\r\n\r\n            setImageInfos(data);\r\n\r\n            const total = Math.ceil(data.length / itemsPerPage);\r\n            setTotalPages(total);\r\n        }\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderTree = (nodes) => {\r\n        return (\r\n            <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\r\n                {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n            </TreeItem>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"mb-3\">\r\n                <Col md={4}>\r\n                    <label className=\"btn btn-default p-0\">\r\n                        <input type=\"file\" accept=\"image/*\" onChange={selectFile} />\r\n                    </label>\r\n                    <Button size=\"sm\" style={{ width: \"100px\" }} disabled={!currentFile} onClick={upload}>\r\n                        Upload\r\n                    </Button>\r\n                </Col>\r\n                <Col md={8}>\r\n                    {previewImage && (\r\n                        <div className=\"text-center\">\r\n                            <Image className=\"preview\" src={previewImage} alt=\"\" />\r\n                        </div>\r\n                    )}\r\n                    {currentFile && (\r\n                        < ProgressBar className=\"my-3\" min={0} max={100} now={progress} label={`${progress}%`} striped />\r\n                    )}\r\n\r\n                    {alertVisible && message && (\r\n                        <Alert\r\n                            severity='success'\r\n                            style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\r\n                        >\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={3} className=\"card\">\r\n                    <TreeView\r\n                        className={classes.root}\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        //defaultExpanded={['root']}\r\n                        defaultExpandIcon={<ChevronRightIcon />}\r\n                        expanded={expanded}\r\n                        onNodeSelect={(even, nodeIds) => handleNodeSelect(even, nodeIds, \"\")}\r\n                    >\r\n                        {treeData && renderTree(treeData)}\r\n                    </TreeView>\r\n                </Col>\r\n                <Col md={9}>\r\n                    {imageInfos\r\n                        && <ImageList\r\n                            image_list={imageInfos}\r\n                            totalPages={totalPages}\r\n                            itemsPerPage={itemsPerPage}\r\n                            currentPage={pageNumber}\r\n                            onChangeKeyword={handleChangeKeyword}\r\n                            onChangePageNumber={handleChangePageNumber}\r\n                            onGoFirstPage={handleGoFirstPage}\r\n                            onGoLastPage={handleGoLastPage}\r\n                            onNextPage={handleNextPage}\r\n                            onPrevPage={handlePrevPage}\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nconst ImageList = (props) => {\r\n    let history = useHistory();\r\n    const [ErrorMessage, setErrorMessage] = React.useState('');\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleImageDownload = (url, imageid) => {\r\n        ImageService.downloadImage(url).then((res) => {\r\n            downloadFile(res.data, imageid + '.jpg')\r\n        }).catch((err) => {\r\n\r\n            err.response.data.text().then(res => {\r\n                let eMessage = JSON.parse(res).message\r\n                setErrorMessage(eMessage);\r\n                setTimeout(() => {\r\n                    setErrorMessage('');\r\n                }, 5000);\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const getFileName = (filename) => {\r\n        let fname = filename.split(\"_\");\r\n        fname.shift();\r\n        return fname.join(\"_\");\r\n    }\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.image_id}>\r\n            <Media>\r\n                <Image thumbnail src={data.thumb_url} className=\"mr-3\" />\r\n                <Media.Body>\r\n                    <h5><span>{`${data.id_counter}. File Name : `}</span><span>{getFileName(data.file_name)}</span></h5>\r\n                    <p style={{ marginBottom: \"0px\" }}><span>Id : </span><span>{data.image_id}</span></p>\r\n                    <p style={{ marginBottom: \"0px\" }}><small><span>Created Time : </span><span>{data.dateTime}</span></small></p>\r\n                    <p><small><span>Description : </span><span>{data.description || \"No description\"}</span></small></p>\r\n                    <Link to={`/edit_image/${data.image_id}`}><Button variant=\"success\" size=\"sm\" className=\"mr-3\">Edit Image</Button></Link>\r\n                    <Button variant=\"primary\" onClick={() => handleImageDownload(data.url, data.image_id)} size=\"sm\">Download</Button>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    const showPagenationItem = () => {\r\n\r\n        return (\r\n            <Pagination\r\n                color=\"primary\"\r\n                className=\"mt-3\"\r\n                shape=\"rounded\"\r\n                count={props.totalPages}\r\n                page={props.currentPage}\r\n                onChange={(event, val) => props.onChangePageNumber(val)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            props.onChangeKeyword(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <TextField\r\n                    className={classes.margin}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search\"\r\n                    onKeyDown={doSomethingWith}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <SearchIcon />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <h3 className=\"card-header\">List of Images</h3>\r\n                <ListGroup variant=\"flush\">\r\n                    {props.image_list\r\n                        && props.image_list.map((img, index) => {\r\n                            if ((props.currentPage - 1) * props.itemsPerPage <= index && (props.currentPage) * props.itemsPerPage > index)\r\n                                return renderItem(img)\r\n                        })}\r\n                </ListGroup>\r\n                {showPagenationItem()}\r\n            </div>\r\n\r\n            {ErrorMessage &&\r\n                <div>\r\n                    <Alert\r\n                        severity='error'\r\n                        style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\r\n                        action={\r\n                            <MButton\r\n                                color=\"inherit\" size=\"medium\"\r\n                                onClick={() => {\r\n                                    history.push('/add_token_code');\r\n                                }}\r\n                            >\r\n                                Take More Tokens\r\n                        </MButton>\r\n                        }\r\n                    >\r\n                        {ErrorMessage}\r\n                    </Alert>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ImageUpload","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\PPTFileList.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\EditImage.js",["238"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Image } from 'react-konva';\r\nimport {\r\n    Button,\r\n    ListGroup,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n} from 'react-bootstrap';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\nimport ImageService from '../../../services/image.service';\r\nimport Auth from \"../../../services/auth.service\";\r\nimport GlobalData from '../../../tools/GlobalData';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { makeStyles, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport MButton from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport imageService from '../../../services/image.service';\r\nimport downloadFile from '../../../services/downloadfile'\r\n\r\nconst back_end_server = GlobalData.back_end_server_ip + \":\" + GlobalData.back_end_server_port;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n        // marginTop: 130\r\n    },\r\n}));\r\n\r\nconst MyVerticallyCenteredModal = (props) => {\r\n    const onSaveClick = (event) => {\r\n        props.onAddDescription(props.description)\r\n        props.onHide()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.onHide}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Input Description\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h5>📝 Please enter your description to the selected image.</h5>\r\n                <Form.Control as=\"textarea\" rows={3} name=\"description\" value={props.description} onChange={props.handleInputChange} />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n                <Button variant=\"primary\" onClick={onSaveClick}>Save changes</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst EditImage = (props) => {\r\n    const [imageInfos, setImageInfos] = React.useState(undefined);\r\n    const [imageId, setImageId] = React.useState('');\r\n    const [imageSrc, setImageSrc] = React.useState('');\r\n    const [imageDescription, setImageDescription] = useState('');\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n    const [currentUser] = React.useState(Auth.getCurrentUser());\r\n    const [imageHistory, setImageHistory] = React.useState(undefined);\r\n    const [orginImageHistory, setOrginImageHistory] = useState(undefined);\r\n    const [lastId, setLastId] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [itemsPerPage] = useState(5);\r\n    const [totalPage, setTotalPage] = useState(1);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [isRotate, setIsRotate] = useState(undefined)\r\n    const [isEditDescription, setIsEditDescription] = useState(undefined)\r\n\r\n    let history = useHistory();\r\n\r\n    React.useEffect(() => {\r\n        ImageService.getImageFiles()\r\n            .then(files => {\r\n                setImageInfos(files.data);\r\n                const iid = props.match.params.image_id;\r\n                return ImageService.getImageHistory(iid);\r\n            }).then(response => {\r\n                setOrginImageHistory(response.data);\r\n                setImageHistory(response.data);\r\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n                setIsLoading(false);\r\n                setErrorMessage(resMessage);\r\n            });\r\n    }, [props]);\r\n\r\n    React.useEffect(() => {\r\n        if (imageHistory && imageHistory.length > 0) {\r\n            const first_id = imageHistory[0].image_id;\r\n            const last_id = imageHistory[imageHistory.length - 1].image_id;\r\n            setLastId(last_id);\r\n\r\n            if (isRotate && !isEditDescription) {\r\n                setImageId(last_id)\r\n                setTotalPage(Math.ceil(imageHistory.length / itemsPerPage));\r\n                setPageNumber(totalPage)\r\n                setIsRotate(false)\r\n            } else if (!isRotate && isEditDescription) {\r\n                setIsEditDescription(false)\r\n            } else {\r\n                setImageId(first_id)\r\n            }\r\n\r\n            setIsLoading(false);\r\n        }\r\n    }, [imageHistory]);\r\n\r\n    React.useEffect(() => {\r\n        setImageSrc(ImageService.getImage(imageId));\r\n    }, [imageId]);\r\n\r\n    const handleRotateImage = () => {\r\n        const payload = {\r\n            imageId: imageId,\r\n            degree: 90,\r\n            clock: true,\r\n        }\r\n        setIsLoading(true);\r\n        ImageService.rotateImage(payload).then(response => {\r\n            ImageService.getImageHistory(response.data.imageId).then(response => {\r\n                setImageHistory(response.data);\r\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\r\n            }).catch(err => {\r\n\r\n            })\r\n            setErrorMessage('');\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n            setIsLoading(false);\r\n            \r\n            setErrorMessage(resMessage);\r\n            setTimeout(() => {\r\n                setErrorMessage('');\r\n            }, 5000);\r\n        });\r\n        setIsRotate(true);\r\n    }\r\n\r\n    const handleEditImage = () => {\r\n        setModalShow(true);\r\n        setImageDescription(imageHistory.find(item => item.image_id === imageId).description)\r\n        setIsEditDescription(true)\r\n    }\r\n\r\n    const handleAddDescription = (desc) => {\r\n        const data = {\r\n            imageId: imageId,\r\n            imageDescription: desc\r\n        }\r\n        ImageService.addImageDescription(data).then(response => {\r\n            const index = imageHistory.findIndex(item => item.image_id === imageId)\r\n            const history = [...imageHistory];\r\n            history[index].description = desc;\r\n            setImageHistory(history);\r\n            setErrorMessage('');\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n            setIsLoading(false);\r\n\r\n            setErrorMessage(resMessage);\r\n            setTimeout(() => {\r\n                setErrorMessage('');\r\n            }, 5000);\r\n        })\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setImageDescription(e.target.value);\r\n    }\r\n\r\n    const onClickHistory = (id) => {\r\n        setImageId(id);\r\n    }\r\n\r\n    const removeImage = (image_id) => {\r\n        let arr = [...imageHistory];\r\n        if (arr.length === 1) {\r\n            const confirm = window.confirm(\"Are you sure remove the last image?\");\r\n            if (confirm) {\r\n                ImageService.removeImage(image_id).then((response) => {\r\n                    props.history.push(\"/upload_image\");\r\n                }).catch((err) => {\r\n                    const resMessage = (\r\n                        err.response &&\r\n                        err.response.data &&\r\n                        err.response.data.message\r\n                    ) || err.toString();\r\n                    setIsLoading(false);\r\n                    setErrorMessage(resMessage);\r\n                });\r\n            }\r\n        } else {\r\n            ImageService.removeImage(image_id).then((response) => {\r\n                arr = arr.filter(item => item.image_id !== image_id)\r\n                setImageHistory(arr);\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n                setIsLoading(false);\r\n                setErrorMessage(resMessage);\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleNextImage = () => {\r\n        const iid = props.match.params.image_id;\r\n        var nextImageId = null;\r\n        if (imageInfos && imageInfos.length > 0) {\r\n            for (let i = 0; i < imageInfos.length - 1; i++) {\r\n                if (imageInfos[i].image_id === iid) {\r\n                    nextImageId = imageInfos[i + 1].image_id;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (nextImageId) {\r\n            props.history.push(`/edit_image/${nextImageId}`);\r\n        }\r\n    }\r\n\r\n    const handlePrevImage = () => {\r\n        const iid = props.match.params.image_id;\r\n        var prevImageId = null;\r\n        if (imageInfos && imageInfos.length > 0) {\r\n            for (let i = 1; i < imageInfos.length; i++) {\r\n                if (imageInfos[i].image_id === iid) {\r\n                    prevImageId = imageInfos[i - 1].image_id;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (prevImageId) {\r\n            props.history.push(`/edit_image/${prevImageId}`);\r\n        }\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum) => {\r\n        setPageNumber(pagenum);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (imageHistory) {\r\n            const total = Math.ceil(imageHistory.length / itemsPerPage);\r\n            setTotalPage(total);\r\n            isRotate && setPageNumber(total);\r\n        }\r\n    })\r\n\r\n    // search\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            const keyword = e.target.value;\r\n\r\n            const data = orginImageHistory.filter(item => {\r\n                let fileName = item.file_name + item.description;\r\n                fileName = fileName.trim().toLowerCase();\r\n\r\n                if (fileName.includes(keyword)) {\r\n                    return 1;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n\r\n            setImageHistory(data);\r\n\r\n            const total = Math.ceil(data.length / itemsPerPage);\r\n            setTotalPage(total);\r\n            setPageNumber(1);\r\n        }\r\n    }\r\n\r\n    const handleImageDownload = (url, imageid) => {\r\n        imageService.downloadImage(url).then((res) => {\r\n            downloadFile(res.data, imageid + '.jpg')\r\n        }).catch((err) => {\r\n            setIsLoading(false);\r\n            err.response.data.text().then(res => {\r\n                let eMessage = JSON.parse(res).message\r\n                setErrorMessage(eMessage);\r\n                setTimeout(() => {\r\n                    setErrorMessage('');\r\n                }, 5000);\r\n            })\r\n        })\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className='col-lg-6  mb-5 mb-lg-0  pb-4 pb-lg-0'>\r\n                    <div className=\"mr-3 url-image\" style={{ width: \"500px\", height: \"400px\" }}>\r\n                        <Stage width={500} height={400}>\r\n                            <Layer>\r\n                                <URLImage src={imageSrc} width={500} height={400} />\r\n                            </Layer>\r\n                        </Stage>\r\n                        <div className='text-center mt-4'>\r\n                            <div>\r\n                                <Button className=\"btn-circles mr-1\" href='/upload_image'>\r\n                                    Go Back\r\n                                </Button>\r\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handlePrevImage() }}>Prev</Button>\r\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handleNextImage() }}>Next</Button>\r\n                            </div>\r\n                            <div>\r\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleRotateImage} disabled={lastId !== imageId || isLoading}>\r\n                                    {isLoading && (\r\n                                        <span className=\"spinner-border spinner-border-sm\"></span>\r\n                                    )}\r\n                                    <span>Rotate Image</span>\r\n                                </Button>\r\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleEditImage}>\r\n                                    Edit Description\r\n                                </Button>\r\n                                <Button variant=\"primary\" className=\"my-3 mr-2\"\r\n                                    onClick={() => handleImageDownload(`${back_end_server}/api/image/getImageFile/${imageId}?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&type=download`, imageId)}\r\n                                >                                    Download\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <MyVerticallyCenteredModal\r\n                        show={modalShow}\r\n                        onHide={() => setModalShow(false)}\r\n                        description={imageDescription}\r\n                        onAddDescription={handleAddDescription}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n                <div className='col-lg-6 mt-5 mt-lg-0'>\r\n                    <TextField\r\n                        className={classes.margin}\r\n                        placeholder=\"Search\"\r\n                        onKeyDown={doSomethingWith}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <SearchIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <ImageHistory\r\n                        imageHistory={imageHistory}\r\n                        activeImageId={imageId}\r\n                        onRemove={removeImage}\r\n                        totalPage={totalPage}\r\n                        currentPage={pageNumber}\r\n                        itemsPerPage={itemsPerPage}\r\n                        itemClick={onClickHistory}\r\n                        onChangePageNumber={handleChangePageNumber}\r\n                    />\r\n                    <Pagination color=\"primary\" shape=\"rounded\" className=\"m-3\" count={totalPage} page={pageNumber} onChange={(event, val) => setPageNumber(val)} />\r\n                </div>\r\n            </div>\r\n            {\r\n                errorMessage &&\r\n                <div>\r\n                    <Alert\r\n                        severity='error'\r\n                        style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\r\n                        action={ errorMessage.includes('Not Enough Tokens') &&\r\n                            <MButton\r\n                                color=\"inherit\" size=\"medium\"\r\n                                onClick={() => {\r\n                                    history.push('/add_token_code');\r\n                                }}\r\n                            >\r\n                                Take More Tokens\r\n                        </MButton>\r\n                        }\r\n                    >\r\n                        {errorMessage}\r\n                    </Alert>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ImageHistory = ({ imageHistory, activeImageId, onRemove, itemClick, currentPage, itemsPerPage }) => {\r\n    const getIsActive = (image_id) =>\r\n    (image_id === activeImageId ?\r\n        \"dark\" :\r\n        \"\"\r\n    );\r\n\r\n    const getFileName = (filename) => {\r\n        let fname = filename.split(\"_\");\r\n        fname.shift();\r\n        return fname.join(\"_\");\r\n    }\r\n\r\n    const renderItem = (ih) => (\r\n        <ListGroup.Item key={ih.image_id} variant={getIsActive(ih.image_id)} className=\"cursor-pointer\" onClick={() => itemClick(ih.image_id)}>\r\n            <div>\r\n                <h6>File Name : <span>{getFileName(ih.file_name)}</span></h6>\r\n                <OverlayTrigger\r\n                    key={\"right\"}\r\n                    placement={\"right\"}\r\n                    overlay={\r\n                        <Tooltip id={`remove`}>Remove image</Tooltip>\r\n                    }\r\n                >\r\n                    <button type=\"button\" className=\"close\" onClick={() => { onRemove(ih.image_id) }}>\r\n                        <span aria-hidden=\"true\" style={{ color: \"red\" }}>×</span>\r\n                        <span className=\"sr-only\">Close</span>\r\n                    </button>\r\n                </OverlayTrigger>\r\n            </div>\r\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Image Id: </span><span>{ih.image_id}</span></small></p>\r\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Description: </span><span>{ih.description || \"No description\"}</span></small></p>\r\n            <p style={{ marginBottom: \"0px\" }}><span style={{ fontWeight: 500 }}>Source Image: </span><span>{ih.source_image_id || \"Main image\"}</span></p>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    return (\r\n        <ListGroup className=\"list-group\">\r\n            {imageHistory && imageHistory.length > 0 && (\r\n                imageHistory.map((ih, index) => {\r\n                    if ((currentPage - 1) * itemsPerPage <= index && (currentPage) * itemsPerPage > index)\r\n                        return renderItem(ih)\r\n                    else {\r\n                        return null\r\n                    }\r\n                })\r\n            )}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nclass URLImage extends React.Component {\r\n    state = {\r\n        image: null,\r\n        width: 0,\r\n        height: 0,\r\n    };\r\n    componentDidMount() {\r\n        this.loadImage();\r\n    }\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.src !== this.props.src) {\r\n            this.loadImage();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.image.removeEventListener('load', this.handleLoad);\r\n    }\r\n    loadImage() {\r\n        // save to \"this\" to remove \"load\" handler on unmount\r\n        this.image = new window.Image();\r\n        this.image.src = this.props.src;\r\n        this.image.addEventListener('load', this.handleLoad);\r\n    }\r\n    handleLoad = () => {\r\n        // after setState react-konva will update canvas and redraw the layer\r\n        // because \"image\" property is changed\r\n        this.setState({\r\n            image: this.image\r\n        });\r\n\r\n        const ratio = Math.min(Math.min(this.props.width, this.image.width) / this.image.width, Math.min(this.props.height, this.image.height) / this.image.height);\r\n\r\n        this.setState({\r\n            width: ratio * this.image.width,\r\n            height: ratio * this.image.height\r\n        })\r\n    };\r\n    render() {\r\n        return (\r\n            <Image\r\n                x={this.props.x}\r\n                y={this.props.y}\r\n                width={this.state.width}\r\n                height={this.state.height}\r\n                image={this.state.image}\r\n                ref={node => {\r\n                    this.imageNode = node;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditImage;\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\UploadVideo.js",["239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputIcon from '@material-ui/icons/InsertLink';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport VideoPlayer from './VideoPlayer';\r\nimport EditDialog from './EditDialog';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n    Form,\r\n} from 'react-bootstrap';\r\n\r\nimport PlaylistService from '../../../services/playlist.service';\r\nimport VideoService from '../../../services/video.service';\r\nimport { LinearProgress } from '@material-ui/core';\r\nimport SelectOptions from '../../Common/SelectOptions';\r\nimport authService from '../../../services/auth.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst getVideoId = (url) => {\r\n    return url.split(\"?v=\")[1];\r\n}\r\n\r\nconst VideoUpload = () => {\r\n    const [message, setMessage] = React.useState(\"\");\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('page') ? Number(localStorage.getItem('page')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [treeData, setTreeData] = useState('');\r\n    const [selected, setSelected] = useState('root');\r\n    const [alertVisible, setAlertVisible] = useState(false);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [videoUrl, setVideoUrl] = useState('');\r\n    const [progressVisible, setProgressVisible] = useState(false);\r\n    const [videoData, setVideoData] = useState([]);\r\n    const [videoInfos, setVideoInfos] = useState([]);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [playUrl, setPlayUrl] = useState(null);\r\n    const [metaTitle, setMetaTitle] = useState(null);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [metaDescription, setMetaDescription] = useState(null);\r\n    const [videoId, setVideoId] = useState(null);\r\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\r\n    const [editShow, setEditShow] = useState(false);\r\n    const [manualTitle, setManualTitle] = useState(undefined);\r\n    const [manualDescription, setManualDescription] = useState(undefined);\r\n    //const [myPlayingStatus, setMyPlayingStatus] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setExpand()\r\n    }, [])\r\n\r\n    const setExpand = () => {\r\n        const selectedNode = localStorage.getItem('selected');\r\n        let expand = ['root'];\r\n        if (selectedNode) {\r\n            let y, m, d;\r\n            if (selectedNode.length === 4 && Number(selectedNode) > 1000) {\r\n                y = selectedNode\r\n                expand.push(y)\r\n            } else if (selectedNode.length === 7) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n            } else if (selectedNode.length === 10) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                d = selectedNode.split(\"-\")[2];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n                expand.push(y + '-' + m + '-' + d)\r\n            }\r\n        }\r\n        setExpanded(expand)\r\n    }\r\n\r\n    // set tree data\r\n    const setTree = (plain) => {\r\n        const data = {\r\n            id: 'root',\r\n            name: 'All Videos',\r\n            children: [],\r\n        };\r\n        plain.forEach(value => {\r\n            let [year, month, day] = new Date(value.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n            let index = data.children.findIndex(item => item.id === String(year))\r\n            if (index < 0) {\r\n                data.children.push({\r\n                    id: year.toString(),\r\n                    name: year.toString(),\r\n                    children: [{\r\n                        id: year + '-' + month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        }]\r\n                    }]\r\n                })\r\n            } else {\r\n                let month_index = data.children[index].children.findIndex(item => String(item.id) === year + '-' + month)\r\n                if (month_index < 0) {\r\n                    data.children[index].children.push({\r\n                        id: year + '-' + month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let day_index = data.children[index].children[month_index].children.findIndex(item => String(item.id) === year + '-' + month + '-' + day)\r\n                    if (day_index < 0) {\r\n                        data.children[index].children[month_index].children.push({\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        setTreeData(data);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getAllVideos();\r\n\r\n        //get playlists\r\n        getAllPlaylists();\r\n    }, [])\r\n\r\n    const getAllPlaylists = () => {\r\n        PlaylistService.getAllPlaylist()\r\n            .then(async response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPlaylists(response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    const getAllVideos = () => {\r\n        VideoService.getAllVideoList()\r\n            .then(async response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    const res = response.data;\r\n\r\n                    for (const key in res) {\r\n                        const videoId = res[key].id;\r\n                        const result = await VideoService.getPlaylistIds(videoId);\r\n                        res[key].arr = result.data.playlists;\r\n                    }\r\n\r\n                    setVideoData(res)\r\n                    setTree(response.data)\r\n\r\n                    ///////\r\n                    const nodeId = localStorage.getItem('selected');\r\n                    let data = await response.data.filter(item => {\r\n                        let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n                        let selectedYear = '';\r\n                        let selectedMonth = '';\r\n                        let selectedDay = '';\r\n\r\n                        let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\r\n                        fileName = fileName ? fileName.trim().toLowerCase() : '';\r\n\r\n                        if (nodeId === 'root') {\r\n                            return 1;\r\n                        }\r\n\r\n                        let selectedDate = '';\r\n                        if (String(nodeId).length === 4) {\r\n                            selectedYear = String(nodeId);\r\n                            if (selectedYear === year) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n\r\n                        if (String(nodeId).length >= 6) {\r\n                            selectedDate = nodeId.split('-');\r\n                            selectedYear = selectedDate[0];\r\n                            selectedMonth = selectedDate[1];\r\n                            if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                                return 1;\r\n                            }\r\n                            if (String(nodeId).length >= 8) {\r\n                                selectedDay = nodeId.split('-')[2];\r\n                                if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                                    return 1;\r\n                                } else {\r\n                                    return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    });\r\n\r\n                    setVideoInfos(data);\r\n\r\n                    const total = Math.ceil(data.length / itemsPerPage);\r\n                    setTotalPages(total);\r\n                }\r\n            })\r\n    }\r\n\r\n    const upload = () => {\r\n        setProgressVisible(true);\r\n\r\n        VideoService.uploadVideo(videoUrl)\r\n            .then(response => {\r\n                setMessage(response.data.message);\r\n                setAlertVisible(true)\r\n                setTimeout(() => {\r\n                    setAlertVisible(false)\r\n                }, 2000)\r\n\r\n                setProgressVisible(false);\r\n\r\n                if (response.data.message === 'success') {\r\n                    getAllVideos();\r\n                    setVideoUrl('');\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum) => {\r\n        setPageNumber(pagenum);\r\n        localStorage.setItem('page', pagenum)\r\n    }\r\n\r\n    const handleChangeKeyword = (key) => {\r\n        const keyword = key.trim().toLowerCase();\r\n        const nodeId = selected;\r\n        let data = videoData.filter(item => {\r\n            let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n            let selectedYear = '';\r\n            let selectedMonth = '';\r\n            let selectedDay = '';\r\n\r\n            let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\r\n            fileName = fileName.trim().toLowerCase();\r\n\r\n            if (nodeId === 'root') {\r\n                if (keyword === \"\") {\r\n                    return 1;\r\n                } else {\r\n                    if (fileName.includes(keyword)) {\r\n                        return 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let selectedDate = '';\r\n            if (String(nodeId).length === 4) {\r\n                selectedYear = String(nodeId);\r\n                if (selectedYear === year) {\r\n                    if (keyword === \"\") {\r\n                        return 1;\r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (String(nodeId).length >= 6) {\r\n                selectedDate = nodeId.split('-');\r\n                selectedYear = selectedDate[0];\r\n                selectedMonth = selectedDate[1];\r\n                if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                    if (keyword === \"\") {\r\n                        return 1;\r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n                if (String(nodeId).length >= 8) {\r\n                    selectedDay = nodeId.split('-')[2];\r\n                    if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                        if (keyword === \"\") {\r\n                            return 1;\r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n\r\n        setVideoInfos(data);\r\n\r\n        const total = Math.ceil(data.length / itemsPerPage);\r\n        setTotalPages(total);\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleNodeSelect = (event, nodeId, keyword) => {\r\n        if (keyword === \"\") {\r\n            document.getElementById('input-with-icon-textfield').value = '';\r\n        }\r\n        {\r\n            setSelected(nodeId);        // e.g. 2020-3-5\r\n            localStorage.setItem(\"selected\", nodeId);\r\n            setExpand();\r\n            let data = videoData.filter(item => {\r\n                let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\r\n\r\n                let selectedYear = '';\r\n                let selectedMonth = '';\r\n                let selectedDay = '';\r\n\r\n                let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\r\n                fileName = fileName.trim().toLowerCase();\r\n\r\n                if (nodeId === 'root') {\r\n                    if (keyword === \"\") {\r\n                        return 1;\r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let selectedDate = '';\r\n                if (String(nodeId).length === 4) {\r\n                    selectedYear = String(nodeId);\r\n                    if (selectedYear === year) {\r\n                        if (keyword === \"\") {\r\n                            return 1;\r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (String(nodeId).length >= 6) {\r\n                    selectedDate = nodeId.split('-');\r\n                    selectedYear = selectedDate[0];\r\n                    selectedMonth = selectedDate[1];\r\n                    if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                        if (keyword === \"\") {\r\n                            return 1;\r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (String(nodeId).length >= 8) {\r\n                        selectedDay = nodeId.split('-')[2];\r\n                        if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                            if (keyword === \"\") {\r\n                                return 1;\r\n                            } else {\r\n                                if (fileName.includes(keyword)) {\r\n                                    return 1;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n                return 0;\r\n            });\r\n\r\n            setVideoInfos(data);\r\n\r\n            const total = Math.ceil(data.length / itemsPerPage);\r\n            setTotalPages(total);\r\n        }\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleOnKeyDown = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            setVideoUrl(e.target.value);\r\n            upload();\r\n        }\r\n    }\r\n\r\n    // Remove one video item\r\n    const handleRemoveItem = (id) => {\r\n        VideoService.removeVideo(id)\r\n            .then(response => {\r\n                if (response.data.message === \"success\") {\r\n                    let arr = [...videoInfos];\r\n                    arr = arr.filter(item => item.id !== id);\r\n                    setVideoInfos(arr);\r\n                }\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                setMessage(resMessage);\r\n            });\r\n    }\r\n\r\n    function meta_restriction_age_str(meta) {\r\n        if (!meta)\r\n            return \"\";\r\n        return \" [\" + meta + \"]\";\r\n    }\r\n\r\n    // Play one video\r\n    const handlePlayVideo = (video_url, meta_title, videoId, meta_restriction_age, meta_description) => {\r\n        //setMyPlayingStatus(true);\r\n        setModalShow(true);\r\n        setPlayUrl(video_url);\r\n        setMetaTitle(meta_title);\r\n        setMetaDescription(meta_description);\r\n        setVideoId(videoId);\r\n    }\r\n\r\n    const onNextVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index >= videoData.length - 1) {\r\n            return;\r\n        }\r\n        const nextUrl = videoData[index + 1].video_id;\r\n        setVideoId(videoData[index + 1].id);\r\n        setPlayUrl(nextUrl);\r\n        setMetaTitle(videoData[index + 1].meta_title + meta_restriction_age_str(videoData[index + 1].meta_restriction_age))\r\n        setMetaDescription(videoData[index + 1].meta_description)\r\n        setCurrentVideoNumber(getCurrentVideoNumber() + 1)\r\n    }\r\n\r\n    const onPreviousVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index <= 0) {\r\n            return;\r\n        }\r\n        const prevUrl = videoData[index - 1].video_id;\r\n        setVideoId(videoData[index - 1].id);\r\n        setPlayUrl(prevUrl);\r\n        setMetaTitle(videoData[index - 1].meta_title + meta_restriction_age_str(videoData[index - 1].meta_restriction_age))\r\n        setMetaDescription(videoData[index - 1].meta_description)\r\n        setCurrentVideoNumber(getCurrentVideoNumber() - 1)\r\n    }\r\n\r\n    function beep() {\r\n        var snd = new Audio(\"data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");\r\n        snd.play();\r\n    }\r\n\r\n    const onOpenSourceUrl = () => {\r\n        //beep();\r\n        //Pause curent video before launching a new one\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        const nextUrl = videoData[index].video_id;\r\n        window.open(nextUrl, '_blank');\r\n    }\r\n\r\n    const getCurrentVideoNumber = () => {\r\n        return videoData.findIndex(item => item.id == videoId) + 1\r\n    }\r\n\r\n    const itemClick = (video_id, videoId) => {\r\n        setPlayUrl(video_id);\r\n        setVideoId(videoId);\r\n        setMetaTitle(videoData.find(item => item.id == videoId).meta_title);\r\n        setMetaDescription(videoData.find(item => item.id == videoId).meta_description);\r\n    }\r\n\r\n    // playlist\r\n    const handlePlaylist = (e, video_id) => {\r\n        const playlist_title = e.target.value;\r\n        let playlist_id = '';\r\n\r\n        if (playlist_title != '') {\r\n            const selectedPlaylist = playlists.find(item => item.playlist_title == playlist_title);\r\n            playlist_id = selectedPlaylist.playlist_id;\r\n        }\r\n\r\n        VideoService.changeVideoGroup(video_id, playlist_id)\r\n    }\r\n\r\n    // edit save\r\n    const onSave = () => {\r\n        setEditShow(false);\r\n        VideoService.setManualInfo(videoId, manualTitle, manualDescription);\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        videoData[index].manual_title = manualTitle;\r\n        videoData[index].manual_description = manualDescription;\r\n    }\r\n\r\n    const setVideoType = (video_id, type) => {\r\n        let arr = videoInfos;\r\n        arr.map((item, index) => {\r\n            item.id == video_id && (arr[index].type = type);\r\n        });\r\n        setVideoInfos(arr);\r\n\r\n        VideoService.setVideoType(video_id, type);\r\n    }\r\n\r\n    const savePlaylist = (id, value) => {\r\n        VideoService.addPlaylistIds(id, value)\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderTree = (nodes) => {\r\n        return (\r\n            <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\r\n                {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n            </TreeItem>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"mb-3\">\r\n                <Col md={12}>\r\n                    <TextField\r\n                        className={classes.linkInput}\r\n                        id=\"input-with-icon-textfield-top\"\r\n                        placeholder=\"Paste your youtube video link.\"\r\n                        value={videoUrl}\r\n                        onChange={(e) => setVideoUrl(e.target.value)}\r\n                        onKeyDown={(e) => handleOnKeyDown(e)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <InputIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Button size=\"sm\" style={{ width: \"100px\" }} disabled={videoUrl === ''} onClick={upload}>\r\n                        Upload\r\n                    </Button>\r\n                    {progressVisible && (\r\n                        <div className={classes.linerProgress}>\r\n                            <LinearProgress />\r\n                        </div>\r\n                    )}\r\n                    {message && (\r\n                        <Alert variant=\"success\" className=\"mt-3 upload_alert\" show={alertVisible}>\r\n                            <Alert.Heading>Upload Result</Alert.Heading>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col md={3} className=\"card\">\r\n                    <TreeView\r\n                        className={classes.root}\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        defaultExpandIcon={<ChevronRightIcon />}\r\n                        expanded={expanded}\r\n                        onNodeSelect={(even, nodeIds) => handleNodeSelect(even, nodeIds, \"\")}\r\n                    >\r\n                        {treeData && renderTree(treeData)}\r\n                    </TreeView>\r\n                </Col>\r\n                <Col md={9}>\r\n                    {videoInfos &&\r\n                        <VideoList\r\n                            videoInfos={videoInfos}\r\n                            totalPages={totalPages}\r\n                            itemsPerPage={itemsPerPage}\r\n                            currentPage={pageNumber}\r\n                            playlists={playlists}\r\n                            savePlaylist={savePlaylist}\r\n                            onChangeKeyword={handleChangeKeyword}\r\n                            onChangePageNumber={handleChangePageNumber}\r\n                            handleRemoveItem={handleRemoveItem}\r\n                            handlePlayVideo={handlePlayVideo}\r\n                            onChangePlaylist={handlePlaylist}\r\n                            setEditShow={setEditShow}\r\n                            setManualTitle={setManualTitle}\r\n                            setManualDescription={setManualDescription}\r\n                            setVideoId={setVideoId}\r\n                            setVideoType={setVideoType}\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <VideoPlayer\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                playUrl={playUrl}\r\n                metaTitle={metaTitle}\r\n                metaDescription={metaDescription}\r\n                videoData={videoData}\r\n                videoId={videoId}\r\n                onPreviousVideo={onPreviousVideo}\r\n                onNextVideo={onNextVideo}\r\n                onOpenSourceUrl={onOpenSourceUrl}\r\n                currentVideoNumber={currentVideoNumber}\r\n                itemClick={itemClick}\r\n                //myPlayingStatus={true}\r\n            />\r\n            <EditDialog\r\n                show={editShow}\r\n                onHide={() => setEditShow(false)}\r\n                manualTitle={manualTitle}\r\n                manualDescription={manualDescription}\r\n                setManualTitle={setManualTitle}\r\n                setManualDescription={setManualDescription}\r\n                onSave={onSave}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst VideoList = (props) => {\r\n    const classes = useStyles();\r\n\r\n    let playlists = [];\r\n    props.playlists.map(item=>{\r\n        playlists.push({id: item.id, name: item.playlist_title});\r\n    });\r\n\r\n    const user = authService.getCurrentUser();\r\n    const isAdmin = user && user.roles.includes(\"ROLE_ADMIN\") || false\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                <Image thumbnail src={data.meta_image} className=\"mr-3\" style={{ cursor: 'pointer' }} onClick={() => props.handlePlayVideo(data.video_id, data.manual_title || data.meta_title, data.id, data.meta_restriction_age, data.manual_description || data.meta_description)} />\r\n                <Media.Body>\r\n                    <h5><span style={{ color: 'green' }}>{data.manual_title && data.manual_title}</span></h5>\r\n                    <h5><span>{data.meta_title}</span></h5>\r\n                    <p style={{ marginBottom: \"0px\" }}><span>ID : </span><code>{getVideoId(data.video_id)}</code></p>\r\n                    <p style={{ marginBottom: \"2px\" }}><span style={{ color: 'green' }}>{data.manual_description && data.manual_description}</span></p>\r\n                    <p style={{ marginBottom: \"2px\" }}><span>{data.meta_description}</span></p>\r\n                    {data.meta_keyword && (\r\n                        <p><small><span>Keywords : </span><span>{data.meta_keyword}</span></small></p>\r\n                    )}\r\n                    <p><small><i><span>Created Time : </span><span>{data.dateTime}</span></i></small></p>\r\n\r\n                    <Row>\r\n                        <Col className=\"align-self-end pb-4\">\r\n                            <Button variant=\"success\" size=\"sm\" className=\"mr-2\"\r\n                            \tonClick={() => props.handlePlayVideo(data.video_id, data.manual_title ||\r\n                            \t\tdata.meta_title, data.id, data.meta_restriction_age,\r\n                            \t\tdata.manual_description || data.meta_description)}>Play</Button>\r\n                            <Button variant=\"info\" size=\"sm\" className=\"mr-2\"\r\n                                onClick={() => {\r\n                                    props.setManualTitle( data.manual_title ? data.manual_title : data.meta_title);\r\n                                    props.setManualDescription(\r\n\t\t\t\t\t\t\t\t\t\tdata.manual_description ? data.manual_description : data.meta_description);\r\n                                    props.setEditShow( true);\r\n                                    props.setVideoId(  data.id);\r\n                                }}\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                            <Button variant=\"danger\" size=\"sm\" onClick={() => props.handleRemoveItem(data.id)}>Remove</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            {props.playlists.length > 0 &&\r\n                                <SelectOptions\r\n                                    label='Playlists'\r\n                                    id={data.id}\r\n                                    value={data.arr}\r\n                                    items={playlists}\r\n                                    onSave={props.savePlaylist}\r\n                                    multiple={true}\r\n                                />\r\n                            }\r\n                            { isAdmin &&\r\n                                <SelectOptions\r\n                                    label='Type'\r\n                                    id={data.id}\r\n                                    value={data.type}\r\n                                    items={[\r\n                                        {id: 'free', name: 'Free'},\r\n                                        {id: 'pro', name: 'Pro'}\r\n                                        ]}\r\n                                    onSave={props.setVideoType}\r\n                                    multiple={false}\r\n                                />\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    const showPagenationItem = () => {\r\n        return (\r\n            <Pagination\r\n                color=\"primary\"\r\n                className=\"mt-3\"\r\n                shape=\"rounded\"\r\n                count={props.totalPages}\r\n                page={props.currentPage}\r\n                onChange={(event, val) => props.onChangePageNumber(val)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            props.onChangeKeyword(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <TextField\r\n                    className={classes.margin}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search\"\r\n                    onKeyDown={doSomethingWith}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <SearchIcon />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <h3 className=\"card-header\">List of Videos</h3>\r\n                <ListGroup variant=\"flush\">\r\n                    {props.videoInfos\r\n                        && props.videoInfos.map((video, index) => {\r\n                            if ((props.currentPage - 1) * props.itemsPerPage <= index && (props.currentPage) * props.itemsPerPage > index) {\r\n                                return renderItem(video)\r\n                            } else {\r\n                                return null\r\n                            }\r\n                        })}\r\n                </ListGroup>\r\n                {showPagenationItem()}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default VideoUpload","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\TokenManagement.js",["257","258","259","260","261","262","263","264"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge\r\n} from 'react-bootstrap';\r\n\r\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\r\nimport UserService from '../../../services/user.service';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function TokenManagement() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [data, setData] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\r\n  const [searchString, setSearchString] = useState('');\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) {\r\n        UserService.getPrepaidTokens()\r\n            .then(async response => {\r\n                if(response.data && response.data.length > 0) {\r\n                    setData(response.data);\r\n                    setRows(response.data);\r\n                }\r\n            })\r\n\r\n        setIsLoaded(true)\r\n    }\r\n  })\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // playlistId\r\n  const handleDelete = (id) => {\r\n    UserService.deletePrepaidToken(id)\r\n      .then(response => {\r\n          if (response.data === \"success\") {\r\n              window.location.reload();\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n  }\r\n\r\n  // custom\r\n  const handleInsertPlaylist = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      addPlaylist();\r\n    }\r\n  }\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      let arr = [...data];\r\n      arr = arr.filter(item => (item.code).includes(e.target.value.trim().toLowerCase()));\r\n      setRows(arr);\r\n    }\r\n  }\r\n\r\n  const handleAddPlaylist = () => {\r\n    addPlaylist();\r\n  }\r\n\r\n  function addPlaylist() {\r\n      \r\n    if (newPlaylistUrl.trim() == '') {\r\n        return;\r\n    }\r\n    \r\n    let newTokenCount = Number(newPlaylistUrl.trim());\r\n    if (isNaN(newTokenCount) || newTokenCount <= 0) {\r\n        return;\r\n    }\r\n    \r\n    UserService.addPrepaidToken(newTokenCount)\r\n      .then(response => {\r\n          if (response.data === \"success\") {\r\n              window.location.reload();\r\n          }\r\n          if (response.data.message === \"cannotregister\") {\r\n              setErrorText('The playlist is already registered.');\r\n              setTimeout(() => {\r\n                setErrorText('');\r\n              }, 2000);\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n\r\n    document.getElementById('input-with-icon-textfield').value = '';\r\n    setNewPlaylistUrl('');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {errorText &&\r\n          <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\r\n      }\r\n      <Row  className='mt-5'>\r\n        <Col md={5}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Insert token count\"\r\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\r\n            onKeyDown={handleInsertPlaylist}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <CreateIcon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={4}>\r\n          <Button size='sm' onClick={handleAddPlaylist}>\r\n            Add New Token Code\r\n          </Button>\r\n        </Col>\r\n        <Col md={3}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Search token code\"\r\n            onChange={(e) => setSearchString(e.target.value)}\r\n            onKeyDown={handleSearch}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      \r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\">No</TableCell>\r\n              <TableCell align=\"center\">Token Code</TableCell>\r\n              <TableCell align=\"center\">Token Count</TableCell>\r\n              <TableCell align=\"center\">Token Status</TableCell>\r\n              <TableCell align=\"center\">Used Date</TableCell>\r\n              <TableCell align=\"center\">Operate</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(rowsPerPage > 0\r\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              : rows\r\n            ).map((row, index) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell style={{ width: 100 }} component=\"th\" scope=\"row\" align=\"center\">\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell style={{ width: 250 }} align=\"center\">\r\n                  {row.code}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.nr_tokens}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <Badge pill variant={row.used == 1 ? 'warning' : 'success'}>{row.used == '1' ? 'Used' : 'Unused'}</Badge>\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  { row.used == 1 &&\r\n                      row.updatedAt\r\n                  }\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  { row.used == 0 && \r\n                    <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)}>Delete</Button>\r\n                  }\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ height: 53 * emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                colSpan={7}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\Playlist.js",["265","266","267","268","269","270","271","272"],"/* eslint-disable import/no-anonymous-default-export */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable eqeqeq */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputIcon from '@material-ui/icons/Create';\r\nimport InsertLink from '@material-ui/icons/InsertLink';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\r\nimport GlobalData from '../../../tools/GlobalData';\r\nimport SelectOptions from '../../Common/SelectOptions';\r\nimport VideoPlayer from '../Video/VideoPlayer';\r\nimport EditDialog from '../Video/EditDialog';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nimport VideoService from '../../../services/video.service';\r\nimport PlaylistService from '../../../services/playlist.service';\r\nimport { LinearProgress, Paper } from '@material-ui/core';\r\nimport { Fragment } from 'react';\r\n\r\nimport authService from '../../../services/auth.service';\r\n\r\nconst front_end_server = GlobalData.front_end_server_ip + \":\" + GlobalData.front_end_server_port;\r\n//const ba-ck_end_server = GlobalData.ba-ck_end_server_ip + \":3000\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst getVideoId = (url) => {\r\n    return url.split(\"?v=\")[1];\r\n}\r\n\r\nconst SettingDialog = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.onHide}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Playlist Infomation\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Row className=\"justify-content-end\">\r\n                    <Col md={8}>\r\n                        <TextField\r\n                            className={classes.linkInput}\r\n                            placeholder=\"Input a new playlist name to change.\"\r\n                            value={props.currentPlaylistTitle}\r\n                            onChange={(e) => props.setCurrentPlaylistTitle(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <InputIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <Select className=\"mr-4\"\r\n                            style={{ width: \"100%\" }}\r\n                            value={props.currentPlaylistStatus}\r\n                            onChange={(e) => props.setCurrentPlaylistStatus(e.target.value)}\r\n                        >\r\n                            <MenuItem value={1}>Public</MenuItem>\r\n                            <MenuItem value={0}>Private</MenuItem>\r\n                        </Select>\r\n                    </Col>\r\n\r\n                    <Col md={12}>\r\n                        <Select className=\"mr-4 mt-4\"\r\n                            style={{ width: \"100%\" }}\r\n                            value={props.currentPlaylistThumbVideo}\r\n                            onChange={(e) => props.setCurrentPlaylistThumbVideo(e.target.value)}\r\n                        >\r\n                            <MenuItem value=\"0\" disabled> Choose a video for thumbnail </MenuItem>\r\n                            { props.videoInfos.map((item, index) => {\r\n                                return (\r\n                                    <MenuItem key={index} value={item.id}> { item.manual_title || item.meta_title } </MenuItem>\r\n                                )}\r\n                            )}\r\n                        </Select>\r\n                    </Col>\r\n                    \r\n                    {props.isAdmin &&\r\n                        <Col md={6}>\r\n                            <Select\r\n                                className=\"mr-4 mt-4\"\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={props.currentPlaylistType}\r\n                                onChange={(e) => props.setCurrentPlaylistType(e.target.value)}\r\n                                fullWidth\r\n                            >\r\n                                <MenuItem value='standard'>Standard</MenuItem>\r\n                                <MenuItem value='marketing'>Marketing</MenuItem>\r\n                            </Select>\r\n                        </Col>\r\n                    }\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"success\" onClick={props.onSave}>Save</Button>\r\n                <Button variant=\"danger\" onClick={props.onDelete}>Delete</Button>\r\n                <Button variant=\"primary\" onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default () => {\r\n    const [message, setMessage] = React.useState(\"\");\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('playlistpage') ? Number(localStorage.getItem('playlistpage')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [treeData, setTreeData] = useState('');\r\n    const [selected, setSelected] = useState('root');\r\n    const [alertVisible, setAlertVisible] = useState(false);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [progressVisible, setProgressVisible] = useState(false);\r\n    const [videoData, setVideoData] = useState([]);\r\n    const [videoInfos, setVideoInfos] = useState([]);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [settingShow, setSettingShow] = useState(false);\r\n    const [playUrl, setPlayUrl] = useState(null);\r\n    const [metaTitle, setMetaTitle] = useState(null);\r\n    const [metaDescription, setMetaDescription] = useState(null);\r\n    const [playlistTitle, setPlaylistTitle] = useState('');\r\n    const [playlistStatus, setPlaylistStatus] = useState(1);\r\n    const [currentPlaylistId, setCurrentPlaylistId] = useState('');\r\n    const [playlistData, setPlaylistData] = useState([]);\r\n    const [currentPlaylistTitle, setCurrentPlaylistTitle] = useState('');\r\n    const [currentPlaylistStatus, setCurrentPlaylistStatus] = useState('');\r\n    const [currentPlaylistThumbVideo, setCurrentPlaylistThumbVideo] = useState(0);\r\n    const [currentPlaylistType, setCurrentPlaylistType] = useState(0);\r\n    \r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [videoId, setVideoId] = useState(null);\r\n    // const [playlistId, setPlaylistId] = useState(null);\r\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\r\n    const [editShow, setEditShow] = useState(false);\r\n    const [manualTitle, setManualTitle] = useState(undefined);\r\n    const [manualDescription, setManualDescription] = useState(undefined);\r\n\r\n    const user = authService.getCurrentUser();\r\n    const isAdmin = user && user.roles.includes(\"ROLE_ADMIN\") || false\r\n\r\n    React.useEffect(() => {\r\n        getAllPlaylists();\r\n    }, [])\r\n\r\n    const getAllPlaylists = () => {\r\n        PlaylistService.getAllPlaylist()\r\n            .then(async response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    setPlaylistData(response.data);\r\n                    setPlaylists(response.data);\r\n                    handleItemClick(response.data[0])\r\n                }\r\n            })\r\n    }\r\n\r\n    // Add playlist\r\n    const upload = () => {\r\n        PlaylistService.addPlaylist(playlistTitle, playlistStatus)\r\n            .then(response => {\r\n                if (response.data.message === 'success') {\r\n                    getAllPlaylists();\r\n                    setPlaylistTitle('');\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum) => {\r\n        setPageNumber(pagenum);\r\n        localStorage.setItem('playlistpage', pagenum)\r\n    }\r\n\r\n    const handleChangeKeyword = (key) => {\r\n        const keyword = key.trim().toLowerCase();\r\n        const nodeId = selected;\r\n        let data = videoData.filter(item => {\r\n            let fileName = item.meta_keyword + item.meta_description + item.meta_title + getVideoId(item.video_id);\r\n            fileName = fileName ? fileName.trim().toLowerCase() : '';\r\n\r\n            if (fileName.includes(keyword)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        if (keyword == \"\") {\r\n            setVideoInfos(videoData);\r\n        } else {\r\n            setVideoInfos(data);\r\n        }\r\n\r\n        const total = Math.ceil(data.length / itemsPerPage);\r\n        setTotalPages(total);\r\n\r\n        localStorage.removeItem(\"playlistpage\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleOnKeyDown = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            setPlaylistTitle(e.target.value);\r\n            upload();\r\n        }\r\n    }\r\n\r\n    // Remove one video item\r\n    const handleRemoveItem = (id) => {\r\n        VideoService.removeVideo(id)\r\n            .then(response => {\r\n                if (response.data.message === \"success\") {\r\n                    let arr = [...videoInfos];\r\n                    arr = arr.filter(item => item.id !== id);\r\n                    setVideoInfos(arr);\r\n                }\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                setMessage(resMessage);\r\n            });\r\n    }\r\n\r\n    // Play one video\r\n    const handlePlayVideo = (video_url, meta_title, meta_description, video_id) => {\r\n        setModalShow(true);\r\n        setPlayUrl(video_url);\r\n        setMetaTitle(meta_title);\r\n        setMetaDescription(meta_description);\r\n        setVideoId(video_id);\r\n    }\r\n\r\n    // playlist\r\n    const handlePlaylist = (e, video_id) => {\r\n        const playlist_title = e.target.value;\r\n        let playlist_id = '';\r\n\r\n        if (playlist_title != '') {\r\n            const selectedPlaylist = playlists.find(item => item.playlist_title == playlist_title);\r\n            playlist_id = selectedPlaylist.playlist_id;\r\n        }\r\n\r\n        VideoService.changeVideoGroup(video_id, playlist_id);\r\n        window.location.reload();\r\n    }\r\n\r\n    const handleItemClick = (item ) => {\r\n        setCurrentPlaylistId(item.playlist_id);\r\n        setCurrentPlaylistTitle(item.playlist_title);\r\n        setCurrentPlaylistStatus(item.playlist_status);\r\n        setCurrentPlaylistThumbVideo(item.thumb_video);\r\n        setCurrentPlaylistType(item.type);\r\n\r\n        PlaylistService.getPlaylist(item.playlist_id)\r\n            .then(async response => {\r\n                if (response.data && response.data.length > 0) {\r\n\r\n                    const res = response.data;\r\n\r\n                    for (const key in res) {\r\n                        const videoId = res[key].id;\r\n                        const result = await VideoService.getPlaylistIds(videoId);\r\n                        res[key].arr = result.data.playlists;\r\n                    }\r\n\r\n                    setVideoData(res)\r\n\r\n                    // setVideoData(response.data);\r\n                    setVideoInfos(response.data);\r\n\r\n                    const total = Math.ceil(response.data.length / itemsPerPage);\r\n                    setTotalPages(total);\r\n                } else {\r\n                    setVideoInfos([]);\r\n                }\r\n            })\r\n    }\r\n\r\n    // delete\r\n    const handleSettingShow = () => {\r\n        setSettingShow(false)\r\n\r\n        PlaylistService.removePlaylist(currentPlaylistId)\r\n            .then(response => {\r\n                if (response.data.message === 'success') {\r\n                    getAllPlaylists();\r\n                    setCurrentPlaylistId('');\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    // change\r\n    const handleSettingSave = () => {\r\n        setSettingShow(false)\r\n        PlaylistService.changePlaylist(currentPlaylistId, currentPlaylistTitle, currentPlaylistStatus, currentPlaylistThumbVideo, currentPlaylistType)\r\n            .then(response => {\r\n                if (response.data.message === 'success') {\r\n                    getAllPlaylists();\r\n                    setCurrentPlaylistId('');\r\n                    setCurrentPlaylistTitle('');\r\n                    setCurrentPlaylistStatus('');\r\n                    setCurrentPlaylistThumbVideo(0);\r\n                }\r\n            })\r\n    }\r\n\r\n    function meta_restriction_age_str(meta) {\r\n        if (!meta)\r\n            return \"\";\r\n        return \" [\" + meta + \"]\";\r\n    }\r\n\r\n    const onNextVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index >= videoData.length - 1) {\r\n            return;\r\n        }\r\n        const nextUrl = videoData[index + 1].video_id;\r\n        setVideoId(videoData[index + 1].id);\r\n        setPlayUrl(nextUrl);\r\n        setMetaTitle(videoData[index + 1].meta_title + meta_restriction_age_str(videoData[index + 1].meta_restriction_age))\r\n        setMetaDescription(videoData[index + 1].meta_description)\r\n        setCurrentVideoNumber(getCurrentVideoNumber() + 1)\r\n    }\r\n\r\n    const onPreviousVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index <= 0) {\r\n            return;\r\n        }\r\n        const prevUrl = videoData[index - 1].video_id;\r\n        setVideoId(videoData[index - 1].id);\r\n        setPlayUrl(prevUrl);\r\n        setMetaTitle(videoData[index - 1].meta_title + meta_restriction_age_str(videoData[index - 1].meta_restriction_age))\r\n        setMetaDescription(videoData[index - 1].meta_description)\r\n        setCurrentVideoNumber(getCurrentVideoNumber() - 1)\r\n    }\r\n\r\n    const onOpenSourceUrl = () => {\r\n        //beep();\r\n        //Pause curent video before launching a new one\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        const nextUrl = videoData[index].video_id;\r\n        window.open(nextUrl, '_blank');\r\n    }\r\n\r\n    const getCurrentVideoNumber = () => {\r\n        return videoData.findIndex(item => item.id == videoId) + 1\r\n    }\r\n\r\n    const itemClick = (video_id, videoId) => {\r\n        setPlayUrl(video_id);\r\n        setVideoId(videoId);\r\n        setMetaTitle(videoData.find(item => item.id == videoId).meta_title);\r\n        setMetaDescription(videoData.find(item => item.id == videoId).meta_description);\r\n    }\r\n\r\n\r\n    // edit save\r\n    const onSave = () => {\r\n        setEditShow(false);\r\n        VideoService.setManualInfo(videoId, manualTitle, manualDescription);\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        videoData[index].manual_title = manualTitle;\r\n        videoData[index].manual_description = manualDescription;\r\n    }\r\n\r\n    const setVideoType = (video_id, type) => {\r\n        let arr = videoInfos;\r\n        arr.map((item, index) => {\r\n            item.id == video_id && (arr[index].type = type);\r\n        });\r\n        setVideoInfos(arr);\r\n\r\n        VideoService.setVideoType(video_id, type);\r\n    }\r\n\r\n    const savePlaylist = (id, value) => {\r\n        VideoService.addPlaylistIds(id, value)\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderTree = (nodes) => {\r\n        return (\r\n            <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\r\n                {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n            </TreeItem>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2 className=\"mb-3\">My Playlists</h2>\r\n            <Row className=\"mb-3\">\r\n                <Col md={4}>\r\n                    <TextField\r\n                        className={classes.linkInput}\r\n                        id=\"input-with-icon-textfield-top\"\r\n                        placeholder=\"Input new playlist title.\"\r\n                        value={playlistTitle}\r\n                        onChange={(e) => setPlaylistTitle(e.target.value)}\r\n                        onKeyDown={(e) => handleOnKeyDown(e)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <InputIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Col>\r\n                <Col md={8}>\r\n                    <Select className=\"mr-4\"\r\n                        style={{ width: \"100px\" }}\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={playlistStatus}\r\n                        onChange={(e) => setPlaylistStatus(e.target.value)}\r\n                    >\r\n                        <MenuItem value={1}>Public</MenuItem>\r\n                        <MenuItem value={0}>Private</MenuItem>\r\n                    </Select>\r\n\r\n                    <Button disabled={playlistTitle === ''} onClick={upload}>\r\n                        Add Playlist\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={12}>\r\n                    {progressVisible && (\r\n                        <div className={classes.linerProgress}>\r\n                            <LinearProgress />\r\n                        </div>\r\n                    )}\r\n                    {message && (\r\n                        <Alert variant=\"success\" className=\"mt-3 upload_alert\" show={alertVisible}>\r\n                            <Alert.Heading>Add Result</Alert.Heading>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={3} className=\"card\">\r\n                    <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n\r\n                        {playlistData && (\r\n                            playlistData.map(item => {\r\n                                return (\r\n                                    <ListItem button key={item.id}\r\n                                        selected={currentPlaylistId == item.playlist_id}\r\n                                        onClick={() => handleItemClick(item)}\r\n                                    >\r\n                                        <ListItemAvatar>\r\n                                            <Avatar>\r\n                                                {item.thumb_image && <Image roundedCircle src={ item.thumb_image } style={{ objectFit: 'cover', width: 40, height: 40 }} /> || <VideoLibraryIcon/> }\r\n                                            </Avatar>\r\n                                        </ListItemAvatar>\r\n                                        <ListItemText primary={item.playlist_title} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <IconButton edge=\"end\" aria-label=\"delete\" disabled={currentPlaylistId !== item.playlist_id} onClick={() => setSettingShow(true)}>\r\n                                                <SettingsIcon />\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                )\r\n                            })\r\n                        )}\r\n\r\n                    </List>\r\n                </Col>\r\n                <Col md={9}>\r\n                    {videoInfos &&\r\n                        <VideoList\r\n                            videoInfos={videoInfos}\r\n                            totalPages={totalPages}\r\n                            itemsPerPage={itemsPerPage}\r\n                            currentPage={pageNumber}\r\n                            playlists={playlists}\r\n                            currentPlaylistId={currentPlaylistId}\r\n                            onChangeKeyword={handleChangeKeyword}\r\n                            onChangePageNumber={handleChangePageNumber}\r\n                            handleRemoveItem={handleRemoveItem}\r\n                            handlePlayVideo={handlePlayVideo}\r\n                            onChangePlaylist={handlePlaylist}\r\n                            setEditShow={setEditShow}\r\n                            setManualTitle={setManualTitle}\r\n                            setManualDescription={setManualDescription}\r\n                            setVideoId={setVideoId}\r\n                            savePlaylist={savePlaylist}\r\n                            setVideoType={setVideoType}\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <VideoPlayer\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                playUrl={playUrl}\r\n                metaTitle={metaTitle}\r\n                metaDescription={metaDescription}\r\n                videoData={videoData}\r\n                videoId={videoId}\r\n                onPreviousVideo={onPreviousVideo}\r\n                onNextVideo={onNextVideo}\r\n                onOpenSourceUrl={onOpenSourceUrl}\r\n                currentVideoNumber={currentVideoNumber}\r\n                itemClick={itemClick}\r\n            />\r\n            <SettingDialog\r\n                show={settingShow}\r\n                onHide={() => setSettingShow(false)}\r\n                onDelete={handleSettingShow}\r\n                onSave={handleSettingSave}\r\n                setCurrentPlaylistTitle={setCurrentPlaylistTitle}\r\n                currentPlaylistTitle={currentPlaylistTitle}\r\n                currentPlaylistStatus={currentPlaylistStatus}\r\n                setCurrentPlaylistStatus={setCurrentPlaylistStatus}\r\n                setCurrentPlaylistThumbVideo={setCurrentPlaylistThumbVideo}\r\n                currentPlaylistThumbVideo={currentPlaylistThumbVideo}\r\n                setCurrentPlaylistType={setCurrentPlaylistType}\r\n                currentPlaylistType={currentPlaylistType}\r\n                videoInfos={videoInfos}\r\n                isAdmin={isAdmin}\r\n            />\r\n            <EditDialog\r\n                show={editShow}\r\n                onHide={() => setEditShow(false)}\r\n                manualTitle={manualTitle}\r\n                manualDescription={manualDescription}\r\n                setManualTitle={setManualTitle}\r\n                setManualDescription={setManualDescription}\r\n                onSave={onSave}\r\n            />\r\n        </Fragment>\r\n    );\r\n}\r\n\r\n\r\nconst VideoList = (props) => {\r\n    const classes = useStyles();\r\n\r\n    let playlists = [];\r\n    props.playlists.map(item=>{\r\n        playlists.push({id: item.id, name: item.playlist_title});\r\n    });\r\n    \r\n    const user = authService.getCurrentUser();\r\n    const isAdmin = user && user.roles.includes(\"ROLE_ADMIN\") || false\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                <Image thumbnail src={data.meta_image} className=\"mr-3\" style={{ cursor: 'pointer' }} onClick={() => props.handlePlayVideo(data.video_id, data.manual_title || data.meta_title, data.manual_description || data.meta_description, data.id)} />\r\n                <Media.Body>\r\n                    <h5><span style={{ color: 'green' }}>{data.manual_title && data.manual_title}</span></h5>\r\n                    <h5><span>{data.meta_title}</span></h5>\r\n                    <p style={{ marginBottom: \"0px\" }}><span>ID : </span><code>{getVideoId(data.video_id)}</code></p>\r\n                    <p style={{ marginBottom: \"2px\" }}><span style={{ color: 'green' }}>{data.manual_description && data.manual_description}</span></p>\r\n                    <p style={{ marginBottom: \"2px\" }}><span>{data.meta_description}</span></p>\r\n                    {data.meta_keyword && (\r\n                        <p><small><span>Keywords : </span><span>{data.meta_keyword}</span></small></p>\r\n                    )}\r\n                    <p><small><i><span>Created Time : </span><span>{data.dateTime}</span></i></small></p>\r\n\r\n                    <Row>\r\n                        <Col className=\"align-self-end pb-4\">\r\n                            <Button variant=\"success\" size=\"sm\" className=\"mr-2\" onClick={() => props.handlePlayVideo(data.video_id, data.manual_title || data.meta_title, data.manual_description || data.meta_description, data.id)}>Play</Button>\r\n                            <Button variant=\"info\" size=\"sm\" className=\"mr-2\"\r\n                                onClick={() => {\r\n                                    props.setManualTitle(data.manual_title ? data.manual_title : data.meta_title);\r\n                                    props.setManualDescription(data.manual_description ? data.manual_description : data.meta_description);\r\n                                    props.setEditShow(true);\r\n                                    props.setVideoId(data.id);\r\n                                }}\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                            <Button variant=\"danger\" size=\"sm\" onClick={() => props.handleRemoveItem(data.id)}>Remove</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            {props.playlists.length > 0 &&\r\n                                <SelectOptions\r\n                                    label='Playlists'\r\n                                    id={data.id}\r\n                                    value={data.arr}\r\n                                    items={playlists}\r\n                                    onSave={props.savePlaylist}\r\n                                    multiple={true}\r\n                                />\r\n                            }\r\n                            { isAdmin && \r\n                                <SelectOptions\r\n                                    label='Type'\r\n                                    id={data.id}\r\n                                    value={data.type}\r\n                                    items={[\r\n                                        {id: 'free', name: 'Free'},\r\n                                        {id: 'pro', name: 'Pro'}\r\n                                        ]}\r\n                                    onSave={props.setVideoType}\r\n                                    multiple={false}\r\n                                />\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    const showPagenationItem = () => {\r\n\r\n        return (\r\n            <Pagination\r\n                color=\"primary\"\r\n                className=\"mt-3\"\r\n                shape=\"rounded\"\r\n                count={props.totalPages}\r\n                page={props.currentPage}\r\n                onChange={(event, val) => props.onChangePageNumber(val)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            props.onChangeKeyword(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <Paper style={{ margin: \"5px\" }}>\r\n                    <TextField\r\n                        disabled\r\n                        className={classes.margin}\r\n                        value={props.currentPlaylistId && front_end_server + '/playlist/' + props.currentPlaylistId}\r\n                        style={{ width: \"85%\" }}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <InsertLink />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Button onClick={() => { navigator.clipboard.writeText(front_end_server + '/playlist/' + props.currentPlaylistId) }}>Copy</Button>\r\n                </Paper>\r\n                <TextField\r\n                    className={classes.margin}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search\"\r\n                    onKeyDown={doSomethingWith}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <SearchIcon />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <h3 className=\"card-header\">List of Videos</h3>\r\n                <ListGroup variant=\"flush\">\r\n                    {props.videoInfos\r\n                        && (props.videoInfos.map((video, index) => {\r\n                            if ((props.currentPage - 1) * props.itemsPerPage <= index && (props.currentPage) * props.itemsPerPage > index) {\r\n                                return renderItem(video)\r\n                            } else {\r\n                                return null\r\n                            }\r\n                        }))}\r\n                </ListGroup>\r\n                {showPagenationItem()}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\EditPPT.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\VideoList.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ReceivedPlaylist\\ReceivedPlaylist.js",["273","274","275","276","277","278","279"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InsertLink from '@material-ui/icons/InsertLink';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Image\r\n} from 'react-bootstrap';\r\n\r\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\r\nimport GlobalData from '../../../tools/GlobalData';\r\n\r\nconst front_end_server = GlobalData.front_end_server_ip + \":\" + GlobalData.front_end_server_port;\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [data, setData] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\r\n  const [searchString, setSearchString] = useState('');\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) {\r\n      ReceivedPlaylistService.getAllPlaylist()\r\n        .then(async response => {\r\n          console.log('-->', response.data)\r\n          if (response.data && response.data.length > 0) {\r\n            setData(response.data);\r\n            setRows(response.data);\r\n          }\r\n        })\r\n      setIsLoaded(true)\r\n    }\r\n  })\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // playlistId\r\n  const handleDelete = (id) => {\r\n    ReceivedPlaylistService.removePlaylist(id)\r\n      .then(response => {\r\n        if (response.data.message === \"success\") {\r\n          window.location.reload();\r\n        }\r\n      }).catch((err) => {\r\n        const resMessage = (\r\n          err.response &&\r\n          err.response.data &&\r\n          err.response.data.message\r\n        ) || err.toString();\r\n\r\n        console.log(resMessage);\r\n      });\r\n  }\r\n\r\n  // custom\r\n  const handleInsertPlaylist = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      addPlaylist();\r\n    }\r\n  }\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      let arr = [...data];\r\n      arr = arr.filter(item => (item.playlist_title + item.sender_name).includes(e.target.value.trim().toLowerCase()));\r\n      setRows(arr);\r\n    }\r\n  }\r\n\r\n  const handleAddPlaylist = () => {\r\n    addPlaylist();\r\n  }\r\n\r\n  function addPlaylist() {\r\n    const playlist_id = newPlaylistUrl.split('/playlist/')[1];\r\n    ReceivedPlaylistService.addPlaylist(playlist_id)\r\n      .then(response => {\r\n        if (response.data.message === \"success\") {\r\n          window.location.reload();\r\n        }\r\n        if (response.data.message === \"cannotregister\") {\r\n          setErrorText('The playlist is already registered.');\r\n          setTimeout(() => {\r\n            setErrorText('');\r\n          }, 2000);\r\n        }\r\n      }).catch((err) => {\r\n        const resMessage = (\r\n          err.response &&\r\n          err.response.data &&\r\n          err.response.data.message\r\n        ) || err.toString();\r\n\r\n        console.log(resMessage);\r\n      });\r\n\r\n    document.getElementById('input-with-icon-textfield').value = '';\r\n    setNewPlaylistUrl('');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {errorText &&\r\n        <h5 className=\"alert alert-danger\" style={{ position: 'absolute', bottom: 50, right: 50, padding: 40 }}>{errorText}</h5>\r\n      }\r\n      <Row className='mt-5'>\r\n        <Col md={5}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Paste playlist url.\"\r\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\r\n            onKeyDown={handleInsertPlaylist}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <InsertLink />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={4}>\r\n          <Button size='sm' onClick={handleAddPlaylist}>\r\n            Add Playlist\r\n          </Button>\r\n        </Col>\r\n        <Col md={3}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Search\"\r\n            onChange={(e) => setSearchString(e.target.value)}\r\n            onKeyDown={handleSearch}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>No</TableCell>\r\n              <TableCell align=\"center\">Thumbnail</TableCell>\r\n              <TableCell align=\"center\">Title</TableCell>\r\n              <TableCell align=\"center\">Sender</TableCell>\r\n              <TableCell align=\"center\">Video Count</TableCell>\r\n              <TableCell align=\"center\">Status</TableCell>\r\n              <TableCell align=\"center\">Received Date</TableCell>\r\n              <TableCell align=\"center\">Operate</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(rowsPerPage > 0\r\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              : rows\r\n            ).map((row, index) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <a href={front_end_server + '/playlist/' + row.playlist_id} target=\"_blank\">\r\n                    { row.thumb_image && <Image src={ row.thumb_image } style={{ objectFit: 'cover', width: '100%' }} /> || <VideoLibraryIcon /> }\r\n                  </a>\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <a href={front_end_server + '/playlist/' + row.playlist_id} target=\"_blank\">\r\n                    {row.playlist_title}\r\n                  </a>\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.sender_name}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.video_count}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.playlist_status == '1' ? 'Public' : 'Private'}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.dateTime}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <Button size='sm' style={{ marginRight: 5 }} href={front_end_server + '/playlist/' + row.playlist_id} target='_blank' block>Open</Button>\r\n                  <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)} block>Delete</Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ height: 53 * emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                colSpan={7}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home.js",["280","281","282","283","284","285"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth-header.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\user.service.js",["286"],"import axios from 'axios';\r\nimport authHeader from './auth-header';\r\nimport Auth from \"./auth.service\";\r\n\r\nimport GlobalData from '../tools/GlobalData';\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/user/';\r\n//const API_URL = `http://1-58.69.222.102:3030/api/user/`;\r\n\r\nconst getPublicContent=()=>{\r\n    return axios.get(`${API_URL}all`);\r\n}\r\nconst getUserBoard=()=>{\r\n    return axios.get(`${API_URL}user`, {headers: authHeader()});\r\n}\r\nconst getModeratorBoard=()=>{\r\n    return axios.get(`${API_URL}mod`, {headers:authHeader()});\r\n}\r\nconst getAdminBoard=()=>{\r\n    return axios.get(`${API_URL}admin`, {headers:authHeader()});\r\n}\r\nconst addTokens = (ss) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}add_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\r\n}\r\nconst addTokenCode=(token_code)=>{\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}add_token_code?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_code=${token_code}`);\r\n}\r\nconst getPrepaidTokens = () => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}get_prepaid_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\r\n}\r\nconst addPrepaidToken = (newTokenCount) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.post(`${API_URL}add_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_count=${newTokenCount}`);\r\n}\r\nconst deletePrepaidToken = (id) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.post(`${API_URL}delete_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&id=${id}`);\r\n}\r\nexport default {\r\n    getPublicContent,\r\n    getUserBoard,\r\n    getModeratorBoard,\r\n    getAdminBoard,\r\n    addTokens,\r\n    addTokenCode,\r\n    getPrepaidTokens,\r\n    addPrepaidToken,\r\n    deletePrepaidToken,\r\n};\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\playlist.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\video.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\category.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\VideoPlayer.js",["287"],"import Modal from 'react-bootstrap/Modal';\r\nimport ReactPlayer from 'react-player';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nimport React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport GlobalData from '../../../tools/GlobalData';\r\n\r\nimport {\r\n    Button,\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nvar counterCalls = 0;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: '36ch',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nconst VideoPlayer = (props) => {\r\n    const [playingStatus, setPlayingStatus] = useState(true);\r\n    counterCalls = counterCalls + 1;\r\n    const classes = useStyles();\r\n    const ref = React.createRef();\r\n    var seek_time = 0;\r\n    \r\n    //playingStatus = true;\r\n\r\n    if( props.playUrl ) {\r\n        const idx = props.playUrl.indexOf(\"#t=\")\r\n        seek_time = parseFloat(idx >=0 ? props.playUrl.substring(idx + 3) : 0);\r\n    }\r\n    //if( !playingStatus){\r\n    //\tconsole.log( \"detected playingStatus=\", counterCalls, playingStatus);\r\n\t\t//setPlayingStatus( props.myPlayingStatus);\r\n\t//}\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={ () => {\r\n\t\t\t\tconsole.log( \"onClose active\");\r\n\t\t\t\tsetPlayingStatus(true);\r\n\t\t\t\tprops.onHide();\r\n\t\t\t\t}}\r\n            size=\"xl\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            \r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    {props.metaTitle}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Row>\r\n                    <Col md={9}>\r\n                        <ReactPlayer\r\n                            ref={ ref }\r\n                            url={props.playUrl}\r\n                            width={GlobalData.modal_video_player_width}\r\n                            height={GlobalData.modal_video_player_height}\r\n                            controls={true}\r\n                            playing={playingStatus}\r\n                            onPlay={() => setPlayingStatus(true)}\r\n                            onReady={() => { return seek_time && ref.current.seekTo( seek_time )} }\r\n                        />\r\n                        <p><i>{props.metaDescription}</i></p>\r\n                    </Col>\r\n                    <Col md={3} style={{borderLeft: '1px solid lightgray'}}>\r\n                        <h5 style={{borderBottom: '1px solid lightgray', paddingBottom: 5, display: 'flex', justifyContent: 'center'}}>Video List</h5>\r\n                        <Paper style={{height: 450, overflow: 'auto'}} key={props.metaTitle}>\r\n                        <List className={classes.root}>\r\n\r\n                            {props.videoData.length > 0 &&\r\n                                props.videoData.map((item, index) => {\r\n                                    let title = item.manual_title || item.meta_title;\r\n                                    let description = item.manual_description || item.meta_description;\r\n\r\n                                    return (\r\n                                        <div key={index}>\r\n                                            <ListItem alignItems=\"flex-start\"\r\n                                                button\r\n                                                onClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsetPlayingStatus(true);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tprops.itemClick(item.video_id, item.id)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\r\n                                                selected={props.videoId == item.id}\r\n                                            >\r\n                                                <ListItemAvatar>\r\n                                                    <Avatar alt=\"Remy Sharp\" src={item.meta_image} />\r\n                                                </ListItemAvatar>\r\n                                                <ListItemText\r\n                                                    primary={title && title.length > 20 ? title.substring(0, 20) + '...' : title}\r\n                                                    secondary={\r\n                                                        <React.Fragment>\r\n                                                        <Typography\r\n                                                            component=\"span\"\r\n                                                            variant=\"body2\"\r\n                                                            className={classes.inline}\r\n                                                            color=\"textPrimary\"\r\n                                                        >\r\n                                                        { description && description.length > 40 ? description.substring(0, 40) + '...' : description}\r\n                                                        </Typography>\r\n                                                        </React.Fragment>\r\n                                                    }\r\n                                                />\r\n                                            </ListItem>\r\n                                            <Divider variant=\"inset\" component=\"li\" />\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </List>\r\n                        </Paper>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"danger\" onClick={() => {\r\n                    setPlayingStatus(true);\r\n\t\t\t\t\tprops.onHide();\r\n\t\t\t\t}}>Close</Button>\r\n                <Button variant=\"primary\" onClick={() => {\r\n                    setPlayingStatus(true);\r\n\t\t\t\t\tprops.onPreviousVideo();\r\n\t\t\t\t\t}}>Previous</Button>\r\n                <Button style={{marginRight: '10px'}} variant=\"primary\" onClick={() => {\r\n                    setPlayingStatus(true);\r\n\t\t\t\t\tprops.onNextVideo();\r\n\t\t\t\t\t}}>Next</Button>\r\n                <Button style={{marginRight: '10px'}} variant=\"info\" onClick={() => {\r\n                    setPlayingStatus(false);\r\n                    props.onOpenSourceUrl();\r\n                }}>SB</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default VideoPlayer;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\EditDialog.js",["288","289","290","291"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputIcon from '@material-ui/icons/Create';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst EditDialog = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.onHide}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n          <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                  Edit Title & Description\r\n              </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p><b>Manual title</b></p>\r\n            <TextField\r\n                className={classes.linkInput}\r\n                id=\"input-with-icon-textfield-top\"\r\n                placeholder=\"Input manual title.\"\r\n                value={props.manualTitle}\r\n                onChange={(e) => props.setManualTitle(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <p><b>Manual description</b></p>\r\n            <TextField\r\n                className={classes.linkInput}\r\n                id=\"input-with-icon-textfield-top\"\r\n                placeholder=\"Input manual description.\"\r\n                multiline={true}\r\n                rows={3}\r\n                value={props.manualDescription}\r\n                onChange={(e) => props.setManualDescription(e.target.value)}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"success\" onClick={props.onSave}>Save</Button>\r\n              <Button variant=\"primary\" onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n      </Modal>\r\n  );\r\n}\r\n\r\nexport default EditDialog;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\tools\\GlobalData.js",["292"],"export default {\r\n //dev\r\n  back_end_server_ip: 'http://localhost',\r\n  back_end_server_port: '3030',\r\n  front_end_server_ip: 'http://localhost',\r\n  front_end_server_port: '3000',\r\n\r\n  //production\r\n  //back_end_server_ip: 'https://aic.space',\r\n  //back_end_server_port: '3030',\r\n  //front_end_server_ip: 'https://aic.space',\r\n  //front_end_server_port: '443',\r\n\r\n  //old-back_end_server_ip: 'https://158.69.222.102',\r\n  //old-back_end_server_ip: 'http://127.0.0.1',\r\n\r\n  modal_video_player_width: 'auto',\r\n  modal_video_player_height: '100%'\r\n};\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\received-playlist.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Common\\SelectOptions.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\downloadfile.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\ppt.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\image.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\file-upload.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\execute.service.js",["293"],"import axios from 'axios';\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nimport GlobalData from '../tools/GlobalData';\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/execute_service?';\r\n//const API_URL = `http://1-58.69.222.102:3030/api/execute_service?`;\r\n//const API_URL = `http://local--host:3030/api/execute_service?`;\r\n\r\nconst getWeather = (cityName)=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_weather&user_id=${user.user_id}&user_key=${user.access_key}&city=${cityName}`);\r\n}\r\n\r\nconst getTokenHistory=()=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_tokenHistory&user_id=${user.user_id}`);\r\n}\r\n\r\nconst getDashboard=()=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_dashboard&user_id=${user.user_id}`);\r\n}\r\n\r\nexport default {\r\n    getWeather,\r\n    getTokenHistory,\r\n    getDashboard,\r\n};\r\n",{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":151,"column":56,"nodeType":"300","endLine":151,"endColumn":87},{"ruleId":"301","severity":1,"message":"302","line":133,"column":1,"nodeType":"303","endLine":145,"endColumn":3},{"ruleId":"304","severity":1,"message":"305","line":43,"column":46,"nodeType":"306","messageId":"307","endLine":43,"endColumn":48},{"ruleId":"304","severity":1,"message":"305","line":43,"column":103,"nodeType":"306","messageId":"307","endLine":43,"endColumn":105},{"ruleId":"304","severity":1,"message":"305","line":59,"column":36,"nodeType":"306","messageId":"307","endLine":59,"endColumn":38},{"ruleId":"304","severity":1,"message":"305","line":59,"column":129,"nodeType":"306","messageId":"307","endLine":59,"endColumn":131},{"ruleId":"308","severity":1,"message":"309","line":66,"column":100,"nodeType":"310","messageId":"311","endLine":66,"endColumn":102},{"ruleId":"312","severity":1,"message":"313","line":42,"column":6,"nodeType":"314","endLine":42,"endColumn":8,"suggestions":"315"},{"ruleId":"308","severity":1,"message":"309","line":46,"column":69,"nodeType":"310","messageId":"311","endLine":46,"endColumn":71},{"ruleId":"316","severity":1,"message":"317","line":98,"column":12,"nodeType":"300","endLine":98,"endColumn":79},{"ruleId":"318","severity":1,"message":"319","line":14,"column":12,"nodeType":"320","messageId":"321","endLine":14,"endColumn":20},{"ruleId":"312","severity":1,"message":"322","line":22,"column":8,"nodeType":"314","endLine":22,"endColumn":10,"suggestions":"323"},{"ruleId":"304","severity":1,"message":"305","line":27,"column":38,"nodeType":"306","messageId":"307","endLine":27,"endColumn":40},{"ruleId":"308","severity":1,"message":"309","line":27,"column":101,"nodeType":"310","messageId":"311","endLine":27,"endColumn":103},{"ruleId":"304","severity":1,"message":"305","line":27,"column":107,"nodeType":"306","messageId":"307","endLine":27,"endColumn":109},{"ruleId":"304","severity":1,"message":"305","line":44,"column":36,"nodeType":"306","messageId":"307","endLine":44,"endColumn":38},{"ruleId":"304","severity":1,"message":"305","line":44,"column":129,"nodeType":"306","messageId":"307","endLine":44,"endColumn":131},{"ruleId":"318","severity":1,"message":"324","line":27,"column":3,"nodeType":"320","messageId":"321","endLine":27,"endColumn":8},{"ruleId":"318","severity":1,"message":"325","line":31,"column":8,"nodeType":"320","messageId":"321","endLine":31,"endColumn":19},{"ruleId":"318","severity":1,"message":"326","line":178,"column":12,"nodeType":"320","messageId":"321","endLine":178,"endColumn":24},{"ruleId":"318","severity":1,"message":"327","line":179,"column":23,"nodeType":"320","messageId":"321","endLine":179,"endColumn":35},{"ruleId":"312","severity":1,"message":"328","line":195,"column":5,"nodeType":"320","endLine":195,"endColumn":14,"suggestions":"329"},{"ruleId":"330","severity":1,"message":"331","line":217,"column":44,"nodeType":"332","messageId":"333","endLine":217,"endColumn":46},{"ruleId":"308","severity":1,"message":"309","line":218,"column":39,"nodeType":"310","messageId":"311","endLine":218,"endColumn":41},{"ruleId":"308","severity":1,"message":"309","line":220,"column":50,"nodeType":"310","messageId":"311","endLine":220,"endColumn":52},{"ruleId":"304","severity":1,"message":"305","line":220,"column":55,"nodeType":"306","messageId":"307","endLine":220,"endColumn":57},{"ruleId":"304","severity":1,"message":"305","line":220,"column":85,"nodeType":"306","messageId":"307","endLine":220,"endColumn":87},{"ruleId":"308","severity":1,"message":"309","line":279,"column":63,"nodeType":"310","messageId":"311","endLine":279,"endColumn":65},{"ruleId":"308","severity":1,"message":"309","line":297,"column":39,"nodeType":"310","messageId":"311","endLine":297,"endColumn":41},{"ruleId":"334","severity":1,"message":"335","line":376,"column":57,"nodeType":"300","endLine":376,"endColumn":128},{"ruleId":"318","severity":1,"message":"336","line":157,"column":36,"nodeType":"320","messageId":"321","endLine":157,"endColumn":44},{"ruleId":"312","severity":1,"message":"337","line":202,"column":8,"nodeType":"314","endLine":202,"endColumn":10,"suggestions":"338"},{"ruleId":"330","severity":1,"message":"339","line":597,"column":62,"nodeType":"332","messageId":"340","endLine":597,"endColumn":64},{"ruleId":"318","severity":1,"message":"341","line":20,"column":22,"nodeType":"320","messageId":"321","endLine":20,"endColumn":41},{"ruleId":"318","severity":1,"message":"342","line":23,"column":5,"nodeType":"320","messageId":"321","endLine":23,"endColumn":9},{"ruleId":"312","severity":1,"message":"343","line":165,"column":8,"nodeType":"314","endLine":165,"endColumn":10,"suggestions":"344"},{"ruleId":"318","severity":1,"message":"336","line":201,"column":47,"nodeType":"320","messageId":"321","endLine":201,"endColumn":55},{"ruleId":"308","severity":1,"message":"309","line":471,"column":59,"nodeType":"310","messageId":"311","endLine":471,"endColumn":61},{"ruleId":"308","severity":1,"message":"309","line":484,"column":59,"nodeType":"310","messageId":"311","endLine":484,"endColumn":61},{"ruleId":"318","severity":1,"message":"345","line":496,"column":14,"nodeType":"320","messageId":"321","endLine":496,"endColumn":18},{"ruleId":"308","severity":1,"message":"309","line":504,"column":59,"nodeType":"310","messageId":"311","endLine":504,"endColumn":61},{"ruleId":"308","severity":1,"message":"309","line":510,"column":52,"nodeType":"310","messageId":"311","endLine":510,"endColumn":54},{"ruleId":"308","severity":1,"message":"309","line":516,"column":53,"nodeType":"310","messageId":"311","endLine":516,"endColumn":55},{"ruleId":"308","severity":1,"message":"309","line":517,"column":59,"nodeType":"310","messageId":"311","endLine":517,"endColumn":61},{"ruleId":"308","severity":1,"message":"346","line":525,"column":28,"nodeType":"310","messageId":"311","endLine":525,"endColumn":30},{"ruleId":"308","severity":1,"message":"309","line":526,"column":81,"nodeType":"310","messageId":"311","endLine":526,"endColumn":83},{"ruleId":"308","severity":1,"message":"309","line":537,"column":59,"nodeType":"310","messageId":"311","endLine":537,"endColumn":61},{"ruleId":"330","severity":1,"message":"331","line":544,"column":31,"nodeType":"332","messageId":"333","endLine":544,"endColumn":33},{"ruleId":"308","severity":1,"message":"309","line":545,"column":21,"nodeType":"310","messageId":"311","endLine":545,"endColumn":23},{"ruleId":"330","severity":1,"message":"331","line":671,"column":29,"nodeType":"332","messageId":"333","endLine":671,"endColumn":31},{"ruleId":"304","severity":1,"message":"305","line":676,"column":26,"nodeType":"306","messageId":"307","endLine":676,"endColumn":28},{"ruleId":"304","severity":1,"message":"305","line":676,"column":63,"nodeType":"306","messageId":"307","endLine":676,"endColumn":65},{"ruleId":"318","severity":1,"message":"347","line":30,"column":8,"nodeType":"320","messageId":"321","endLine":30,"endColumn":31},{"ruleId":"318","severity":1,"message":"326","line":116,"column":10,"nodeType":"320","messageId":"321","endLine":116,"endColumn":22},{"ruleId":"312","severity":1,"message":"328","line":121,"column":3,"nodeType":"320","endLine":121,"endColumn":12,"suggestions":"348"},{"ruleId":"308","severity":1,"message":"309","line":183,"column":31,"nodeType":"310","messageId":"311","endLine":183,"endColumn":33},{"ruleId":"308","severity":1,"message":"309","line":290,"column":49,"nodeType":"310","messageId":"311","endLine":290,"endColumn":51},{"ruleId":"308","severity":1,"message":"309","line":290,"column":89,"nodeType":"310","messageId":"311","endLine":290,"endColumn":91},{"ruleId":"308","severity":1,"message":"309","line":293,"column":30,"nodeType":"310","messageId":"311","endLine":293,"endColumn":32},{"ruleId":"308","severity":1,"message":"309","line":298,"column":30,"nodeType":"310","messageId":"311","endLine":298,"endColumn":32},{"ruleId":"304","severity":1,"message":"305","line":194,"column":26,"nodeType":"306","messageId":"307","endLine":194,"endColumn":28},{"ruleId":"304","severity":1,"message":"305","line":194,"column":63,"nodeType":"306","messageId":"307","endLine":194,"endColumn":65},{"ruleId":"330","severity":1,"message":"331","line":428,"column":31,"nodeType":"332","messageId":"333","endLine":428,"endColumn":33},{"ruleId":"304","severity":1,"message":"305","line":516,"column":67,"nodeType":"306","messageId":"307","endLine":516,"endColumn":69},{"ruleId":"304","severity":1,"message":"305","line":516,"column":173,"nodeType":"306","messageId":"307","endLine":516,"endColumn":175},{"ruleId":"330","severity":1,"message":"331","line":604,"column":29,"nodeType":"332","messageId":"333","endLine":604,"endColumn":31},{"ruleId":"304","severity":1,"message":"305","line":609,"column":26,"nodeType":"306","messageId":"307","endLine":609,"endColumn":28},{"ruleId":"304","severity":1,"message":"305","line":609,"column":63,"nodeType":"306","messageId":"307","endLine":609,"endColumn":65},{"ruleId":"318","severity":1,"message":"326","line":119,"column":10,"nodeType":"320","messageId":"321","endLine":119,"endColumn":22},{"ruleId":"312","severity":1,"message":"328","line":124,"column":3,"nodeType":"320","endLine":124,"endColumn":12,"suggestions":"349"},{"ruleId":"316","severity":1,"message":"317","line":280,"column":19,"nodeType":"300","endLine":280,"endColumn":95},{"ruleId":"304","severity":1,"message":"305","line":281,"column":39,"nodeType":"306","messageId":"307","endLine":281,"endColumn":41},{"ruleId":"304","severity":1,"message":"305","line":281,"column":122,"nodeType":"306","messageId":"307","endLine":281,"endColumn":124},{"ruleId":"316","severity":1,"message":"317","line":285,"column":19,"nodeType":"300","endLine":285,"endColumn":95},{"ruleId":"308","severity":1,"message":"309","line":296,"column":40,"nodeType":"310","messageId":"311","endLine":296,"endColumn":42},{"ruleId":"318","severity":1,"message":"350","line":3,"column":8,"nodeType":"320","messageId":"321","endLine":3,"endColumn":23},{"ruleId":"318","severity":1,"message":"351","line":8,"column":5,"nodeType":"320","messageId":"321","endLine":8,"endColumn":10},{"ruleId":"318","severity":1,"message":"352","line":10,"column":5,"nodeType":"320","messageId":"321","endLine":10,"endColumn":14},{"ruleId":"318","severity":1,"message":"353","line":18,"column":12,"nodeType":"320","messageId":"321","endLine":18,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":73,"column":35,"nodeType":"300","endLine":73,"endColumn":148},{"ruleId":"308","severity":1,"message":"309","line":82,"column":124,"nodeType":"310","messageId":"311","endLine":82,"endColumn":126},{"ruleId":"301","severity":1,"message":"302","line":42,"column":1,"nodeType":"303","endLine":52,"endColumn":3},{"ruleId":"308","severity":1,"message":"309","line":103,"column":73,"nodeType":"310","messageId":"311","endLine":103,"endColumn":75},{"ruleId":"318","severity":1,"message":"354","line":1,"column":17,"nodeType":"320","messageId":"321","endLine":1,"endColumn":26},{"ruleId":"318","severity":1,"message":"355","line":1,"column":28,"nodeType":"320","messageId":"321","endLine":1,"endColumn":36},{"ruleId":"318","severity":1,"message":"356","line":4,"column":8,"nodeType":"320","messageId":"321","endLine":4,"endColumn":17},{"ruleId":"318","severity":1,"message":"357","line":5,"column":8,"nodeType":"320","messageId":"321","endLine":5,"endColumn":22},{"ruleId":"301","severity":1,"message":"302","line":1,"column":1,"nodeType":"303","endLine":19,"endColumn":3},{"ruleId":"301","severity":1,"message":"302","line":25,"column":1,"nodeType":"303","endLine":29,"endColumn":3},"no-native-reassign",["358"],"no-negated-in-lhs",["359"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["360"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-unused-vars","'category' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getCategory'. Either include it or remove the dependency array.",["361"],"'Badge' is defined but never used.","'UserService' is defined but never used.","'searchString' is assigned a value but never used.","'setErrorText' is assigned a value but never used.","React Hook useEffect contains a call to 'setIsLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [isLoaded] as a second argument to the useEffect Hook.",["362"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'fileName' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'itemsPerPage'. Either include it or remove the dependency array.",["363"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'responsiveFontSizes' is defined but never used.","'Form' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getAllVideos'. Either include it or remove the dependency array.",["364"],"'beep' is defined but never used.","Expected '!==' and instead saw '!='.","'ReceivedPlaylistService' is defined but never used.",["365"],["366"],"'InsertPhotoIcon' is defined but never used.","'Image' is defined but never used.","'ListGroup' is defined but never used.","'content' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'InputIcon' is defined but never used.","'InputAdornment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"367","fix":"368"},{"desc":"369","fix":"370"},{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"371","fix":"377"},{"desc":"371","fix":"378"},"Update the dependencies array to be: [history]",{"range":"379","text":"380"},"Update the dependencies array to be: [getCategory]",{"range":"381","text":"382"},"Add dependencies array: [isLoaded]",{"range":"383","text":"384"},"Update the dependencies array to be: [itemsPerPage]",{"range":"385","text":"386"},"Update the dependencies array to be: [getAllVideos]",{"range":"387","text":"388"},{"range":"389","text":"384"},{"range":"390","text":"384"},[1254,1256],"[history]",[641,643],"[getCategory]",[7791,7791],", [isLoaded]",[7952,7954],"[itemsPerPage]",[6126,6128],"[getAllVideos]",[4447,4447],[4638,4638]]
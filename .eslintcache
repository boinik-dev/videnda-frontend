[{"F:\\2021\\Videnda-AI\\source\\frontend\\src\\index.js":"1","F:\\2021\\Videnda-AI\\source\\frontend\\src\\App.js":"2","F:\\2021\\Videnda-AI\\source\\frontend\\src\\reportWebVitals.js":"3","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth.service.js":"4","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\NoMatch.js":"5","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home.js":"6","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Register.js":"7","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Login.js":"8","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ChangePassword.js":"9","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Deregister.js":"10","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\VerifyEmail.js":"11","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ForgotPassword.js":"12","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Profile.js":"13","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home-bak.js":"14","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardUser.js":"15","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardModerator.js":"16","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardAdmin.js":"17","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\CategoryPlaylists.js":"18","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\TokenManagement.js":"19","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\AddTokenCode.js":"20","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\CategoryManagement.js":"21","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ResetPassword.js":"22","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\blog\\BlogSingle.js":"23","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\UploadImage.js":"24","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\EditImage.js":"25","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\EditPPT.js":"26","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\PPTFileList.js":"27","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ExecuteService.js":"28","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ReceivedPlaylist\\ReceivedPlaylist.js":"29","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\UploadVideo.js":"30","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\blog\\Blogs.js":"31","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\Playlist.js":"32","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\VideoList.js":"33","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\BlogPlaylist.js":"34","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth-header.js":"35","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\category.service.js":"36","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\user.service.js":"37","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\downloadfile.js":"38","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\file-upload.service.js":"39","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\ppt.service.js":"40","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\execute.service.js":"41","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\image.service.js":"42","F:\\2021\\Videnda-AI\\source\\frontend\\src\\layouts\\App.js":"43","F:\\2021\\Videnda-AI\\source\\frontend\\src\\tools\\GlobalData.js":"44","F:\\2021\\Videnda-AI\\source\\frontend\\src\\layouts\\Home.js":"45","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Common\\SelectOptions.js":"46","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\playlist.service.js":"47","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\blog.service.js":"48","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\VideoPlayer.js":"49","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\video.service.js":"50","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\EditDialog.js":"51","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\received-playlist.service.js":"52"},{"size":618,"mtime":1614721524175,"results":"53","hashOfConfig":"54"},{"size":8375,"mtime":1620421679096,"results":"55","hashOfConfig":"54"},{"size":375,"mtime":1614721524175,"results":"56","hashOfConfig":"54"},{"size":3181,"mtime":1619596697117,"results":"57","hashOfConfig":"54"},{"size":306,"mtime":1620783571866,"results":"58","hashOfConfig":"54"},{"size":4983,"mtime":1619627154581,"results":"59","hashOfConfig":"54"},{"size":6708,"mtime":1619626966261,"results":"60","hashOfConfig":"54"},{"size":4184,"mtime":1619626947533,"results":"61","hashOfConfig":"54"},{"size":6970,"mtime":1619626880917,"results":"62","hashOfConfig":"54"},{"size":3822,"mtime":1619626902386,"results":"63","hashOfConfig":"54"},{"size":2121,"mtime":1619626993109,"results":"64","hashOfConfig":"54"},{"size":4333,"mtime":1619626928829,"results":"65","hashOfConfig":"54"},{"size":3011,"mtime":1619797873493,"results":"66","hashOfConfig":"54"},{"size":3605,"mtime":1619800043547,"results":"67","hashOfConfig":"54"},{"size":805,"mtime":1619626313765,"results":"68","hashOfConfig":"54"},{"size":820,"mtime":1619626322166,"results":"69","hashOfConfig":"54"},{"size":808,"mtime":1619626369807,"results":"70","hashOfConfig":"54"},{"size":2477,"mtime":1619626296176,"results":"71","hashOfConfig":"54"},{"size":11031,"mtime":1619626462230,"results":"72","hashOfConfig":"54"},{"size":5254,"mtime":1619797873488,"results":"73","hashOfConfig":"54"},{"size":18208,"mtime":1620401222472,"results":"74","hashOfConfig":"54"},{"size":7873,"mtime":1619626980254,"results":"75","hashOfConfig":"54"},{"size":5851,"mtime":1620668480065,"results":"76","hashOfConfig":"54"},{"size":23558,"mtime":1619800193474,"results":"77","hashOfConfig":"54"},{"size":20114,"mtime":1617959866034,"results":"78","hashOfConfig":"54"},{"size":6028,"mtime":1617828262912,"results":"79","hashOfConfig":"54"},{"size":6304,"mtime":1619626665301,"results":"80","hashOfConfig":"54"},{"size":8644,"mtime":1619626493654,"results":"81","hashOfConfig":"54"},{"size":11850,"mtime":1619799464451,"results":"82","hashOfConfig":"54"},{"size":41076,"mtime":1620783571868,"results":"83","hashOfConfig":"54"},{"size":20464,"mtime":1620672488760,"results":"84","hashOfConfig":"54"},{"size":31990,"mtime":1620674504163,"results":"85","hashOfConfig":"54"},{"size":25387,"mtime":1620788143220,"results":"86","hashOfConfig":"54"},{"size":25355,"mtime":1620672605094,"results":"87","hashOfConfig":"54"},{"size":248,"mtime":1614721524176,"results":"88","hashOfConfig":"54"},{"size":1824,"mtime":1618620604303,"results":"89","hashOfConfig":"54"},{"size":1993,"mtime":1616539170313,"results":"90","hashOfConfig":"54"},{"size":1620,"mtime":1617821383031,"results":"91","hashOfConfig":"54"},{"size":1311,"mtime":1615414972033,"results":"92","hashOfConfig":"54"},{"size":1640,"mtime":1617821383119,"results":"93","hashOfConfig":"54"},{"size":997,"mtime":1617869378061,"results":"94","hashOfConfig":"54"},{"size":2190,"mtime":1617821383097,"results":"95","hashOfConfig":"54"},{"size":286,"mtime":1619633862426,"results":"96","hashOfConfig":"54"},{"size":1068,"mtime":1619800043547,"results":"97","hashOfConfig":"54"},{"size":271,"mtime":1619628915144,"results":"98","hashOfConfig":"54"},{"size":1348,"mtime":1618396076264,"results":"99","hashOfConfig":"54"},{"size":3437,"mtime":1620785541460,"results":"100","hashOfConfig":"54"},{"size":3056,"mtime":1620786133611,"results":"101","hashOfConfig":"54"},{"size":9310,"mtime":1620788008117,"results":"102","hashOfConfig":"54"},{"size":2383,"mtime":1620421679151,"results":"103","hashOfConfig":"54"},{"size":2373,"mtime":1617848072200,"results":"104","hashOfConfig":"54"},{"size":1896,"mtime":1616272240383,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"newphg",{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"111"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"111"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"111"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"111"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"111"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"111"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"111"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"111"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"111"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"111"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"111"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"111"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"111"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"111"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"F:\\2021\\Videnda-AI\\source\\frontend\\src\\index.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\App.js",["226"],"import React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\n\r\nimport './App.css';\r\n\r\nimport AuthService from './services/auth.service';\r\n\r\nimport Login from './components/Auth/Login';\r\nimport Register from './components/Auth/Register';\r\nimport ChangePassword from './components/Auth/ChangePassword';\r\nimport Deregister from './components/Auth/Deregister';\r\nimport ForgotPassword from './components/Auth/ForgotPassword';\r\nimport ResetPassword from './components/Auth/ResetPassword';\r\nimport VerifyEmail from './components/Auth/VerifyEmail';\r\nimport Home from './components/Home';\r\nimport HomeBK from './components/Home-bak';\r\nimport Profile from \"./components/User/Profile\";\r\nimport BoardUser from \"./components/User/BoardUser\";\r\nimport BoardModerator from \"./components/User/BoardModerator\";\r\nimport BoardAdmin from \"./components/User/BoardAdmin\";\r\nimport TokenManagement from \"./components/User/Admin/TokenManagement\";\r\nimport CategoryManagement from \"./components/User/Admin/CategoryManagement\";\r\nimport ExecuteService from \"./components/Service/ExecuteService\";\r\nimport NoMatch from './components/NoMatch';\r\nimport Blogs from \"./components/User/Admin/blog/Blogs\";\r\n// import BlogCreate from \"./components/User/Admin/blog/BlogCreate\";\r\n\r\nimport authService from './services/auth.service';\r\n// image\r\nimport UploadImage from './components/Service/Image/UploadImage';\r\nimport EditImage from './components/Service/Image/EditImage';\r\n// ppt\r\nimport PPTFileList from './components/Service/PPT/PPTFileList'\r\nimport EditPPT from './components/Service/PPT/EditPPT';\r\n// video\r\nimport UploadVideo from './components/Service/Video/UploadVideo'\r\nimport Playlist from './components/Service/Playlist/Playlist'\r\nimport BlogPlaylist from './components/Service/Playlist/BlogPlaylist'\r\nimport ReceivedPlaylist from './components/Service/ReceivedPlaylist/ReceivedPlaylist';\r\nimport VideoList from './components/Service/Playlist/VideoList'\r\nimport BlogSingle from './components/User/Admin/blog/BlogSingle'\r\nimport AddTokenCode from './components/User/AddTokenCode';\r\nimport CategoryPlaylists from './components/User/CategoryPlaylists';\r\n\r\n\r\n\r\nfunction App() {\r\n  const [showModeratorBoard, setShowModeratorBoard] = useState(false);\r\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\r\n  const [currentUser, setCurrentUser] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    const user = authService.getCurrentUser();\r\n    if (user) {\r\n      setCurrentUser(user);\r\n      setShowAdminBoard(user.roles.includes(\"ROLE_ADMIN\"));\r\n      setShowModeratorBoard(user.roles.includes(\"ROLE_MODERATOR\"));\r\n    }\r\n  }, []);\r\n\r\n  const logOut = () => {\r\n    AuthService.logout();\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n        <Navbar.Brand href=\"/\">Videnda AI Engine</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/home\">Home</Nav.Link>\r\n            {showModeratorBoard && (\r\n              <Nav.Link href=\"/mod\">Moderator Board</Nav.Link>\r\n            )}\r\n            {showAdminBoard && (\r\n              <Nav.Link href=\"/admin\">Admin Board</Nav.Link>\r\n            )}\r\n            {currentUser && (\r\n              <Nav.Link href=\"/user\">User</Nav.Link>\r\n            )}\r\n          </Nav>\r\n          {currentUser ? (\r\n            <Nav className=\"ml-auto\">\r\n              {showAdminBoard && (\r\n                <NavDropdown title='Admin Menu' id=\"collasible-nav-dropdown\" alignRight >\r\n             \r\n                  <NavDropdown.Item href=\"/admin/blog/blogs\">Blog</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"/blog-playlists\">Blog Playlist</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"/token_management\">Token Management</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"/admin/categories\">Category Management</NavDropdown.Item>\r\n                </NavDropdown>\r\n              )}\r\n              \r\n              <NavDropdown title='Services' id=\"collasible-nav-dropdown\" alignRight >\r\n                <NavDropdown.Item href=\"/upload_image\">Upload Image</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/upload_video\">Upload Video</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/playlists\">Manage Playlist</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/received_playlist\">Received Playlists</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/manage_ppt/list\">Manage PowerPoint</NavDropdown.Item>\r\n              </NavDropdown>\r\n              <NavDropdown title={currentUser.username} id=\"collasible-nav-dropdown\" alignRight >\r\n                <NavDropdown.Item href=\"/add_token_code\">Add Tokens</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/execute_service\">Tokens History</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/profile\">View Profile</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/changePassword\">Change Password</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/deregister\">Deregister</NavDropdown.Item>\r\n                <NavDropdown.Item href=\"/signin\" onClick={logOut}>Logout</NavDropdown.Item>\r\n              </NavDropdown>\r\n            </Nav>\r\n          ) : (\r\n              <Nav className=\"ml-auto\">\r\n                <Nav.Link href=\"/signin\">Login</Nav.Link>\r\n                <Nav.Link href=\"/register\">Sign Up</Nav.Link>\r\n              </Nav>\r\n            )}\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link href=\"/home-back\">Site Map</Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n\r\n      <Switch>\r\n        <Route exact path={[\"/\", \"/home\"]} component={Home}></Route>\r\n          <Route path=\"/home-back\" component={HomeBK}></Route>\r\n          <Route path=\"/signin\" component={Login} />\r\n          <Route path=\"/register\" component={Register} />\r\n          <Route path=\"/changePassword\" component={ChangePassword} />\r\n          <Route path=\"/deregister\" component={Deregister} />\r\n          <Route path=\"/resetpassword/forgotpassword\" component={ForgotPassword} />\r\n          <Route path=\"/verifyemail\" component={VerifyEmail} />\r\n          <Route path=\"/profile\" component={Profile} />\r\n          <Route path=\"/resetpassword/reset\" component={ResetPassword} />\r\n          <Route path=\"/token_management\" component={TokenManagement} />\r\n          <Route path=\"/admin/blog/blogs\" component={Blogs}/>\r\n          <Route path=\"/execute_service\" component={ExecuteService} />\r\n          <Route path=\"/upload_image\" component={UploadImage} />\r\n          <Route path=\"/edit_image/:image_id\" component={EditImage} />\r\n          <Route path=\"/manage_ppt/list\" component={PPTFileList} />\r\n          <Route path=\"/manage_ppt/edit_ppt/:ppt_id\" component={EditPPT} />\r\n          <Route path=\"/upload_video\" component={UploadVideo} />\r\n          <Route path=\"/playlists\" component={Playlist} />\r\n          <Route path=\"/blog-playlists\" component={BlogPlaylist} />\r\n          <Route path=\"/playlist/:playlist_id\" component={VideoList} />\r\n          <Route path=\"/blog/:id\" component={BlogSingle} />\r\n          <Route path=\"/received_playlist\" component={ReceivedPlaylist} />\r\n          <Route path=\"/user\" component={BoardUser} />\r\n          <Route path=\"/mod\" component={BoardModerator} />\r\n          <Route path=\"/admin/categories\" component={CategoryManagement} />\r\n          <Route path=\"/admin\" component={BoardAdmin} />\r\n          <Route path=\"/add_token_code\" component={AddTokenCode} />\r\n          <Route path=\"/category_playlists/:category_id\" component={CategoryPlaylists} />\r\n          <Route path=\"*\" component={NoMatch} />\r\n      </Switch>\r\n\r\n      <Navbar className=\"fixed-bottom\" bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\r\n        <div className=\"container text-center\">\r\n            <div className=\"col-sm-12\">\r\n\r\n                <p className=\"text-center twhite m-2\"> <a href=\"#\" className=\"twhite\"> Licence Terms</a> Copyright © 2021 Videnda AI</p>\r\n            </div>\r\n        </div>\r\n      </Navbar>\r\n    </Router>\r\n\r\n  )\r\n}\r\n\r\nexport default App;\r\n",["227","228"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\reportWebVitals.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth.service.js",["229"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nimport GlobalData from \"../tools/GlobalData\";\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/auth/';\r\n//const API_URL = `http://local--host:3030/api/auth/`;\r\n//const API_URL = 'http://15-8.69.222.102:3030/api/auth/';\r\n//const API_URL = 'http://127.0.0.1:3030/api/auth/';\r\n//const API_URL = ''\r\n\r\naxios.interceptors.response.use(\r\n    response => {\r\n        return response\r\n    },\r\n    error => {\r\n        if ( !error.response) {\r\n            console.log( \"Connection to local-host failed err=\" + error.message);\r\n        }\r\n        return Promise.reject(error)\r\n    }\r\n);\r\n\r\nconst register = (username, email, password) => {\r\n  console.log(\"front console = register with axios, url=\" + API_URL);\r\n  try{\r\n   return axios.post( API_URL + \"signup\", {\r\n     username,\r\n     email,\r\n     password,\r\n   });\r\n  }catch( err){\r\n\tconsole.log( \"axios post error=\" + err.message);\r\n  }\r\n  return \"{error}\";\r\n};\r\n\r\nconst login = (email, password) => {\r\n  console.log(API_URL);\r\n  return axios\r\n    .post(API_URL + \"signin\", {\r\n      email,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst changePassword = (oldPassword, newPassword)=>{\r\n\r\n  let token = authHeader();\r\n\r\n  return axios\r\n    .post(API_URL+\"changePassword\",\r\n      {oldPassword, newPassword},\r\n      {headers: token}\r\n    ).then(response=>{\r\n      return response;\r\n    })\r\n}\r\n\r\nconst deregister = (email, password)=>{\r\n  let token = authHeader();\r\n  return axios\r\n    .post(API_URL+\"deregister\",\r\n      {email,password},\r\n      {headers: token}\r\n    ).then(response=>{\r\n      return response;\r\n    })\r\n}\r\n\r\nconst forgotPassword = (email)=>{\r\n  return axios\r\n    .post(API_URL+\"forgotPassword\",\r\n      {email}\r\n    ).then(response=>{\r\n      return response;\r\n    });\r\n}\r\nconst verifyEmail=(obj=>{\r\n  return axios\r\n    .post(API_URL+\"verifyEmail\",\r\n      obj\r\n    ).then(response=>{\r\n      return response;\r\n    });\r\n})\r\nconst resetPassword=(obj)=>{\r\n  return axios.post(\r\n    API_URL+\"resetPassword\",\r\n    obj\r\n  ).then(response=>{\r\n    return response;\r\n  })\r\n}\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nconst resendVerifyEmail = () =>{\r\n  const token = authHeader();\r\n  return axios.post(API_URL+\"resendVerifyEmail\", {}, {\r\n    headers: token\r\n  }).then(response=>{\r\n    return response\r\n  });\r\n}\r\n\r\nconst getUserProfile = ()=>{\r\n  const token = authHeader();\r\n  return axios.post(API_URL+\"getUserProfile\", {}, {\r\n    headers: token\r\n  }).then(response=>{\r\n    if (response.data.accessToken) {\r\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  })\r\n}\r\n\r\nexport default {\r\n  register,\r\n  login,\r\n  logout,\r\n  changePassword,\r\n  deregister,\r\n  forgotPassword,\r\n  resetPassword,\r\n  verifyEmail,\r\n  getCurrentUser,\r\n  resendVerifyEmail,\r\n  getUserProfile,\r\n};\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\NoMatch.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home.js",["230","231","232"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport UserService from '../services/user.service';\r\nimport CategoryService from '../services/category.service';\r\nimport HomeLayout from '../layouts/Home';\r\n\r\nimport {\r\n    Button,\r\n    Media\r\n} from 'react-bootstrap';\r\n\r\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\r\n\r\n\r\nconst Home = () => {\r\n    const [content, setContent] = useState();\r\n    const [errReceived, setErrReceived] = useState(false);\r\n    const [categories, setCategories] = useState();\r\n\r\n    useEffect(() => {\r\n        console.log(\"HOME getPublicContent START\");\r\n        UserService.getPublicContent().then(\r\n            (response) => {\r\n                console.log(\"HOME getPublicContent RECEIVED\");\r\n                setContent(response.data);\r\n            },\r\n            (error) => {\r\n                console.log(\"HOME getPublicContent ERR\", error);\r\n                console.log(\"HOME getPublicContent ERRx\", error.message);\r\n                setErrReceived(\"getPublicContent err=\" + error.message);\r\n                const _content =\r\n                    (error.response && error.response.data) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setContent(_content);\r\n                //setErrReceived(_content);\r\n            }\r\n        )\r\n        getCategories();\r\n    }, []);\r\n\r\n    const getCategories = () => {\r\n        console.log(\"HOME getCategories START\");\r\n        CategoryService.getAllCategory()\r\n            .then(response => {\r\n                console.log(\"HOME getCategories RECEIVED\");\r\n                setCategories(response.data);\r\n            })\r\n            .catch(err => {\r\n                //let received_data = \"getProducts error=\" + err.message;\r\n                console.log(\"HOME getCategories err=\", err);\r\n                setErrReceived(\"Categories err=\" + err.message);\r\n                //setResponseState( received_data);\r\n            });\r\n    }\r\n\r\n    let history = useHistory();\r\n    return (\r\n        <HomeLayout>\r\n            <div>{errReceived ? errReceived : \"\"}</div>\r\n            <ResponsiveMasonry\r\n                columnsCountBreakPoints={{ 450: 1, 750: 2, 1200: 3 }}\r\n            >\r\n                <Masonry>\r\n\r\n                    {categories\r\n                        && categories.map((data, i) => {\r\n                            return (\r\n                                <div className=\"m-0\">\r\n                                    <Media className=\"masonryMedia\">\r\n                                        <img src={data.thumb_image} className=\"img100\" style={{ cursor: 'pointer' }} />\r\n                                        <Media.Body class=\"media-body justify-content-center align-items-center\">\r\n                                            <div>\r\n                                                <h2><span>{data.title}</span></h2>\r\n                                                <p style={{ marginBottom: \"10px\" }}><span>{data.description}</span></p>\r\n                                                <div className=\"d-flex justify-content-center bd-highlight mb-3\">\r\n                                                    {data.public_playlists && data.public_playlists.length > 0 &&\r\n                                                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                                                            className=\"mr-2\"\r\n                                                            onClick={() => { let playlist = data.playlists.filter(item => item.id == data.public_playlists[0])[0]; console.log(playlist); history.push('/playlist/' + playlist.playlist_id) }}>\r\n                                                            Public Playlists\r\n                                                </Button>\r\n                                                    }\r\n                                                    {data.private_playlists && data.private_playlists.length > 0 &&\r\n                                                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                                                            className=\"\"\r\n                                                            onClick={() => { history.push('/category_playlists/' + data.category_id) }}>\r\n                                                            Private Playlists\r\n                                                </Button>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        </Media.Body>\r\n                                    </Media>\r\n                                </div>\r\n                            )\r\n\r\n                        })}\r\n                </Masonry>\r\n            </ResponsiveMasonry>\r\n        </HomeLayout>\r\n    )\r\n}\r\n\r\n\r\nexport default Home;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Register.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Login.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ChangePassword.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\Deregister.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\VerifyEmail.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ForgotPassword.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Profile.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Home-bak.js",["233","234","235","236","237"],"import React, {useState, useEffect} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\n\r\nimport UserService from '../services/user.service';\r\nimport CategoryService from '../services/category.service';\r\nimport AppLayout from '../layouts/App';\r\n\r\nimport {\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nconst HomeBK = ()=>{\r\n    const [content, setContent] = useState();\r\n    const [categories, setCategories] = useState();\r\n\r\n    useEffect(()=>{\r\n        UserService.getPublicContent().then(\r\n            (response)=>{\r\n                setContent(response.data);\r\n            },\r\n            (error)=>{\r\n                const _content =\r\n                    (error.response && error.response.data) ||\r\n                    error.message ||\r\n                    error.toString();\r\n                setContent(_content);\r\n            }\r\n        )\r\n\r\n        getCategories();\r\n    }, []);\r\n\r\n    const getCategories = () => {\r\n        CategoryService.getAllCategory().then( response => {\r\n            setCategories(response.data);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {categories && categories.length && <CategoryList categories={categories}></CategoryList> ||\r\n                <div className=\"jumbotron\">\r\n                    <h3>{content}</h3>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst CategoryList = (props) => {\r\n    let history = useHistory();\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                { data.thumb_image &&\r\n                \t<Image thumbnail\r\n                \tsrc={data.thumb_image}\r\n                \tclassName=\"mr-3\"\r\n                \tstyle={{ cursor: 'pointer' }} /> ||\r\n                \t<InsertPhotoIcon style={{ fontSize: 140 }}/> }\r\n                <Media.Body>\r\n                    <h2><span>{data.title}</span></h2>\r\n                    <p style={{ marginBottom: \"10px\" }}><span>{data.description}</span></p>\r\n                    { data.public_playlists && data.public_playlists.length > 0 &&\r\n                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                            className=\"mr-2\"\r\n                            onClick={ () => {\r\n\t\t\t\t\t\t\t\tlet playlist = data.playlists.filter(\r\n\t\t\t\t\t\t\t\t\titem => item.id == data.public_playlists[0])[0];\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"playlist=\", playlist);\r\n\t\t\t\t\t\t\t\t\thistory.push('/playlist/' + playlist.playlist_id) } }>\r\n                            Open Public Playlists\r\n                        </Button>\r\n                    }\r\n                    { data.private_playlists && data.private_playlists.length > 0 &&\r\n                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                            className=\"mr-2\"\r\n                            onClick={ () => { history.push(\r\n\t\t\t\t\t\t\t\t'/category_playlists/' + data.category_id) } }>\r\n                            Open Private Playlists\r\n                        </Button>\r\n                    }\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div className=\"card\">\r\n                <ListGroup variant=\"flush\">\r\n                    {props.categories\r\n                        && props.categories.map(item => {\r\n                                return renderItem(item)\r\n                        })}\r\n                </ListGroup>\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n}\r\n\r\nexport default HomeBK;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardUser.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardModerator.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\BoardAdmin.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\CategoryPlaylists.js",["238","239","240","241","242","243","244"],"import React, {useState, useEffect} from 'react';\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\r\n\r\nimport CategoryService from '../../services/category.service';\r\nimport AppLayout from '../../layouts/App';\r\n\r\nimport {\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nconst CategoryPlaylists = ()=>{\r\n    const [category, setCategory] = useState(null);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    let history = useHistory();\r\n    let params = useParams();\r\n    let categoryId = params.category_id || history.push(\"/404\");\r\n\r\n    useEffect(()=>{\r\n        getCategory();\r\n    }, []);\r\n\r\n    const getCategory = () => {\r\n        CategoryService.getCategory(categoryId).then( response => {\r\n          setCategory(response.data || null);\r\n          setPlaylists(response.data && response.data.playlists.filter(item => item.playlist_status == 0) || []);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <AppLayout>\r\n            {playlists && <PlaylistList playlists={playlists}></PlaylistList>}\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nconst PlaylistList = (props) => {\r\n    let history = useHistory();\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                { data.thumb_image && <Image thumbnail src={data.thumb_image} className=\"mr-3\" style={{ cursor: 'pointer' }} /> || <InsertPhotoIcon style={{ fontSize: 140 }}/> }\r\n                \r\n                <Media.Body>\r\n                    <h2><span>{data.playlist_title}</span></h2>\r\n                    <p style={{ marginBottom: \"10px\" }}><span>{data.video_count} Videos</span></p>\r\n                    <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\r\n                        className=\"mr-2\"\r\n                        onClick={ () => { history.push('/playlist/' + data.playlist_id) } }>\r\n                        Open\r\n                    </Button>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <ListGroup variant=\"flush\">\r\n                    {props.playlists\r\n                        && props.playlists.map(item => {\r\n                                return renderItem(item)\r\n                        })}\r\n                </ListGroup>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CategoryPlaylists;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\TokenManagement.js",["245","246","247","248","249","250","251","252"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge\r\n} from 'react-bootstrap';\r\n\r\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\r\nimport UserService from '../../../services/user.service';\r\nimport AppLayout from '../../../layouts/App';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function TokenManagement() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [data, setData] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\r\n  const [searchString, setSearchString] = useState('');\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) {\r\n        UserService.getPrepaidTokens()\r\n            .then(async response => {\r\n                if(response.data && response.data.length > 0) {\r\n                    setData(response.data);\r\n                    setRows(response.data);\r\n                }\r\n            })\r\n\r\n        setIsLoaded(true)\r\n    }\r\n  })\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // playlistId\r\n  const handleDelete = (id) => {\r\n    UserService.deletePrepaidToken(id)\r\n      .then(response => {\r\n          if (response.data === \"success\") {\r\n              window.location.reload();\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n  }\r\n\r\n  // custom\r\n  const handleInsertPlaylist = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      addPlaylist();\r\n    }\r\n  }\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      let arr = [...data];\r\n      arr = arr.filter(item => (item.code).includes(e.target.value.trim().toLowerCase()));\r\n      setRows(arr);\r\n    }\r\n  }\r\n\r\n  const handleAddPlaylist = () => {\r\n    addPlaylist();\r\n  }\r\n\r\n  function addPlaylist() {\r\n      \r\n    if (newPlaylistUrl.trim() == '') {\r\n        return;\r\n    }\r\n    \r\n    let newTokenCount = Number(newPlaylistUrl.trim());\r\n    if (isNaN(newTokenCount) || newTokenCount <= 0) {\r\n        return;\r\n    }\r\n    \r\n    UserService.addPrepaidToken(newTokenCount)\r\n      .then(response => {\r\n          if (response.data === \"success\") {\r\n              window.location.reload();\r\n          }\r\n          if (response.data.message === \"cannotregister\") {\r\n              setErrorText('The playlist is already registered.');\r\n              setTimeout(() => {\r\n                setErrorText('');\r\n              }, 2000);\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n\r\n    document.getElementById('input-with-icon-textfield').value = '';\r\n    setNewPlaylistUrl('');\r\n  }\r\n\r\n  return (\r\n    <AppLayout>\r\n      {errorText &&\r\n          <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\r\n      }\r\n      <Row  className='mt-5'>\r\n        <Col md={5}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Insert token count\"\r\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\r\n            onKeyDown={handleInsertPlaylist}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <CreateIcon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={4}>\r\n          <Button size='sm' onClick={handleAddPlaylist}>\r\n            Add New Token Code\r\n          </Button>\r\n        </Col>\r\n        <Col md={3}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Search token code\"\r\n            onChange={(e) => setSearchString(e.target.value)}\r\n            onKeyDown={handleSearch}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      \r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\">No</TableCell>\r\n              <TableCell align=\"center\">Token Code</TableCell>\r\n              <TableCell align=\"center\">Token Count</TableCell>\r\n              <TableCell align=\"center\">Token Status</TableCell>\r\n              <TableCell align=\"center\">Used Date</TableCell>\r\n              <TableCell align=\"center\">Operate</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(rowsPerPage > 0\r\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              : rows\r\n            ).map((row, index) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell style={{ width: 100 }} component=\"th\" scope=\"row\" align=\"center\">\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell style={{ width: 250 }} align=\"center\">\r\n                  {row.code}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.nr_tokens}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <Badge pill variant={row.used == 1 ? 'warning' : 'success'}>{row.used == '1' ? 'Used' : 'Unused'}</Badge>\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  { row.used == 1 &&\r\n                      row.updatedAt\r\n                  }\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  { row.used == 0 && \r\n                    <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)}>Delete</Button>\r\n                  }\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ height: 53 * emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                colSpan={7}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </AppLayout>\r\n  );\r\n}","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\AddTokenCode.js",["253","254","255"],"import React from \"react\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport UserService from \"../../services/user.service\";\r\nimport AppLayout from '../../layouts/App';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InsertEmoticon from '@material-ui/icons/InsertEmoticon';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\n\r\nconst AddTokenCode = () => {\r\n  console.log( \"AddTokenCode START\");\r\n  const [currentUser, setCurrentUser] = React.useState(undefined);\r\n  const [message, setMessage] = React.useState('');\r\n  const [tokenCode, setTokenCode] = React.useState('');\r\n  const history = useHistory();\r\n  const [mailSendError, setMailSendError] = React.useState(false);\r\n  const [sending, setSending] = React.useState(false);\r\n\r\n  console.log( \"AddTokenCode get profile\");\r\n  React.useEffect(()=>{\r\n    AuthService.getUserProfile()\r\n    \t.then((response)=>{\r\n\t\t  setCurrentUser(response);\r\n    \t})\r\n    \t.catch((err) => {\r\n\t\t\tconst err_str = err.toString();\r\n            const resMessage = \"Please Login [\" + err_str + \"]\";\r\n            setMessage(resMessage);\r\n            if( err_str.includes( \"403\"))\r\n            \thistory.push('/signin');\r\n            //setTimeout(() => {\r\n            //  setMessage('');\r\n            //}, 3000);\r\n        });\r\n  }, [])\r\n\r\n  const resendVerifyEmail=()=>{\r\n    setSending(true);\r\n    AuthService.resendVerifyEmail().then((response)=>{\r\n      setMailSendError(false);\r\n      setSending(false);\r\n      setMessage(response.data.message);\r\n    }, error=>{\r\n      const resMessage=(\r\n          error.response &&\r\n          error.response.data &&\r\n          error.response.data.message\r\n      ) || error.toString();\r\n      setSending(false);\r\n      setMessage(resMessage);\r\n    });\r\n  }\r\n\r\n  console.log( \"AddTokenCode add tokens\");\r\n  const handleAddTokens = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13 || e.target.innerText == 'Add Tokens') {\r\n      UserService.addTokenCode(tokenCode)\r\n        .then(response => {\r\n          if (response.data.message === \"success\") {\r\n              window.location.reload();\r\n          }\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n\r\n            setMessage(resMessage);\r\n            setTimeout(() => {\r\n              setMessage('');\r\n            }, 3000);\r\n        });\r\n\r\n      document.getElementById('input-with-icon-textfield').value = '';\r\n      setTokenCode('');\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <AppLayout>\r\n\r\n{currentUser && currentUser.accessToken ? (\r\n          <>\r\n            {\r\n              currentUser.verified_email===\"none\"&&\r\n              <>\r\n         \r\n              <div className={\"alert alert-danger\"}>\r\n                  You need to verify your email. If you didn't receive the verify email, please click this{` `}\r\n                  <button className=\"btn btn-primary btn-sm\" onClick={resendVerifyEmail} disabled={sending}>\r\n                    {sending && (\r\n                        <span className=\"spinner-border spinner-border-sm\"></span>\r\n                    )}\r\n                    <span>Button</span></button> to resend the verify email.\r\n                </div>                \r\n              </>\r\n              \r\n            }             \r\n            {\r\n              message &&\r\n              <div className={mailSendError ? \"alert alert-danger\" : \"alert alert-danger\"}>\r\n                {message}\r\n              </div>\r\n            }    \r\n          </>\r\n        ):(\r\n            <header className=\"jumbotron\">\r\n                <h3>\r\n                  <strong>Please Login</strong>\r\n                </h3>\r\n            </header>\r\n          )\r\n        }\r\n\r\n      <Row  className='mt-5'>\r\n        <Col md={4}>\r\n          <TextField\r\n            style={{width: '100%'}}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Input code\"\r\n            onChange={(e) => setTokenCode(e.target.value)}\r\n            onKeyDown={handleAddTokens}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <InsertEmoticon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={8}>\r\n          <Button size='sm' onClick={handleAddTokens}>\r\n            Add Tokens\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Row  className='mt-5'>\r\n        <Col md={4}>\r\n           <a href=\"https://exquisiteview.com/Tokens_c13.htm\" target=\"_blank\">Get More Tokens</a>\r\n        </Col>\r\n        <Col md={8}>\r\n        </Col>\r\n      </Row>\r\n\r\n      { currentUser &&\r\n        <header className=\"jumbotron mt-4\">\r\n          <h3 className='mb-4'><strong>{currentUser.username}</strong></h3>\r\n          <p><strong>Current Tokens: </strong>{currentUser.nr_tokens}</p>\r\n        </header>\r\n      }\r\n\r\n      { message &&\r\n        <div className=\"alert alert-primary\">\r\n          {message}\r\n        </div>\r\n      }\r\n\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default AddTokenCode;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\CategoryManagement.js",["256","257","258","259","260","261","262","263","264","265","266","267","268"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SelectOptions from '../../Common/SelectOptions';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge,\r\n  Modal,\r\n} from 'react-bootstrap';\r\n\r\nimport UserService from '../../../services/user.service';\r\nimport PlaylistService from '../../../services/playlist.service';\r\nimport CategoryService from '../../../services/category.service';\r\nimport AppLayout from '../../../layouts/App';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst CategoryModal = (props) => {\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.onHide}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Category Information\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <TextField placeholder=\"Name\" fullWidth value={props.title} onChange={ (e) => props.setCategoryTitle(e.target.value) } />\r\n                    </Col>\r\n                    <Col md={12} style={{marginTop: 15}}>\r\n                        <TextField placeholder=\"Description\" multiline fullWidth rows={4} value={props.description} onChange={ (e) => props.setCategoryDescription(e.target.value) } />\r\n                    </Col>\r\n                    <Col md={12} style={{marginTop: 15}}>\r\n                        <label> Thumbnail:&nbsp;&nbsp; </label>\r\n                        <input type=\"file\" accept=\"image/*\" onChange={ (e) => props.setCategoryThumb(e.target.files[0]) } />\r\n                    </Col>\r\n                    {props.publicPlaylists &&\r\n                        <Col md={6} style={{marginTop: 15}}>\r\n                            <SelectOptions\r\n                                label='Public Playlists'\r\n                                id={props.id}\r\n                                value={props.categoryPublicPlaylist}\r\n                                items={props.publicPlaylists}\r\n                                onSave={props.updateCategoryPublicPlaylist}\r\n                                multiple={false}\r\n                            />\r\n                        </Col>\r\n                    }\r\n                    {props.privatePlaylists.length > 0 &&\r\n                        <Col md={6} style={{marginTop: 15}}>\r\n                            <SelectOptions\r\n                                label='Private Playlists'\r\n                                id={props.id}\r\n                                value={props.categoryPrivatePlaylists}\r\n                                items={props.privatePlaylists}\r\n                                onSave={props.updateCategoryPrivatePlaylists}\r\n                                multiple={true}\r\n                            />\r\n                        </Col>\r\n                    }\r\n                </Row>\r\n                \r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"primary\" onClick={ props.onSave}>Save changes</Button>\r\n                <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function CategoryManagement() {\r\n    const classes = useStyles2();\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const [data, setData] = useState([]);\r\n    const [rows, setRows] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [searchString, setSearchString] = useState('');\r\n    const [errorText, setErrorText] = useState('');\r\n    const [marketingPublicPlaylists, setMarketingPublicPlaylists] = useState([]);\r\n    const [marketingPrivatePlaylists, setMarketingPrivatePlaylists] = useState([]);\r\n        \r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const [showCategoryModal, setShowCategoryModal] = useState(false);\r\n\r\n    // for category modal\r\n    const [categoryId, setCategoryId] = useState('');\r\n    const [categoryTitle, setCategoryTitle] = useState('');\r\n    const [categoryDescription, setCategoryDescription] = useState('');\r\n    const [categoryThumb, setCategoryThumb] = useState(null);\r\n    const [categoryPublicPlaylist, setCategoryPublicPlaylist] = useState();\r\n    const [categoryPrivatePlaylists, setCategoryPrivatePlaylists] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!isLoaded) {\r\n            getAllCategory();\r\n            getAllPlaylists();\r\n            setIsLoaded(true)\r\n        }\r\n    })\r\n    \r\n    const getAllCategory = () => {\r\n        CategoryService.getAllCategory()\r\n            .then(result => {\r\n                setRows(result.data)\r\n                setData(result.data)\r\n            })\r\n    }\r\n\r\n    const getAllPlaylists = () => {\r\n        PlaylistService.getAllPlaylist()\r\n            .then(async response => {\r\n                if (response.data && response.data.length > 0) {\r\n                    let privatePlaylists = [];\r\n                    let publicPlaylists = [];\r\n                    response.data.map(item => {\r\n                        if( item.type == 'marketing') {\r\n                            let obj = {id: item.id, name: item.playlist_title};\r\n                            item.playlist_status == 0 && privatePlaylists.push(obj) || publicPlaylists.push(obj);\r\n                        }\r\n                    })\r\n\r\n                    setMarketingPublicPlaylists(publicPlaylists);\r\n                    setMarketingPrivatePlaylists(privatePlaylists);\r\n                }\r\n            })\r\n    }\r\n\r\n    const resetCategoryData = () => {\r\n        setCategoryId('');\r\n        setCategoryTitle('');\r\n        setCategoryDescription('');\r\n        setCategoryThumb(null);\r\n        setCategoryPublicPlaylist();\r\n        setCategoryPrivatePlaylists([]);\r\n    }\r\n\r\n    const updateCategoryPublicPlaylist = (id, value) => {\r\n        if( value )\r\n            setCategoryPublicPlaylist(value)\r\n        else\r\n            setCategoryPublicPlaylist()\r\n    }\r\n\r\n    const updateCategoryPrivatePlaylists = (id, value) => {\r\n        setCategoryPrivatePlaylists(value)\r\n    }\r\n\r\n    const saveCategory = async () => {\r\n        setRows([])\r\n        setData([])\r\n\r\n        let thumb = '';\r\n        if( categoryThumb ) {\r\n            thumb = await CategoryService.uploadThumbnail(categoryThumb);\r\n        }\r\n\r\n        let playlists = [];\r\n        if( categoryPublicPlaylist > 0 )\r\n            playlists = [categoryPublicPlaylist, ...categoryPrivatePlaylists];\r\n        else\r\n            playlists = [...categoryPrivatePlaylists];\r\n\r\n        if( categoryId ) {\r\n            await CategoryService.updateCategory(categoryId, categoryTitle, categoryDescription, thumb, playlists)\r\n        } else {\r\n            await CategoryService.addCategory(categoryTitle, categoryDescription, thumb, playlists)\r\n        }\r\n\r\n        setShowCategoryModal(false)\r\n        resetCategoryData()\r\n        getAllCategory()\r\n    }\r\n\r\n    const editCategory = (id) => {\r\n        resetCategoryData()\r\n\r\n        const category = rows.filter(item => item.category_id == id)[0];\r\n        \r\n        setCategoryId(category.category_id);\r\n        setCategoryTitle(category.title);\r\n        setCategoryDescription(category.description);\r\n        setCategoryThumb(null);\r\n        setCategoryPublicPlaylist(category.public_playlists && category.public_playlists.length && category.public_playlists[0]);\r\n        setCategoryPrivatePlaylists(category.private_playlists);\r\n\r\n        setShowCategoryModal(true)\r\n    }\r\n\r\n    const removeCategory = (id) => {\r\n        if (window.confirm('Are you sure?')) {\r\n            setRows([])\r\n            setData([])\r\n            \r\n            CategoryService.removeCategory(id)\r\n            .then(response => {\r\n                if( response.data.message == 'success')\r\n                    getAllCategory()\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n                console.log(resMessage);\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            let arr = [...data];\r\n            arr = arr.filter(item => (item.title).toLowerCase().includes(e.target.value.trim().toLowerCase()) || (item.description).toLowerCase().includes(e.target.value.trim().toLowerCase()) );\r\n            setRows(arr);\r\n        }\r\n    }\r\n    \r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            {errorText &&\r\n                <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\r\n            }\r\n            <Row className='mt-5'>\r\n                <Col md={9}>\r\n                <Button size='sm' onClick={() => { resetCategoryData(); setShowCategoryModal(true); }}>\r\n                    Add Category\r\n                </Button>\r\n                </Col>\r\n                <Col md={3}>\r\n                <TextField\r\n                    className={classes.pasteTextField}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search Category\"\r\n                    onChange={(e) => setSearchString(e.target.value)}\r\n                    onKeyDown={handleSearch}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <SearchIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                    }}\r\n                />\r\n                </Col>\r\n            </Row>\r\n            \r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">No</TableCell>\r\n                            <TableCell align=\"center\">Image</TableCell>\r\n                            <TableCell align=\"center\">Title</TableCell>\r\n                            <TableCell align=\"center\">Description</TableCell>\r\n                            <TableCell align=\"center\">Public Playlists</TableCell>\r\n                            <TableCell align=\"center\">Private Playlists</TableCell>\r\n                            <TableCell align=\"center\">Operate</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {(rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows).map((row, index) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell style={{ width: 50 }} component=\"th\" scope=\"row\" align=\"center\">\r\n                                    {index + 1}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.thumb_image && <img src={row.thumb_image} width=\"100%\" style={{objectFit: 'cover'}} /> }\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.title}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 200 }} align=\"center\">\r\n                                    {row.description}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.public_playlists.length}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 150 }} align=\"center\">\r\n                                    {row.private_playlists.length}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    <Button size='sm' variant='primary' block onClick={() => editCategory(row.category_id)}>Edit</Button>\r\n                                    <Button size='sm' variant='danger' block onClick={() => removeCategory(row.category_id)}>Delete</Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                                colSpan={7}\r\n                                count={rows.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                SelectProps={{\r\n                                inputProps: { 'aria-label': 'rows per page' },\r\n                                native: true,\r\n                                }}\r\n                                onChangePage={handleChangePage}\r\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                ActionsComponent={TablePaginationActions}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n            \r\n            <CategoryModal\r\n                show={showCategoryModal}\r\n                onHide={() => setShowCategoryModal(false)}\r\n                id={ categoryId }\r\n                title={ categoryTitle }\r\n                description={ categoryDescription }\r\n                categoryPublicPlaylist={ categoryPublicPlaylist }\r\n                categoryPrivatePlaylists={ categoryPrivatePlaylists }\r\n                publicPlaylists={ marketingPublicPlaylists }\r\n                privatePlaylists={ marketingPrivatePlaylists }\r\n                onSave={saveCategory}\r\n                setCategoryTitle={setCategoryTitle}\r\n                setCategoryDescription={setCategoryDescription}\r\n                setCategoryThumb={setCategoryThumb}\r\n                updateCategoryPublicPlaylist={updateCategoryPublicPlaylist}\r\n                updateCategoryPrivatePlaylists={updateCategoryPrivatePlaylists}\r\n            />\r\n        </AppLayout>\r\n    );\r\n}","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Auth\\ResetPassword.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\blog\\BlogSingle.js",["269"],"/* eslint-disable import/no-anonymous-default-export */\r\n/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable eqeqeq */\r\nimport React, { useEffect, useState } from 'react';\r\nimport renderHTML from 'react-render-html';\r\n\r\nimport {\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport VideoPlayer from '../../../Service/Video/VideoPlayer';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport MButton from '@material-ui/core/Button';\r\n\r\n\r\nimport {\r\n    Image,\r\n    Button,\r\n    Col,\r\n    Card,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nimport PlaylistService from '../../../../services/playlist.service';\r\nimport BlogService from '../../../../services/blog.service';\r\nimport AppLayout from '../../../../layouts/App';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst getVideoId = (url) => {\r\n    // return url.split(\"?v=\")[1];\r\n}\r\n\r\nexport default (props) => {\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('videolistpage') ? Number(localStorage.getItem('videolistpage')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [videoData, setBlogData] = useState([]);\r\n    const [blogInfos, setBlogInfos] = useState([]);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [playUrl, setPlayUrl] = useState(null);\r\n    const [metaTitle, setMetaTitle] = useState(null);\r\n    const [videoId, setVideoId] = useState(null);\r\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\r\n    const [metaDescription, setMetaDescription] = useState(null);\r\n    const [errorText, setErrorText] = useState('');\r\n\r\n\r\n    let history = useHistory();\r\n\r\n    let params = useParams();\r\n    let playlistId = params.id || history.push(\"/404\");\r\n\r\n    useEffect(() => {\r\n        getAllBlog();\r\n    }, [props])\r\n\r\n    const getAllBlog = () => {\r\n        if (playlistId != null)\r\n        BlogService.getSingleBlog(playlistId)\r\n                .then(async response => {\r\n                    console.log(response)\r\n                    if (response.data && response.data.length > 0) {\r\n\r\n                        setBlogData(response.data)\r\n                        setBlogInfos(response.data);\r\n\r\n                        const total = Math.ceil(response.data.length / itemsPerPage);\r\n                        setTotalPages(total);\r\n                    }\r\n                }).catch(error => {\r\n                    console.log(error.response)\r\n\r\n                    if ( error.response.status == 401 )\r\n                        history.push(\"/signin\");\r\n                    else if ( error.response.status == 403 || error.response.status == 404 )\r\n                        history.push(\"/404\");\r\n                })\r\n    }\r\n\r\n\r\n\r\n    function meta_restriction_age_str(meta) {\r\n        if (!meta)\r\n            return \"\";\r\n        return \" [\" + meta + \"]\";\r\n    }\r\n\r\n\r\n    \r\n\r\n    return (\r\n        <AppLayout>\r\n            {blogInfos &&\r\n                <SingleBlog\r\n                    blogInfos={blogInfos}                    \r\n                />\r\n            }\r\n            \r\n            {errorText && //errorText.includes('Token')\r\n                <div>\r\n                    <Alert\r\n                        severity='error'\r\n                        style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\r\n                        action={\r\n\t\t\t\t\t\t\t\t(errorText.includes('Not Enough Tokens') ||\r\n\t\t\t\t\t\t\t\t\terrorText.includes('Please login'))\r\n                            &&\r\n                            <MButton\r\n                                color=\"inherit\" size=\"medium\"\r\n                                onClick={() => {\r\n                                    history.push('/add_token_code');\r\n                                }}\r\n                            >\r\n                                Take More Tokens (+)\r\n                        </MButton>\r\n                        }\r\n                    >\r\n                        {errorText}\r\n                    </Alert>\r\n                </div>\r\n            }\r\n        </AppLayout>\r\n    );\r\n}\r\n\r\n\r\nconst SingleBlog = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const renderBlog = (data) => (\r\n        <>\r\n        <div  className=\"col-md-10 offset-md-1\" key={data.id}>\r\n        <img  src={data.feature_image} className=\"img-fluid\"/>\r\n        <div>\r\n            <h2>{data.title}</h2>\r\n            <div className=\"mt-3\"> \r\n            {data.description}\r\n            </div>\r\n            <div className=\"mt-3\">\r\n            \r\n            {renderHTML(data.content)}\r\n            \r\n            </div>\r\n            \r\n        </div>\r\n            \r\n            \r\n            \r\n        </div>\r\n        </>\r\n    );\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"\">\r\n                <ListGroup variant=\"flush\">\r\n                    {props.blogInfos\r\n                        && props.blogInfos.map((blog, index) => {\r\n                                return renderBlog(blog)                            \r\n                        })}\r\n                </ListGroup>\r\n                \r\n            </div>\r\n        </>\r\n    );\r\n}","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\UploadImage.js",["270","271","272"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Image\\EditImage.js",["273"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Image } from 'react-konva';\r\nimport {\r\n    Button,\r\n    ListGroup,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n} from 'react-bootstrap';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\nimport ImageService from '../../../services/image.service';\r\nimport Auth from \"../../../services/auth.service\";\r\nimport GlobalData from '../../../tools/GlobalData';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { makeStyles, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport MButton from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport imageService from '../../../services/image.service';\r\nimport downloadFile from '../../../services/downloadfile'\r\n\r\nconst back_end_server = GlobalData.back_end_server_ip + \":\" + GlobalData.back_end_server_port;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n        // marginTop: 130\r\n    },\r\n}));\r\n\r\nconst MyVerticallyCenteredModal = (props) => {\r\n    const onSaveClick = (event) => {\r\n        props.onAddDescription(props.description)\r\n        props.onHide()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.onHide}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Input Description\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h5>📝 Please enter your description to the selected image.</h5>\r\n                <Form.Control as=\"textarea\" rows={3} name=\"description\" value={props.description} onChange={props.handleInputChange} />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n                <Button variant=\"primary\" onClick={onSaveClick}>Save changes</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst EditImage = (props) => {\r\n    const [imageInfos, setImageInfos] = React.useState(undefined);\r\n    const [imageId, setImageId] = React.useState('');\r\n    const [imageSrc, setImageSrc] = React.useState('');\r\n    const [imageDescription, setImageDescription] = useState('');\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n    const [currentUser] = React.useState(Auth.getCurrentUser());\r\n    const [imageHistory, setImageHistory] = React.useState(undefined);\r\n    const [orginImageHistory, setOrginImageHistory] = useState(undefined);\r\n    const [lastId, setLastId] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [itemsPerPage] = useState(5);\r\n    const [totalPage, setTotalPage] = useState(1);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [isRotate, setIsRotate] = useState(undefined)\r\n    const [isEditDescription, setIsEditDescription] = useState(undefined)\r\n\r\n    let history = useHistory();\r\n\r\n    React.useEffect(() => {\r\n        ImageService.getImageFiles()\r\n            .then(files => {\r\n                setImageInfos(files.data);\r\n                const iid = props.match.params.image_id;\r\n                return ImageService.getImageHistory(iid);\r\n            }).then(response => {\r\n                setOrginImageHistory(response.data);\r\n                setImageHistory(response.data);\r\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n                setIsLoading(false);\r\n                setErrorMessage(resMessage);\r\n            });\r\n    }, [props]);\r\n\r\n    React.useEffect(() => {\r\n        if (imageHistory && imageHistory.length > 0) {\r\n            const first_id = imageHistory[0].image_id;\r\n            const last_id = imageHistory[imageHistory.length - 1].image_id;\r\n            setLastId(last_id);\r\n\r\n            if (isRotate && !isEditDescription) {\r\n                setImageId(last_id)\r\n                setTotalPage(Math.ceil(imageHistory.length / itemsPerPage));\r\n                setPageNumber(totalPage)\r\n                setIsRotate(false)\r\n            } else if (!isRotate && isEditDescription) {\r\n                setIsEditDescription(false)\r\n            } else {\r\n                setImageId(first_id)\r\n            }\r\n\r\n            setIsLoading(false);\r\n        }\r\n    }, [imageHistory]);\r\n\r\n    React.useEffect(() => {\r\n        setImageSrc(ImageService.getImage(imageId));\r\n    }, [imageId]);\r\n\r\n    const handleRotateImage = () => {\r\n        const payload = {\r\n            imageId: imageId,\r\n            degree: 90,\r\n            clock: true,\r\n        }\r\n        setIsLoading(true);\r\n        ImageService.rotateImage(payload).then(response => {\r\n            ImageService.getImageHistory(response.data.imageId).then(response => {\r\n                setImageHistory(response.data);\r\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\r\n            }).catch(err => {\r\n\r\n            })\r\n            setErrorMessage('');\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n            setIsLoading(false);\r\n            \r\n            setErrorMessage(resMessage);\r\n            setTimeout(() => {\r\n                setErrorMessage('');\r\n            }, 5000);\r\n        });\r\n        setIsRotate(true);\r\n    }\r\n\r\n    const handleEditImage = () => {\r\n        setModalShow(true);\r\n        setImageDescription(imageHistory.find(item => item.image_id === imageId).description)\r\n        setIsEditDescription(true)\r\n    }\r\n\r\n    const handleAddDescription = (desc) => {\r\n        const data = {\r\n            imageId: imageId,\r\n            imageDescription: desc\r\n        }\r\n        ImageService.addImageDescription(data).then(response => {\r\n            const index = imageHistory.findIndex(item => item.image_id === imageId)\r\n            const history = [...imageHistory];\r\n            history[index].description = desc;\r\n            setImageHistory(history);\r\n            setErrorMessage('');\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n            setIsLoading(false);\r\n\r\n            setErrorMessage(resMessage);\r\n            setTimeout(() => {\r\n                setErrorMessage('');\r\n            }, 5000);\r\n        })\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setImageDescription(e.target.value);\r\n    }\r\n\r\n    const onClickHistory = (id) => {\r\n        setImageId(id);\r\n    }\r\n\r\n    const removeImage = (image_id) => {\r\n        let arr = [...imageHistory];\r\n        if (arr.length === 1) {\r\n            const confirm = window.confirm(\"Are you sure remove the last image?\");\r\n            if (confirm) {\r\n                ImageService.removeImage(image_id).then((response) => {\r\n                    props.history.push(\"/upload_image\");\r\n                }).catch((err) => {\r\n                    const resMessage = (\r\n                        err.response &&\r\n                        err.response.data &&\r\n                        err.response.data.message\r\n                    ) || err.toString();\r\n                    setIsLoading(false);\r\n                    setErrorMessage(resMessage);\r\n                });\r\n            }\r\n        } else {\r\n            ImageService.removeImage(image_id).then((response) => {\r\n                arr = arr.filter(item => item.image_id !== image_id)\r\n                setImageHistory(arr);\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n                setIsLoading(false);\r\n                setErrorMessage(resMessage);\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleNextImage = () => {\r\n        const iid = props.match.params.image_id;\r\n        var nextImageId = null;\r\n        if (imageInfos && imageInfos.length > 0) {\r\n            for (let i = 0; i < imageInfos.length - 1; i++) {\r\n                if (imageInfos[i].image_id === iid) {\r\n                    nextImageId = imageInfos[i + 1].image_id;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (nextImageId) {\r\n            props.history.push(`/edit_image/${nextImageId}`);\r\n        }\r\n    }\r\n\r\n    const handlePrevImage = () => {\r\n        const iid = props.match.params.image_id;\r\n        var prevImageId = null;\r\n        if (imageInfos && imageInfos.length > 0) {\r\n            for (let i = 1; i < imageInfos.length; i++) {\r\n                if (imageInfos[i].image_id === iid) {\r\n                    prevImageId = imageInfos[i - 1].image_id;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (prevImageId) {\r\n            props.history.push(`/edit_image/${prevImageId}`);\r\n        }\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum) => {\r\n        setPageNumber(pagenum);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (imageHistory) {\r\n            const total = Math.ceil(imageHistory.length / itemsPerPage);\r\n            setTotalPage(total);\r\n            isRotate && setPageNumber(total);\r\n        }\r\n    })\r\n\r\n    // search\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            const keyword = e.target.value;\r\n\r\n            const data = orginImageHistory.filter(item => {\r\n                let fileName = item.file_name + item.description;\r\n                fileName = fileName.trim().toLowerCase();\r\n\r\n                if (fileName.includes(keyword)) {\r\n                    return 1;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n\r\n            setImageHistory(data);\r\n\r\n            const total = Math.ceil(data.length / itemsPerPage);\r\n            setTotalPage(total);\r\n            setPageNumber(1);\r\n        }\r\n    }\r\n\r\n    const handleImageDownload = (url, imageid) => {\r\n        imageService.downloadImage(url).then((res) => {\r\n            downloadFile(res.data, imageid + '.jpg')\r\n        }).catch((err) => {\r\n            setIsLoading(false);\r\n            err.response.data.text().then(res => {\r\n                let eMessage = JSON.parse(res).message\r\n                setErrorMessage(eMessage);\r\n                setTimeout(() => {\r\n                    setErrorMessage('');\r\n                }, 5000);\r\n            })\r\n        })\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className='col-lg-6  mb-5 mb-lg-0  pb-4 pb-lg-0'>\r\n                    <div className=\"mr-3 url-image\" style={{ width: \"500px\", height: \"400px\" }}>\r\n                        <Stage width={500} height={400}>\r\n                            <Layer>\r\n                                <URLImage src={imageSrc} width={500} height={400} />\r\n                            </Layer>\r\n                        </Stage>\r\n                        <div className='text-center mt-4'>\r\n                            <div>\r\n                                <Button className=\"btn-circles mr-1\" href='/upload_image'>\r\n                                    Go Back\r\n                                </Button>\r\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handlePrevImage() }}>Prev</Button>\r\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handleNextImage() }}>Next</Button>\r\n                            </div>\r\n                            <div>\r\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleRotateImage} disabled={lastId !== imageId || isLoading}>\r\n                                    {isLoading && (\r\n                                        <span className=\"spinner-border spinner-border-sm\"></span>\r\n                                    )}\r\n                                    <span>Rotate Image</span>\r\n                                </Button>\r\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleEditImage}>\r\n                                    Edit Description\r\n                                </Button>\r\n                                <Button variant=\"primary\" className=\"my-3 mr-2\"\r\n                                    onClick={() => handleImageDownload(`${back_end_server}/api/image/getImageFile/${imageId}?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&type=download`, imageId)}\r\n                                >                                    Download\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <MyVerticallyCenteredModal\r\n                        show={modalShow}\r\n                        onHide={() => setModalShow(false)}\r\n                        description={imageDescription}\r\n                        onAddDescription={handleAddDescription}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n                <div className='col-lg-6 mt-5 mt-lg-0'>\r\n                    <TextField\r\n                        className={classes.margin}\r\n                        placeholder=\"Search\"\r\n                        onKeyDown={doSomethingWith}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <SearchIcon />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <ImageHistory\r\n                        imageHistory={imageHistory}\r\n                        activeImageId={imageId}\r\n                        onRemove={removeImage}\r\n                        totalPage={totalPage}\r\n                        currentPage={pageNumber}\r\n                        itemsPerPage={itemsPerPage}\r\n                        itemClick={onClickHistory}\r\n                        onChangePageNumber={handleChangePageNumber}\r\n                    />\r\n                    <Pagination color=\"primary\" shape=\"rounded\" className=\"m-3\" count={totalPage} page={pageNumber} onChange={(event, val) => setPageNumber(val)} />\r\n                </div>\r\n            </div>\r\n            {\r\n                errorMessage &&\r\n                <div>\r\n                    <Alert\r\n                        severity='error'\r\n                        style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\r\n                        action={ errorMessage.includes('Not Enough Tokens') &&\r\n                            <MButton\r\n                                color=\"inherit\" size=\"medium\"\r\n                                onClick={() => {\r\n                                    history.push('/add_token_code');\r\n                                }}\r\n                            >\r\n                                Take More Tokens\r\n                        </MButton>\r\n                        }\r\n                    >\r\n                        {errorMessage}\r\n                    </Alert>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ImageHistory = ({ imageHistory, activeImageId, onRemove, itemClick, currentPage, itemsPerPage }) => {\r\n    const getIsActive = (image_id) =>\r\n    (image_id === activeImageId ?\r\n        \"dark\" :\r\n        \"\"\r\n    );\r\n\r\n    const getFileName = (filename) => {\r\n        let fname = filename.split(\"_\");\r\n        fname.shift();\r\n        return fname.join(\"_\");\r\n    }\r\n\r\n    const renderItem = (ih) => (\r\n        <ListGroup.Item key={ih.image_id} variant={getIsActive(ih.image_id)} className=\"cursor-pointer\" onClick={() => itemClick(ih.image_id)}>\r\n            <div>\r\n                <h6>File Name : <span>{getFileName(ih.file_name)}</span></h6>\r\n                <OverlayTrigger\r\n                    key={\"right\"}\r\n                    placement={\"right\"}\r\n                    overlay={\r\n                        <Tooltip id={`remove`}>Remove image</Tooltip>\r\n                    }\r\n                >\r\n                    <button type=\"button\" className=\"close\" onClick={() => { onRemove(ih.image_id) }}>\r\n                        <span aria-hidden=\"true\" style={{ color: \"red\" }}>×</span>\r\n                        <span className=\"sr-only\">Close</span>\r\n                    </button>\r\n                </OverlayTrigger>\r\n            </div>\r\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Image Id: </span><span>{ih.image_id}</span></small></p>\r\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Description: </span><span>{ih.description || \"No description\"}</span></small></p>\r\n            <p style={{ marginBottom: \"0px\" }}><span style={{ fontWeight: 500 }}>Source Image: </span><span>{ih.source_image_id || \"Main image\"}</span></p>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    return (\r\n        <ListGroup className=\"list-group\">\r\n            {imageHistory && imageHistory.length > 0 && (\r\n                imageHistory.map((ih, index) => {\r\n                    if ((currentPage - 1) * itemsPerPage <= index && (currentPage) * itemsPerPage > index)\r\n                        return renderItem(ih)\r\n                    else {\r\n                        return null\r\n                    }\r\n                })\r\n            )}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nclass URLImage extends React.Component {\r\n    state = {\r\n        image: null,\r\n        width: 0,\r\n        height: 0,\r\n    };\r\n    componentDidMount() {\r\n        this.loadImage();\r\n    }\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.src !== this.props.src) {\r\n            this.loadImage();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.image.removeEventListener('load', this.handleLoad);\r\n    }\r\n    loadImage() {\r\n        // save to \"this\" to remove \"load\" handler on unmount\r\n        this.image = new window.Image();\r\n        this.image.src = this.props.src;\r\n        this.image.addEventListener('load', this.handleLoad);\r\n    }\r\n    handleLoad = () => {\r\n        // after setState react-konva will update canvas and redraw the layer\r\n        // because \"image\" property is changed\r\n        this.setState({\r\n            image: this.image\r\n        });\r\n\r\n        const ratio = Math.min(Math.min(this.props.width, this.image.width) / this.image.width, Math.min(this.props.height, this.image.height) / this.image.height);\r\n\r\n        this.setState({\r\n            width: ratio * this.image.width,\r\n            height: ratio * this.image.height\r\n        })\r\n    };\r\n    render() {\r\n        return (\r\n            <Image\r\n                x={this.props.x}\r\n                y={this.props.y}\r\n                width={this.state.width}\r\n                height={this.state.height}\r\n                image={this.state.image}\r\n                ref={node => {\r\n                    this.imageNode = node;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditImage;\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\EditPPT.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\PPT\\PPTFileList.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ExecuteService.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\ReceivedPlaylist\\ReceivedPlaylist.js",["274","275","276","277","278","279","280"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InsertLink from '@material-ui/icons/InsertLink';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Image\r\n} from 'react-bootstrap';\r\n\r\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\r\nimport AppLayout from '../../../layouts/App';\r\n\r\nimport GlobalData from '../../../tools/GlobalData';\r\n\r\nconst front_end_server = GlobalData.front_end_server_ip + \":\" + GlobalData.front_end_server_port;\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <AppLayout>\r\n      <div className={classes.root}>\r\n        <IconButton\r\n          onClick={handleFirstPageButtonClick}\r\n          disabled={page === 0}\r\n          aria-label=\"first page\"\r\n        >\r\n          {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n        </IconButton>\r\n        <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n          {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleNextButtonClick}\r\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n          aria-label=\"next page\"\r\n        >\r\n          {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleLastPageButtonClick}\r\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n          aria-label=\"last page\"\r\n        >\r\n          {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n        </IconButton>\r\n      </div>\r\n    </AppLayout>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [data, setData] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\r\n  const [searchString, setSearchString] = useState('');\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) {\r\n      ReceivedPlaylistService.getAllPlaylist()\r\n        .then(async response => {\r\n          console.log('-->', response.data)\r\n          if (response.data && response.data.length > 0) {\r\n            setData(response.data);\r\n            setRows(response.data);\r\n          }\r\n        })\r\n      setIsLoaded(true)\r\n    }\r\n  })\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // playlistId\r\n  const handleDelete = (id) => {\r\n    if (window.confirm('Are you sure?')) {\r\n      ReceivedPlaylistService.removePlaylist(id)\r\n        .then(response => {\r\n          if (response.data.message === \"success\") {\r\n            window.location.reload();\r\n          }\r\n        }).catch((err) => {\r\n          const resMessage = (\r\n            err.response &&\r\n            err.response.data &&\r\n            err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n        });\r\n    }\r\n  }\r\n\r\n  // custom\r\n  const handleInsertPlaylist = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      addPlaylist();\r\n    }\r\n  }\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      let arr = [...data];\r\n      arr = arr.filter(item => (item.playlist_title + item.sender_name).includes(e.target.value.trim().toLowerCase()));\r\n      setRows(arr);\r\n    }\r\n  }\r\n\r\n  const handleAddPlaylist = () => {\r\n    addPlaylist();\r\n  }\r\n\r\n  function addPlaylist() {\r\n    const playlist_id = newPlaylistUrl.split('/playlist/')[1];\r\n    ReceivedPlaylistService.addPlaylist(playlist_id)\r\n      .then(response => {\r\n        if (response.data.message === \"success\") {\r\n          window.location.reload();\r\n        }\r\n        if (response.data.message === \"cannotregister\") {\r\n          setErrorText('The playlist is already registered.');\r\n          setTimeout(() => {\r\n            setErrorText('');\r\n          }, 2000);\r\n        }\r\n      }).catch((err) => {\r\n        const resMessage = (\r\n          err.response &&\r\n          err.response.data &&\r\n          err.response.data.message\r\n        ) || err.toString();\r\n\r\n        console.log(resMessage);\r\n      });\r\n\r\n    document.getElementById('input-with-icon-textfield').value = '';\r\n    setNewPlaylistUrl('');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {errorText &&\r\n        <h5 className=\"alert alert-danger\" style={{ position: 'absolute', bottom: 50, right: 50, padding: 40 }}>{errorText}</h5>\r\n      }\r\n      <Row className='mt-5'>\r\n        <Col md={5}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Paste playlist url.\"\r\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\r\n            onKeyDown={handleInsertPlaylist}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <InsertLink />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={4}>\r\n          <Button size='sm' onClick={handleAddPlaylist}>\r\n            Add Playlist\r\n          </Button>\r\n        </Col>\r\n        <Col md={3}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Search\"\r\n            onChange={(e) => setSearchString(e.target.value)}\r\n            onKeyDown={handleSearch}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">\r\n                  <SearchIcon />\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>No</TableCell>\r\n              <TableCell align=\"center\">Thumbnail</TableCell>\r\n              <TableCell align=\"center\">Title</TableCell>\r\n              <TableCell align=\"center\">Sender</TableCell>\r\n              <TableCell align=\"center\">Video Count</TableCell>\r\n              <TableCell align=\"center\">Status</TableCell>\r\n              <TableCell align=\"center\">Received Date</TableCell>\r\n              <TableCell align=\"center\">Operate</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(rowsPerPage > 0\r\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              : rows\r\n            ).map((row, index) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <a href={front_end_server + '/playlist/' + row.playlist_id} target=\"_blank\">\r\n                    { row.thumb_image && <Image src={ row.thumb_image } style={{ objectFit: 'cover', width: '100%' }} /> || <VideoLibraryIcon /> }\r\n                  </a>\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <a href={front_end_server + '/playlist/' + row.playlist_id} target=\"_blank\">\r\n                    {row.playlist_title}\r\n                  </a>\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.sender_name}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.video_count}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.playlist_status == '1' ? 'Public' : 'Private'}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.dateTime}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <Button size='sm' style={{ marginRight: 5 }} href={front_end_server + '/playlist/' + row.playlist_id} target='_blank' block>Open</Button>\r\n                  <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)} block>Delete</Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ height: 53 * emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                colSpan={7}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\UploadVideo.js",["281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\User\\Admin\\blog\\Blogs.js",["303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\Playlist.js",["322","323","324","325","326","327","328","329"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\VideoList.js",["330","331"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Playlist\\BlogPlaylist.js",["332","333","334","335","336","337","338","339"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\auth-header.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\category.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\user.service.js",["340"],"import axios from 'axios';\r\nimport authHeader from './auth-header';\r\nimport Auth from \"./auth.service\";\r\n\r\nimport GlobalData from '../tools/GlobalData';\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/user/';\r\n//const API_URL = `http://1-58.69.222.102:3030/api/user/`;\r\n\r\nconst getPublicContent=()=>{\r\n    return axios.get(`${API_URL}all`);\r\n}\r\nconst getUserBoard=()=>{\r\n    return axios.get(`${API_URL}user`, {headers: authHeader()});\r\n}\r\nconst getModeratorBoard=()=>{\r\n    return axios.get(`${API_URL}mod`, {headers:authHeader()});\r\n}\r\nconst getAdminBoard=()=>{\r\n    return axios.get(`${API_URL}admin`, {headers:authHeader()});\r\n}\r\nconst addTokens = (ss) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}add_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\r\n}\r\nconst addTokenCode=(token_code)=>{\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}add_token_code?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_code=${token_code}`);\r\n}\r\nconst getPrepaidTokens = () => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}get_prepaid_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\r\n}\r\nconst addPrepaidToken = (newTokenCount) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.post(`${API_URL}add_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_count=${newTokenCount}`);\r\n}\r\nconst deletePrepaidToken = (id) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.post(`${API_URL}delete_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&id=${id}`);\r\n}\r\nexport default {\r\n    getPublicContent,\r\n    getUserBoard,\r\n    getModeratorBoard,\r\n    getAdminBoard,\r\n    addTokens,\r\n    addTokenCode,\r\n    getPrepaidTokens,\r\n    addPrepaidToken,\r\n    deletePrepaidToken,\r\n};\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\downloadfile.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\file-upload.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\ppt.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\execute.service.js",["341"],"import axios from 'axios';\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nimport GlobalData from '../tools/GlobalData';\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/execute_service?';\r\n//const API_URL = `http://1-58.69.222.102:3030/api/execute_service?`;\r\n//const API_URL = `http://local--host:3030/api/execute_service?`;\r\n\r\nconst getWeather = (cityName)=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_weather&user_id=${user.user_id}&user_key=${user.access_key}&city=${cityName}`);\r\n}\r\n\r\nconst getTokenHistory=()=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_tokenHistory&user_id=${user.user_id}`);\r\n}\r\n\r\nconst getDashboard=()=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_dashboard&user_id=${user.user_id}`);\r\n}\r\n\r\nexport default {\r\n    getWeather,\r\n    getTokenHistory,\r\n    getDashboard,\r\n};\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\image.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\layouts\\App.js",["342","343","344"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\tools\\GlobalData.js",["345"],"export default {\r\n  //dev localhost\r\n  back_end_server_ip: 'http://localhost',\r\n  front_end_server_ip: 'http://localhost',\r\n  //dev Orange\r\n  //back_end_server_ip: 'http://192.168.8.140',\r\n  //front_end_server_ip: 'http://192.168.8.140',\r\n  //dev Vodafone\r\n  //back_end_server_ip: 'http://192.168.43.44', //vodafone\r\n  //front_end_server_ip: 'http://192.168.43.44',\r\n  //dev ports\r\n  front_end_server_port: '3000',\r\n  back_end_server_port:  '3030',\r\n\r\n  //production\r\n  //back_end_server_ip: 'https://aic.space',\r\n  //back_end_server_port: '3030',\r\n  //front_end_server_ip: 'https://aic.space',\r\n  //front_end_server_port: '443',\r\n\r\n  //production OVH 2\r\n  //back_end_server_ip: 'http://144.217.162.34',\r\n  //back_end_server_port: '3030',\r\n  //front_end_server_ip: 'http://144.217.162.34',\r\n  //front_end_server_port: '3000',\r\n  //front_end_server_port: '443', //after SSL install\r\n\r\n  //old-back_end_server_ip: 'https://158.69.222.102',\r\n  //old-back_end_server_ip: 'http://127.0.0.1',\r\n\r\n  modal_video_player_width: 'auto',\r\n  modal_video_player_height: '100%'\r\n};\r\n","F:\\2021\\Videnda-AI\\source\\frontend\\src\\layouts\\Home.js",["346","347","348"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Common\\SelectOptions.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\playlist.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\blog.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\VideoPlayer.js",["349","350","351","352","353"],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\video.service.js",[],"F:\\2021\\Videnda-AI\\source\\frontend\\src\\components\\Service\\Video\\EditDialog.js",["354","355","356","357"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputIcon from '@material-ui/icons/Create';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst EditDialog = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n        <Modal\r\n            show={props.show}\r\n            onHide={props.onHide}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n          <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                  Edit Title & Description\r\n              </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p><b>Manual title</b></p>\r\n            <TextField\r\n                className={classes.linkInput}\r\n                id=\"input-with-icon-textfield-top\"\r\n                placeholder=\"Input manual title.\"\r\n                value={props.manualTitle}\r\n                onChange={(e) => props.setManualTitle(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <p><b>Manual description</b></p>\r\n            <TextField\r\n                className={classes.linkInput}\r\n                id=\"input-with-icon-textfield-top\"\r\n                placeholder=\"Input manual description.\"\r\n                multiline={true}\r\n                rows={3}\r\n                value={props.manualDescription}\r\n                onChange={(e) => props.setManualDescription(e.target.value)}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"success\" onClick={props.onSave}>Save</Button>\r\n              <Button variant=\"primary\" onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n      </Modal>\r\n  );\r\n}\r\n\r\nexport default EditDialog;","F:\\2021\\Videnda-AI\\source\\frontend\\src\\services\\received-playlist.service.js",[],{"ruleId":"358","severity":1,"message":"359","line":163,"column":56,"nodeType":"360","endLine":163,"endColumn":87},{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","severity":1,"message":"366","line":133,"column":1,"nodeType":"367","endLine":145,"endColumn":3},{"ruleId":"368","severity":1,"message":"369","line":17,"column":12,"nodeType":"370","messageId":"371","endLine":17,"endColumn":19},{"ruleId":"372","severity":1,"message":"373","line":72,"column":41,"nodeType":"360","endLine":72,"endColumn":120},{"ruleId":"374","severity":1,"message":"375","line":81,"column":131,"nodeType":"376","messageId":"377","endLine":81,"endColumn":133},{"ruleId":"378","severity":1,"message":"379","line":45,"column":46,"nodeType":"380","messageId":"381","endLine":45,"endColumn":48},{"ruleId":"378","severity":1,"message":"379","line":45,"column":103,"nodeType":"380","messageId":"381","endLine":45,"endColumn":105},{"ruleId":"378","severity":1,"message":"379","line":61,"column":36,"nodeType":"380","messageId":"381","endLine":61,"endColumn":38},{"ruleId":"378","severity":1,"message":"379","line":65,"column":51,"nodeType":"380","messageId":"381","endLine":65,"endColumn":53},{"ruleId":"374","severity":1,"message":"375","line":75,"column":26,"nodeType":"376","messageId":"377","endLine":75,"endColumn":28},{"ruleId":"368","severity":1,"message":"382","line":16,"column":12,"nodeType":"370","messageId":"371","endLine":16,"endColumn":20},{"ruleId":"383","severity":1,"message":"384","line":24,"column":8,"nodeType":"385","endLine":24,"endColumn":10,"suggestions":"386"},{"ruleId":"378","severity":1,"message":"379","line":29,"column":38,"nodeType":"380","messageId":"381","endLine":29,"endColumn":40},{"ruleId":"374","severity":1,"message":"375","line":29,"column":101,"nodeType":"376","messageId":"377","endLine":29,"endColumn":103},{"ruleId":"378","severity":1,"message":"379","line":29,"column":107,"nodeType":"380","messageId":"381","endLine":29,"endColumn":109},{"ruleId":"378","severity":1,"message":"379","line":46,"column":36,"nodeType":"380","messageId":"381","endLine":46,"endColumn":38},{"ruleId":"378","severity":1,"message":"379","line":46,"column":129,"nodeType":"380","messageId":"381","endLine":46,"endColumn":131},{"ruleId":"368","severity":1,"message":"387","line":30,"column":8,"nodeType":"370","messageId":"371","endLine":30,"endColumn":31},{"ruleId":"368","severity":1,"message":"388","line":117,"column":10,"nodeType":"370","messageId":"371","endLine":117,"endColumn":22},{"ruleId":"383","severity":1,"message":"389","line":122,"column":3,"nodeType":"370","endLine":122,"endColumn":12,"suggestions":"390"},{"ruleId":"374","severity":1,"message":"375","line":184,"column":31,"nodeType":"376","messageId":"377","endLine":184,"endColumn":33},{"ruleId":"374","severity":1,"message":"375","line":291,"column":49,"nodeType":"376","messageId":"377","endLine":291,"endColumn":51},{"ruleId":"374","severity":1,"message":"375","line":291,"column":89,"nodeType":"376","messageId":"377","endLine":291,"endColumn":91},{"ruleId":"374","severity":1,"message":"375","line":294,"column":30,"nodeType":"376","messageId":"377","endLine":294,"endColumn":32},{"ruleId":"374","severity":1,"message":"375","line":299,"column":30,"nodeType":"376","messageId":"377","endLine":299,"endColumn":32},{"ruleId":"383","severity":1,"message":"391","line":45,"column":6,"nodeType":"385","endLine":45,"endColumn":8,"suggestions":"392"},{"ruleId":"374","severity":1,"message":"375","line":66,"column":69,"nodeType":"376","messageId":"377","endLine":66,"endColumn":71},{"ruleId":"393","severity":1,"message":"394","line":152,"column":12,"nodeType":"360","endLine":152,"endColumn":79},{"ruleId":"368","severity":1,"message":"395","line":27,"column":3,"nodeType":"370","messageId":"371","endLine":27,"endColumn":8},{"ruleId":"368","severity":1,"message":"396","line":31,"column":8,"nodeType":"370","messageId":"371","endLine":31,"endColumn":19},{"ruleId":"368","severity":1,"message":"388","line":179,"column":12,"nodeType":"370","messageId":"371","endLine":179,"endColumn":24},{"ruleId":"368","severity":1,"message":"397","line":180,"column":23,"nodeType":"370","messageId":"371","endLine":180,"endColumn":35},{"ruleId":"383","severity":1,"message":"389","line":196,"column":5,"nodeType":"370","endLine":196,"endColumn":14,"suggestions":"398"},{"ruleId":"399","severity":1,"message":"400","line":218,"column":44,"nodeType":"401","messageId":"402","endLine":218,"endColumn":46},{"ruleId":"374","severity":1,"message":"375","line":219,"column":39,"nodeType":"376","messageId":"377","endLine":219,"endColumn":41},{"ruleId":"374","severity":1,"message":"375","line":221,"column":50,"nodeType":"376","messageId":"377","endLine":221,"endColumn":52},{"ruleId":"378","severity":1,"message":"379","line":221,"column":55,"nodeType":"380","messageId":"381","endLine":221,"endColumn":57},{"ruleId":"378","severity":1,"message":"379","line":221,"column":85,"nodeType":"380","messageId":"381","endLine":221,"endColumn":87},{"ruleId":"374","severity":1,"message":"375","line":280,"column":63,"nodeType":"376","messageId":"377","endLine":280,"endColumn":65},{"ruleId":"374","severity":1,"message":"375","line":299,"column":43,"nodeType":"376","messageId":"377","endLine":299,"endColumn":45},{"ruleId":"372","severity":1,"message":"373","line":379,"column":57,"nodeType":"360","endLine":379,"endColumn":128},{"ruleId":"372","severity":1,"message":"373","line":159,"column":9,"nodeType":"360","endLine":159,"endColumn":63},{"ruleId":"368","severity":1,"message":"403","line":158,"column":36,"nodeType":"370","messageId":"371","endLine":158,"endColumn":44},{"ruleId":"383","severity":1,"message":"404","line":203,"column":8,"nodeType":"385","endLine":203,"endColumn":10,"suggestions":"405"},{"ruleId":"399","severity":1,"message":"406","line":598,"column":62,"nodeType":"401","messageId":"407","endLine":598,"endColumn":64},{"ruleId":"368","severity":1,"message":"408","line":20,"column":22,"nodeType":"370","messageId":"371","endLine":20,"endColumn":41},{"ruleId":"368","severity":1,"message":"388","line":123,"column":10,"nodeType":"370","messageId":"371","endLine":123,"endColumn":22},{"ruleId":"383","severity":1,"message":"389","line":128,"column":3,"nodeType":"370","endLine":128,"endColumn":12,"suggestions":"409"},{"ruleId":"393","severity":1,"message":"394","line":286,"column":19,"nodeType":"360","endLine":286,"endColumn":95},{"ruleId":"378","severity":1,"message":"379","line":287,"column":39,"nodeType":"380","messageId":"381","endLine":287,"endColumn":41},{"ruleId":"378","severity":1,"message":"379","line":287,"column":122,"nodeType":"380","messageId":"381","endLine":287,"endColumn":124},{"ruleId":"393","severity":1,"message":"394","line":291,"column":19,"nodeType":"360","endLine":291,"endColumn":95},{"ruleId":"374","severity":1,"message":"375","line":302,"column":40,"nodeType":"376","messageId":"377","endLine":302,"endColumn":42},{"ruleId":"368","severity":1,"message":"410","line":23,"column":5,"nodeType":"370","messageId":"371","endLine":23,"endColumn":9},{"ruleId":"383","severity":1,"message":"411","line":169,"column":8,"nodeType":"385","endLine":169,"endColumn":10,"suggestions":"412"},{"ruleId":"368","severity":1,"message":"403","line":205,"column":47,"nodeType":"370","messageId":"371","endLine":205,"endColumn":55},{"ruleId":"374","severity":1,"message":"375","line":481,"column":57,"nodeType":"376","messageId":"377","endLine":481,"endColumn":59},{"ruleId":"374","severity":1,"message":"375","line":497,"column":59,"nodeType":"376","messageId":"377","endLine":497,"endColumn":61},{"ruleId":"368","severity":1,"message":"413","line":511,"column":14,"nodeType":"370","messageId":"371","endLine":511,"endColumn":18},{"ruleId":"374","severity":1,"message":"375","line":519,"column":59,"nodeType":"376","messageId":"377","endLine":519,"endColumn":61},{"ruleId":"374","severity":1,"message":"375","line":525,"column":52,"nodeType":"376","messageId":"377","endLine":525,"endColumn":54},{"ruleId":"374","severity":1,"message":"375","line":531,"column":53,"nodeType":"376","messageId":"377","endLine":531,"endColumn":55},{"ruleId":"374","severity":1,"message":"375","line":532,"column":53,"nodeType":"376","messageId":"377","endLine":532,"endColumn":55},{"ruleId":"374","severity":1,"message":"375","line":533,"column":59,"nodeType":"376","messageId":"377","endLine":533,"endColumn":61},{"ruleId":"374","severity":1,"message":"414","line":541,"column":28,"nodeType":"376","messageId":"377","endLine":541,"endColumn":30},{"ruleId":"374","severity":1,"message":"375","line":542,"column":81,"nodeType":"376","messageId":"377","endLine":542,"endColumn":83},{"ruleId":"374","severity":1,"message":"375","line":553,"column":59,"nodeType":"376","messageId":"377","endLine":553,"endColumn":61},{"ruleId":"399","severity":1,"message":"400","line":560,"column":31,"nodeType":"401","messageId":"402","endLine":560,"endColumn":33},{"ruleId":"374","severity":1,"message":"375","line":561,"column":21,"nodeType":"376","messageId":"377","endLine":561,"endColumn":23},{"ruleId":"415","severity":1,"message":"416","line":667,"column":17,"nodeType":"417","endLine":667,"endColumn":50},{"ruleId":"399","severity":1,"message":"400","line":691,"column":29,"nodeType":"401","messageId":"402","endLine":691,"endColumn":31},{"ruleId":"378","severity":1,"message":"379","line":696,"column":26,"nodeType":"380","messageId":"381","endLine":696,"endColumn":28},{"ruleId":"378","severity":1,"message":"379","line":696,"column":63,"nodeType":"380","messageId":"381","endLine":696,"endColumn":65},{"ruleId":"372","severity":1,"message":"373","line":708,"column":18,"nodeType":"360","endLine":718,"endColumn":11},{"ruleId":"368","severity":1,"message":"418","line":786,"column":11,"nodeType":"370","messageId":"371","endLine":786,"endColumn":26},{"ruleId":"368","severity":1,"message":"419","line":3,"column":10,"nodeType":"370","messageId":"371","endLine":3,"endColumn":18},{"ruleId":"368","severity":1,"message":"420","line":4,"column":8,"nodeType":"370","messageId":"371","endLine":4,"endColumn":21},{"ruleId":"368","severity":1,"message":"395","line":31,"column":3,"nodeType":"370","messageId":"371","endLine":31,"endColumn":8},{"ruleId":"368","severity":1,"message":"396","line":35,"column":8,"nodeType":"370","messageId":"371","endLine":35,"endColumn":19},{"ruleId":"372","severity":1,"message":"373","line":156,"column":52,"nodeType":"360","endLine":156,"endColumn":130},{"ruleId":"368","severity":1,"message":"388","line":211,"column":12,"nodeType":"370","messageId":"371","endLine":211,"endColumn":24},{"ruleId":"368","severity":1,"message":"397","line":212,"column":23,"nodeType":"370","messageId":"371","endLine":212,"endColumn":35},{"ruleId":"368","severity":1,"message":"421","line":228,"column":12,"nodeType":"370","messageId":"371","endLine":228,"endColumn":31},{"ruleId":"383","severity":1,"message":"389","line":230,"column":5,"nodeType":"370","endLine":230,"endColumn":14,"suggestions":"422"},{"ruleId":"399","severity":1,"message":"400","line":255,"column":44,"nodeType":"401","messageId":"402","endLine":255,"endColumn":46},{"ruleId":"374","severity":1,"message":"375","line":256,"column":47,"nodeType":"376","messageId":"377","endLine":256,"endColumn":49},{"ruleId":"374","severity":1,"message":"375","line":258,"column":50,"nodeType":"376","messageId":"377","endLine":258,"endColumn":52},{"ruleId":"378","severity":1,"message":"379","line":258,"column":55,"nodeType":"380","messageId":"381","endLine":258,"endColumn":57},{"ruleId":"378","severity":1,"message":"379","line":258,"column":85,"nodeType":"380","messageId":"381","endLine":258,"endColumn":87},{"ruleId":"399","severity":1,"message":"400","line":306,"column":38,"nodeType":"401","messageId":"402","endLine":306,"endColumn":40},{"ruleId":"399","severity":1,"message":"400","line":309,"column":40,"nodeType":"401","messageId":"402","endLine":309,"endColumn":42},{"ruleId":"374","severity":1,"message":"375","line":335,"column":50,"nodeType":"376","messageId":"377","endLine":335,"endColumn":52},{"ruleId":"374","severity":1,"message":"375","line":359,"column":43,"nodeType":"376","messageId":"377","endLine":359,"endColumn":45},{"ruleId":"372","severity":1,"message":"373","line":439,"column":59,"nodeType":"360","endLine":439,"endColumn":132},{"ruleId":"378","severity":1,"message":"379","line":194,"column":26,"nodeType":"380","messageId":"381","endLine":194,"endColumn":28},{"ruleId":"378","severity":1,"message":"379","line":194,"column":63,"nodeType":"380","messageId":"381","endLine":194,"endColumn":65},{"ruleId":"399","severity":1,"message":"400","line":445,"column":31,"nodeType":"401","messageId":"402","endLine":445,"endColumn":33},{"ruleId":"378","severity":1,"message":"379","line":534,"column":67,"nodeType":"380","messageId":"381","endLine":534,"endColumn":69},{"ruleId":"378","severity":1,"message":"379","line":534,"column":173,"nodeType":"380","messageId":"381","endLine":534,"endColumn":175},{"ruleId":"399","severity":1,"message":"400","line":624,"column":29,"nodeType":"401","messageId":"402","endLine":624,"endColumn":31},{"ruleId":"378","severity":1,"message":"379","line":629,"column":26,"nodeType":"380","messageId":"381","endLine":629,"endColumn":28},{"ruleId":"378","severity":1,"message":"379","line":629,"column":63,"nodeType":"380","messageId":"381","endLine":629,"endColumn":65},{"ruleId":"378","severity":1,"message":"379","line":99,"column":57,"nodeType":"380","messageId":"381","endLine":99,"endColumn":59},{"ruleId":"378","severity":1,"message":"379","line":99,"column":103,"nodeType":"380","messageId":"381","endLine":99,"endColumn":105},{"ruleId":"423","severity":1,"message":"424","line":126,"column":33,"nodeType":"425","messageId":"426","endLine":126,"endColumn":65},{"ruleId":"378","severity":1,"message":"379","line":195,"column":26,"nodeType":"380","messageId":"381","endLine":195,"endColumn":28},{"ruleId":"378","severity":1,"message":"379","line":195,"column":63,"nodeType":"380","messageId":"381","endLine":195,"endColumn":65},{"ruleId":"378","severity":1,"message":"379","line":437,"column":67,"nodeType":"380","messageId":"381","endLine":437,"endColumn":69},{"ruleId":"378","severity":1,"message":"379","line":437,"column":173,"nodeType":"380","messageId":"381","endLine":437,"endColumn":175},{"ruleId":"399","severity":1,"message":"400","line":511,"column":29,"nodeType":"401","messageId":"402","endLine":511,"endColumn":31},{"ruleId":"378","severity":1,"message":"379","line":516,"column":26,"nodeType":"380","messageId":"381","endLine":516,"endColumn":28},{"ruleId":"378","severity":1,"message":"379","line":516,"column":63,"nodeType":"380","messageId":"381","endLine":516,"endColumn":65},{"ruleId":"365","severity":1,"message":"366","line":42,"column":1,"nodeType":"367","endLine":52,"endColumn":3},{"ruleId":"365","severity":1,"message":"366","line":25,"column":1,"nodeType":"367","endLine":29,"endColumn":3},{"ruleId":"368","severity":1,"message":"427","line":1,"column":16,"nodeType":"370","messageId":"371","endLine":1,"endColumn":24},{"ruleId":"368","severity":1,"message":"428","line":1,"column":26,"nodeType":"370","messageId":"371","endLine":1,"endColumn":35},{"ruleId":"368","severity":1,"message":"429","line":2,"column":10,"nodeType":"370","messageId":"371","endLine":2,"endColumn":20},{"ruleId":"365","severity":1,"message":"366","line":1,"column":1,"nodeType":"367","endLine":33,"endColumn":3},{"ruleId":"368","severity":1,"message":"427","line":1,"column":16,"nodeType":"370","messageId":"371","endLine":1,"endColumn":24},{"ruleId":"368","severity":1,"message":"428","line":1,"column":26,"nodeType":"370","messageId":"371","endLine":1,"endColumn":35},{"ruleId":"368","severity":1,"message":"429","line":2,"column":10,"nodeType":"370","messageId":"371","endLine":2,"endColumn":20},{"ruleId":"368","severity":1,"message":"428","line":5,"column":17,"nodeType":"370","messageId":"371","endLine":5,"endColumn":26},{"ruleId":"368","severity":1,"message":"430","line":43,"column":9,"nodeType":"370","messageId":"371","endLine":43,"endColumn":16},{"ruleId":"368","severity":1,"message":"431","line":43,"column":18,"nodeType":"370","messageId":"371","endLine":43,"endColumn":28},{"ruleId":"368","severity":1,"message":"432","line":83,"column":5,"nodeType":"370","messageId":"371","endLine":83,"endColumn":11},{"ruleId":"374","severity":1,"message":"375","line":173,"column":73,"nodeType":"376","messageId":"377","endLine":173,"endColumn":75},{"ruleId":"368","severity":1,"message":"428","line":1,"column":17,"nodeType":"370","messageId":"371","endLine":1,"endColumn":26},{"ruleId":"368","severity":1,"message":"427","line":1,"column":28,"nodeType":"370","messageId":"371","endLine":1,"endColumn":36},{"ruleId":"368","severity":1,"message":"433","line":4,"column":8,"nodeType":"370","messageId":"371","endLine":4,"endColumn":17},{"ruleId":"368","severity":1,"message":"434","line":5,"column":8,"nodeType":"370","messageId":"371","endLine":5,"endColumn":22},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["435"],"no-negated-in-lhs",["436"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'content' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'category' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategory'. Either include it or remove the dependency array.","ArrayExpression",["437"],"'ReceivedPlaylistService' is defined but never used.","'searchString' is assigned a value but never used.","React Hook useEffect contains a call to 'setIsLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [isLoaded] as a second argument to the useEffect Hook.",["438"],"React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["439"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'Badge' is defined but never used.","'UserService' is defined but never used.","'setErrorText' is assigned a value but never used.",["440"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'fileName' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'itemsPerPage'. Either include it or remove the dependency array.",["441"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'responsiveFontSizes' is defined but never used.",["442"],"'Form' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getAllVideos'. Either include it or remove the dependency array.",["443"],"'beep' is defined but never used.","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'renderItemTorma' is assigned a value but never used.","'CKEditor' is defined but never used.","'ClassicEditor' is defined but never used.","'blogPrivatePlaylist' is assigned a value but never used.",["444"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'useState' is defined but never used.","'useEffect' is defined but never used.","'useHistory' is defined but never used.","'seconds' is assigned a value but never used.","'setSeconds' is assigned a value but never used.","'status' is assigned a value but never used.","'InputIcon' is defined but never used.","'InputAdornment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"447","fix":"451"},{"desc":"452","fix":"453"},{"desc":"447","fix":"454"},{"desc":"455","fix":"456"},{"desc":"447","fix":"457"},"Update the dependencies array to be: [getCategory]",{"range":"458","text":"459"},"Add dependencies array: [isLoaded]",{"range":"460","text":"461"},"Update the dependencies array to be: [history]",{"range":"462","text":"463"},{"range":"464","text":"461"},"Update the dependencies array to be: [itemsPerPage]",{"range":"465","text":"466"},{"range":"467","text":"461"},"Update the dependencies array to be: [getAllVideos]",{"range":"468","text":"469"},{"range":"470","text":"461"},[700,702],"[getCategory]",[4494,4494],", [isLoaded]",[1422,1424],"[history]",[7838,7838],[7999,8001],"[itemsPerPage]",[4774,4774],[6288,6290],"[getAllVideos]",[9259,9259]]
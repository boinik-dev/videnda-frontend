[{"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\index.js":"1","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\App.js":"2","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Home.js":"4","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\NoMatch.js":"5","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\auth.service.js":"6","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\Register.js":"7","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\Login.js":"8","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\ChangePassword.js":"9","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\Deregister.js":"10","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\ForgotPassword.js":"11","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\VerifyEmail.js":"12","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\ResetPassword.js":"13","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\BoardUser.js":"14","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\Profile.js":"15","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\BoardModerator.js":"16","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\AddTokenCode.js":"17","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\ExecuteService.js":"18","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\Admin\\TokenManagement.js":"19","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\PPT\\PPTFileList.js":"20","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Image\\UploadImage.js":"21","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\PPT\\EditPPT.js":"22","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Image\\EditImage.js":"23","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\VideoList.js":"24","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\BoardAdmin.js":"25","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\Playlist.js":"26","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Video\\UploadVideo.js":"27","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\ReceivedPlaylist\\ReceivedPlaylist.js":"28","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\auth-header.js":"29","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\user.service.js":"30","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\playlist.service.js":"31","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\MyVerticallyCenteredModal.js":"32","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\image.service.js":"33","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\ppt.service.js":"34","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\received-playlist.service.js":"35","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\file-upload.service.js":"36","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\tools\\GlobalData.js":"37","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\video.service.js":"38","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Video\\MutipleSelect.js":"39","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Video\\EditDialog.js":"40","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\MutipleSelect.js":"41","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\execute.service.js":"42"},{"size":618,"mtime":1617537946431,"results":"43","hashOfConfig":"44"},{"size":6792,"mtime":1617537946379,"results":"45","hashOfConfig":"44"},{"size":375,"mtime":1617537946441,"results":"46","hashOfConfig":"44"},{"size":808,"mtime":1617537946391,"results":"47","hashOfConfig":"44"},{"size":291,"mtime":1617537946391,"results":"48","hashOfConfig":"44"},{"size":3181,"mtime":1617537946441,"results":"49","hashOfConfig":"44"},{"size":6674,"mtime":1617537946391,"results":"50","hashOfConfig":"44"},{"size":4150,"mtime":1617537946389,"results":"51","hashOfConfig":"44"},{"size":6936,"mtime":1617537946381,"results":"52","hashOfConfig":"44"},{"size":3788,"mtime":1617537946381,"results":"53","hashOfConfig":"44"},{"size":4299,"mtime":1617537946381,"results":"54","hashOfConfig":"44"},{"size":2087,"mtime":1617537946391,"results":"55","hashOfConfig":"44"},{"size":7839,"mtime":1617537946391,"results":"56","hashOfConfig":"44"},{"size":771,"mtime":1617537946431,"results":"57","hashOfConfig":"44"},{"size":2961,"mtime":1617537946431,"results":"58","hashOfConfig":"44"},{"size":786,"mtime":1617537946431,"results":"59","hashOfConfig":"44"},{"size":2680,"mtime":1617537946421,"results":"60","hashOfConfig":"44"},{"size":6583,"mtime":1617537946399,"results":"61","hashOfConfig":"44"},{"size":10966,"mtime":1617537946431,"results":"62","hashOfConfig":"44"},{"size":4401,"mtime":1617537946409,"results":"63","hashOfConfig":"44"},{"size":21931,"mtime":1617537946401,"results":"64","hashOfConfig":"44"},{"size":3882,"mtime":1617537946401,"results":"65","hashOfConfig":"44"},{"size":18285,"mtime":1617537946401,"results":"66","hashOfConfig":"44"},{"size":18286,"mtime":1617537946411,"results":"67","hashOfConfig":"44"},{"size":774,"mtime":1617537946431,"results":"68","hashOfConfig":"44"},{"size":26739,"mtime":1617537946411,"results":"69","hashOfConfig":"44"},{"size":33684,"mtime":1617537946421,"results":"70","hashOfConfig":"44"},{"size":11130,"mtime":1617537946419,"results":"71","hashOfConfig":"44"},{"size":248,"mtime":1617537946441,"results":"72","hashOfConfig":"44"},{"size":1993,"mtime":1617537946451,"results":"73","hashOfConfig":"44"},{"size":2156,"mtime":1617537946451,"results":"74","hashOfConfig":"44"},{"size":5782,"mtime":1617537946411,"results":"75","hashOfConfig":"44"},{"size":2007,"mtime":1617537946449,"results":"76","hashOfConfig":"44"},{"size":1458,"mtime":1617537946451,"results":"77","hashOfConfig":"44"},{"size":1896,"mtime":1617537946451,"results":"78","hashOfConfig":"44"},{"size":1311,"mtime":1617537946449,"results":"79","hashOfConfig":"44"},{"size":547,"mtime":1617537946461,"results":"80","hashOfConfig":"44"},{"size":2014,"mtime":1617537946451,"results":"81","hashOfConfig":"44"},{"size":2512,"mtime":1617537946421,"results":"82","hashOfConfig":"44"},{"size":2319,"mtime":1617537946421,"results":"83","hashOfConfig":"44"},{"size":2599,"mtime":1617537946411,"results":"84","hashOfConfig":"44"},{"size":820,"mtime":1617537946441,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v08esp",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185"},"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\index.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\App.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Home.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\NoMatch.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\auth.service.js",["186"],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nimport GlobalData from \"../tools/GlobalData\";\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/auth/';\r\n//const API_URL = `http://local--host:3030/api/auth/`;\r\n//const API_URL = 'http://15-8.69.222.102:3030/api/auth/';\r\n//const API_URL = 'http://127.0.0.1:3030/api/auth/';\r\n//const API_URL = ''\r\n\r\naxios.interceptors.response.use(\r\n    response => {\r\n        return response\r\n    },\r\n    error => {\r\n        if (!error.response) {\r\n            console.log(\"Connection to local-host failed err=\" + error.message);\r\n        }\r\n\r\n        return Promise.reject(error)\r\n    }\r\n);\r\n\r\nconst register = (username, email, password) => {\r\n  console.log(\"front console = register with axios, url=\" + API_URL);\r\n  try{\r\n   return axios.post( API_URL + \"signup\", {\r\n     username,\r\n     email,\r\n     password,\r\n   });\r\n  }catch( err){\r\n\tconsole.log( \"axios post error=\" + err.message);\r\n  }\r\n  return \"{error}\";\r\n};\r\n\r\nconst login = (email, password) => {\r\n  console.log(API_URL);\r\n  return axios\r\n    .post(API_URL + \"signin\", {\r\n      email,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst changePassword = (oldPassword, newPassword)=>{\r\n\r\n  let token = authHeader();\r\n\r\n  return axios\r\n    .post(API_URL+\"changePassword\",\r\n      {oldPassword, newPassword},\r\n      {headers: token}\r\n    ).then(response=>{\r\n      return response;\r\n    })\r\n}\r\n\r\nconst deregister = (email, password)=>{\r\n  let token = authHeader();\r\n  return axios\r\n    .post(API_URL+\"deregister\",\r\n      {email,password},\r\n      {headers: token}\r\n    ).then(response=>{\r\n      return response;\r\n    })\r\n}\r\n\r\nconst forgotPassword = (email)=>{\r\n  return axios\r\n    .post(API_URL+\"forgotPassword\",\r\n      {email}\r\n    ).then(response=>{\r\n      return response;\r\n    });\r\n}\r\nconst verifyEmail=(obj=>{\r\n  return axios\r\n    .post(API_URL+\"verifyEmail\",\r\n      obj\r\n    ).then(response=>{\r\n      return response;\r\n    });\r\n})\r\nconst resetPassword=(obj)=>{\r\n  return axios.post(\r\n    API_URL+\"resetPassword\",\r\n    obj\r\n  ).then(response=>{\r\n    return response;\r\n  })\r\n}\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n  return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nconst resendVerifyEmail = () =>{\r\n  const token = authHeader();\r\n  return axios.post(API_URL+\"resendVerifyEmail\", {}, {\r\n    headers: token\r\n  }).then(response=>{\r\n    return response\r\n  });\r\n}\r\n\r\nconst getUserProfile = ()=>{\r\n  const token = authHeader();\r\n  return axios.post(API_URL+\"getUserProfile\", {}, {\r\n    headers: token\r\n  }).then(response=>{\r\n    if (response.data.accessToken) {\r\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  })\r\n}\r\n\r\nexport default {\r\n  register,\r\n  login,\r\n  logout,\r\n  changePassword,\r\n  deregister,\r\n  forgotPassword,\r\n  resetPassword,\r\n  verifyEmail,\r\n  getCurrentUser,\r\n  resendVerifyEmail,\r\n  getUserProfile,\r\n};\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\Register.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\Login.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\ChangePassword.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\Deregister.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\ForgotPassword.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\VerifyEmail.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Auth\\ResetPassword.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\BoardUser.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\Profile.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\BoardModerator.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\AddTokenCode.js",["187"],"import React from \"react\";\r\nimport AuthService from \"../../services/auth.service\";\r\nimport UserService from \"../../services/user.service\";\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InsertEmoticon from '@material-ui/icons/InsertEmoticon';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\nconst AddTokenCode = () => {\r\n  const [currentUser, setCurrentUser] = React.useState(undefined);\r\n  const [message, setMessage] = React.useState('');\r\n  const [tokenCode, setTokenCode] = React.useState('');\r\n\r\n  React.useEffect(()=>{\r\n    AuthService.getUserProfile().then((response)=>{\r\n      setCurrentUser(response);  \r\n    });\r\n  }, [])\r\n\r\n\r\n  const handleAddTokens = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13 || e.target.innerText == 'Add Tokens') {\r\n      UserService.addTokenCode(tokenCode)\r\n        .then(response => {\r\n          if (response.data.message === \"success\") {\r\n              window.location.reload();\r\n          }\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n\r\n            setMessage(resMessage);\r\n            setTimeout(() => {\r\n              setMessage('');\r\n            }, 3000);\r\n        });\r\n\r\n      document.getElementById('input-with-icon-textfield').value = '';\r\n      setTokenCode('');\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Row  className='mt-5'>\r\n        <Col md={4}>\r\n          <TextField\r\n            style={{width: '100%'}}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Input code\"\r\n            onChange={(e) => setTokenCode(e.target.value)}\r\n            onKeyDown={handleAddTokens}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <InsertEmoticon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={8}>\r\n          <Button size='sm' onClick={handleAddTokens}>\r\n            Add Tokens\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      \r\n      { currentUser &&\r\n        <header className=\"jumbotron mt-4\">\r\n          <h3 className='mb-4'><strong>{currentUser.username}</strong></h3>\r\n          <p><strong>Current Tokens: </strong>{currentUser.nr_tokens}</p>\r\n        </header>\r\n      }\r\n\r\n      { message &&\r\n        <div className=\"alert alert-primary\">\r\n          {message}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTokenCode;","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\ExecuteService.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\Admin\\TokenManagement.js",["188","189","190","191","192","193","194","195"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Badge\r\n} from 'react-bootstrap';\r\n\r\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\r\nimport UserService from '../../../services/user.service';\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function TokenManagement() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [data, setData] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\r\n  const [searchString, setSearchString] = useState('');\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) {\r\n        UserService.getPrepaidTokens()\r\n            .then(async response => {\r\n                if(response.data && response.data.length > 0) {\r\n                    setData(response.data);\r\n                    setRows(response.data);\r\n                }\r\n            })\r\n\r\n        setIsLoaded(true)\r\n    }\r\n  })\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // playlistId\r\n  const handleDelete = (id) => {\r\n    UserService.deletePrepaidToken(id)\r\n      .then(response => {\r\n          if (response.data === \"success\") {\r\n              window.location.reload();\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n  }\r\n\r\n  // custom\r\n  const handleInsertPlaylist = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      addPlaylist();\r\n    }\r\n  }\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      let arr = [...data];\r\n      arr = arr.filter(item => (item.code).includes(e.target.value.trim().toLowerCase()));\r\n      setRows(arr);\r\n    }\r\n  }\r\n\r\n  const handleAddPlaylist = () => {\r\n    addPlaylist();\r\n  }\r\n\r\n  function addPlaylist() {\r\n      \r\n    if (newPlaylistUrl.trim() == '') {\r\n        return;\r\n    }\r\n    \r\n    let newTokenCount = Number(newPlaylistUrl.trim());\r\n    if (isNaN(newTokenCount) || newTokenCount <= 0) {\r\n        return;\r\n    }\r\n    \r\n    UserService.addPrepaidToken(newTokenCount)\r\n      .then(response => {\r\n          if (response.data === \"success\") {\r\n              window.location.reload();\r\n          }\r\n          if (response.data.message === \"cannotregister\") {\r\n              setErrorText('The playlist is already registered.');\r\n              setTimeout(() => {\r\n                setErrorText('');\r\n              }, 2000);\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n\r\n    document.getElementById('input-with-icon-textfield').value = '';\r\n    setNewPlaylistUrl('');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {errorText &&\r\n          <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\r\n      }\r\n      <Row  className='mt-5'>\r\n        <Col md={5}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Insert token count\"\r\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\r\n            onKeyDown={handleInsertPlaylist}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <CreateIcon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={4}>\r\n          <Button size='sm' onClick={handleAddPlaylist}>\r\n            Add New Token Code\r\n          </Button>\r\n        </Col>\r\n        <Col md={3}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Search token code\"\r\n            onChange={(e) => setSearchString(e.target.value)}\r\n            onKeyDown={handleSearch}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      \r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\">No</TableCell>\r\n              <TableCell align=\"center\">Token Code</TableCell>\r\n              <TableCell align=\"center\">Token Count</TableCell>\r\n              <TableCell align=\"center\">Token Status</TableCell>\r\n              <TableCell align=\"center\">Used Date</TableCell>\r\n              <TableCell align=\"center\">Operate</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(rowsPerPage > 0\r\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              : rows\r\n            ).map((row, index) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell style={{ width: 100 }} component=\"th\" scope=\"row\" align=\"center\">\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell style={{ width: 250 }} align=\"center\">\r\n                  {row.code}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.nr_tokens}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <Badge pill variant={row.used == 1 ? 'warning' : 'success'}>{row.used == '1' ? 'Used' : 'Unused'}</Badge>\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  { row.used == 1 &&\r\n                      row.updatedAt\r\n                  }\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  { row.used == 0 && \r\n                    <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)}>Delete</Button>\r\n                  }\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ height: 53 * emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                colSpan={7}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\PPT\\PPTFileList.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Image\\UploadImage.js",["196","197","198"],"import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    ProgressBar,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nimport UploadService from '../../../services/file-upload.service';\r\nimport ImageService from '../../../services/image.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nconst ImageUpload = () => {\r\n\r\n    const [currentFile, setCurrentFile] = React.useState(undefined);\r\n    const [previewImage, setPreviewImage] = React.useState(undefined);\r\n    const [progress, setProgress] = React.useState(0);\r\n    const [message, setMessage] = React.useState(\"\");\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('page') ? Number(localStorage.getItem('page')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [imageInfos, setImageInfos] = React.useState([]);\r\n    const [treeData, setTreeData] = useState('');\r\n    const [selected, setSelected] = useState('root');\r\n    const [imageData, setImageData] = useState([]);\r\n    const [alertVisible, setAlertVisible] = useState(false);\r\n    const [allImage, setAllImage] = useState([]);\r\n    const [expanded, setExpanded] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setExpand()\r\n    }, [])\r\n\r\n    const setExpand = () => {\r\n        // localStorage.getItem('selected') ? localStorage.getItem('selected')) :\r\n        const selectedNode = localStorage.getItem('selected');\r\n        let expand = ['root'];\r\n        if (selectedNode) {\r\n            let y, m ,d;\r\n            if (selectedNode.length === 4 && Number(selectedNode) > 1000) {\r\n                y = selectedNode\r\n                expand.push(y)\r\n            } else if (selectedNode.length === 7) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n            } else if (selectedNode.length === 10) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                d = selectedNode.split(\"-\")[2];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n                expand.push(y + '-' + m + '-' + d)\r\n            }\r\n        }\r\n        setExpanded(expand)\r\n    }\r\n\r\n    // set tree data\r\n    const setTree = (plain) => {\r\n        const data = {\r\n            id: 'root',\r\n            name: 'Images',\r\n            children: [],\r\n        };\r\n        plain.forEach(value => {\r\n            let [year, month, day] = new Date(value.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n\r\n            let index = data.children.findIndex(item => item.id === String(year))\r\n            if( index < 0) {\r\n                data.children.push({\r\n                    id: year.toString(),\r\n                    name: year.toString(),\r\n                    children: [{\r\n                        id: year + '-' + month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        }]\r\n                    }]\r\n                })\r\n            } else {\r\n                let month_index = data.children[index].children.findIndex(item => String(item.id) === year+'-'+month)\r\n                if (month_index < 0) {\r\n                    data.children[index].children.push({\r\n                        id: year+'-'+month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year+'-'+month+'-'+day,\r\n                            name: day,\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let day_index = data.children[index].children[month_index].children.findIndex(item => String(item.id) === year+'-'+month+'-'+day)\r\n                    if (day_index < 0) {\r\n                        data.children[index].children[month_index].children.push({\r\n                            id: year+'-'+month+'-'+day,\r\n                            name: day,\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            \r\n        });\r\n        \r\n        setTreeData(data);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        ImageService.getImageFiles()\r\n            .then(async response => {\r\n                if(response.data && response.data.length>0) {\r\n                    setImageData(response.data)\r\n                    setTree(response.data)\r\n                    \r\n                    ///////\r\n                    const nodeId = localStorage.getItem('selected');\r\n                    let data = await response.data.filter(item => {\r\n                        let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n        \r\n                        let selectedYear = '';\r\n                        let selectedMonth = '';\r\n                        let selectedDay = '';\r\n        \r\n                        let fileName = item.file_name + item.description;\r\n                        fileName = fileName.trim().toLowerCase();\r\n        \r\n                        if (nodeId === 'root') {\r\n                                return 1;    \r\n                        }\r\n        \r\n                        let selectedDate = '';\r\n                        if (String(nodeId).length === 4) {\r\n                            selectedYear = String(nodeId);\r\n                            if (selectedYear === year) {\r\n                                    return 1;    \r\n                            }\r\n                        }\r\n                    \r\n                        if (String(nodeId).length >= 6) {\r\n                            selectedDate = nodeId.split('-');\r\n                            selectedYear = selectedDate[0];\r\n                            selectedMonth = selectedDate[1];\r\n                            if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                                    return 1;    \r\n                            }\r\n                            if (String(nodeId).length >= 8) {\r\n                                selectedDay = nodeId.split('-')[2];\r\n                                if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                                        return 1;    \r\n                                } else {\r\n                                    return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    });\r\n                    \r\n                    setImageInfos(data);\r\n                    \r\n                    const total = Math.ceil(data.length/itemsPerPage);\r\n                    setTotalPages(total);\r\n                }\r\n            })\r\n        ImageService.getAllImageFiles()\r\n            .then(response => {\r\n                if(response.data && response.data.length>0) {\r\n                    setAllImage(response.data)\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const upload = () => {\r\n        setProgress(0);\r\n        UploadService.uploadImage(currentFile, (event) => {\r\n            setProgress(Math.round((100 * event.loaded) / event.total));\r\n        }).then(response => {\r\n            setMessage(response.data.message);\r\n            setAlertVisible(true)\r\n            setTimeout(() => {\r\n                setAlertVisible(false)\r\n            }, 2000)\r\n            return ImageService.getImageFiles();\r\n        }).then(files => {\r\n            if(files.data && files.data.length>0){\r\n                setImageData(files.data);\r\n                setTree(files.data);\r\n                setImageInfos(files.data);\r\n                const total = Math.ceil(files.data.length/itemsPerPage);\r\n                setTotalPages(total);\r\n            }\r\n        }).catch(error => {\r\n            const resMessage =\r\n                (error.response &&\r\n                    error.response.data &&\r\n                    error.response.data.message) ||\r\n                error.message ||\r\n                error.toString();\r\n\r\n            setMessage(resMessage);\r\n            setProgress(0);\r\n            // setMessage(\"Could not upload the image!\");\r\n            setCurrentFile(undefined);\r\n        })\r\n    }\r\n\r\n    const selectFile = (event) => {\r\n        if (event.target.files[0]) {\r\n            setCurrentFile(event.target.files[0]);\r\n            setPreviewImage(URL.createObjectURL(event.target.files[0]));\r\n            setProgress(0);\r\n            setMessage(\"\");\r\n        }\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum)=>{\r\n        setPageNumber(pagenum);\r\n        localStorage.setItem('page', pagenum)\r\n    }\r\n\r\n    const handleGoFirstPage = () =>{\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleGoLastPage = () =>{\r\n        setPageNumber(totalPages);\r\n    }\r\n\r\n    const handlePrevPage = () =>{\r\n        if(pageNumber>1){\r\n            const page = pageNumber - 1;\r\n            setPageNumber(page);\r\n        }\r\n    }\r\n\r\n    const handleNextPage = () =>{\r\n        if(pageNumber<totalPages){\r\n            const page = pageNumber + 1;\r\n            setPageNumber(page);\r\n        }\r\n    }\r\n\r\n    const handleChangeKeyword = (key) => {\r\n        //handleNodeSelect(null, selected ? selected : 'root', );\r\n        const keyword = key.trim().toLowerCase();\r\n        const nodeId = selected;\r\n        let data = allImage.filter(item => {\r\n            let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n\r\n            let selectedYear = '';\r\n            let selectedMonth = '';\r\n            let selectedDay = '';\r\n\r\n            let fileName = item.file_name + item.description;\r\n            fileName = fileName.trim().toLowerCase();\r\n\r\n            if (nodeId === 'root') {\r\n                if (keyword === \"\") {\r\n                    return 1;    \r\n                } else {\r\n                    if (fileName.includes(keyword)) {\r\n                        return 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let selectedDate = '';\r\n            if (String(nodeId).length === 4) {\r\n                selectedYear = String(nodeId);\r\n                if (selectedYear === year) {\r\n                    if (keyword === \"\") {\r\n                        return 1;    \r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        \r\n            if (String(nodeId).length >= 6) {\r\n                selectedDate = nodeId.split('-');\r\n                selectedYear = selectedDate[0];\r\n                selectedMonth = selectedDate[1];\r\n                if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                    if (keyword === \"\") {\r\n                        return 1;    \r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n                if (String(nodeId).length >= 8) {\r\n                    selectedDay = nodeId.split('-')[2];\r\n                    if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                        if (keyword === \"\") {\r\n                            return 1;    \r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n        \r\n        setImageInfos(data);\r\n    \r\n        const total = Math.ceil(data.length / itemsPerPage);\r\n        setTotalPages(total);\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleNodeSelect = (event, nodeId, keyword) => {\r\n        if (keyword === \"\") {\r\n            document.getElementById('input-with-icon-textfield').value = '';\r\n        }\r\n        {\r\n            setSelected(nodeId);        // e.g. 2020-3-5\r\n            localStorage.setItem(\"selected\", nodeId);\r\n            setExpand();\r\n            let data = imageData.filter(item => {\r\n                let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n\r\n                let selectedYear = '';\r\n                let selectedMonth = '';\r\n                let selectedDay = '';\r\n\r\n                let fileName = item.file_name + item.description;\r\n                fileName = fileName.trim().toLowerCase();\r\n\r\n                if (nodeId === 'root') {\r\n                    if (keyword === \"\") {\r\n                        return 1;    \r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let selectedDate = '';\r\n                if (String(nodeId).length === 4) {\r\n                    selectedYear = String(nodeId);\r\n                    if (selectedYear === year) {\r\n                        if (keyword === \"\") {\r\n                            return 1;    \r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            \r\n                if (String(nodeId).length >= 6) {\r\n                    selectedDate = nodeId.split('-');\r\n                    selectedYear = selectedDate[0];\r\n                    selectedMonth = selectedDate[1];\r\n                    if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                        if (keyword === \"\") {\r\n                            return 1;    \r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (String(nodeId).length >= 8) {\r\n                        selectedDay = nodeId.split('-')[2];\r\n                        if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                            if (keyword === \"\") {\r\n                                return 1;    \r\n                            } else {\r\n                                if (fileName.includes(keyword)) {\r\n                                    return 1;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n                return 0;\r\n            });\r\n            \r\n            setImageInfos(data);\r\n        \r\n            const total = Math.ceil(data.length / itemsPerPage);\r\n            setTotalPages(total);\r\n        }\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderTree = (nodes) => {\r\n        return (\r\n        <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\r\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n        </TreeItem>\r\n    )}\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"mb-3\">\r\n                <Col md={4}>\r\n                    <label className=\"btn btn-default p-0\">\r\n                        <input type=\"file\" accept=\"image/*\" onChange={selectFile} />\r\n                    </label>\r\n                    <Button size=\"sm\" style={{ width: \"100px\" }} disabled={!currentFile} onClick={upload}>\r\n                        Upload\r\n                    </Button>\r\n                </Col>\r\n                <Col md={8}>\r\n                    {previewImage && (\r\n                        <div className=\"text-center\">\r\n                            <Image className=\"preview\" src={previewImage} alt=\"\" />\r\n                        </div>\r\n                    )}\r\n                    {currentFile && (\r\n                        < ProgressBar className=\"my-3\" min={0} max={100} now={progress} label={`${progress}%`} striped />\r\n                    )}\r\n                    \r\n                    {message && (\r\n                        <Alert variant=\"success\" className=\"mt-3 upload_alert\" show={alertVisible}>\r\n                            <Alert.Heading>Upload Completed!</Alert.Heading>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n            </Row>\r\n            \r\n            <Row>\r\n                <Col md={3} className=\"card\">\r\n                    <TreeView\r\n                        className={classes.root}\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        //defaultExpanded={['root']}\r\n                        defaultExpandIcon={<ChevronRightIcon />}\r\n                        expanded={expanded}\r\n                        onNodeSelect={(even, nodeIds) => handleNodeSelect(even, nodeIds, \"\")}\r\n                    >\r\n                        {treeData && renderTree(treeData)}\r\n                    </TreeView>\r\n                </Col>\r\n                <Col md={9}>\r\n                    {imageInfos\r\n                    && <ImageList \r\n                        image_list={imageInfos}\r\n                        totalPages={totalPages}\r\n                        itemsPerPage={itemsPerPage}\r\n                        currentPage={pageNumber}\r\n                        onChangeKeyword={handleChangeKeyword}\r\n                        onChangePageNumber={handleChangePageNumber}\r\n                        onGoFirstPage={handleGoFirstPage}\r\n                        onGoLastPage={handleGoLastPage}\r\n                        onNextPage={handleNextPage}\r\n                        onPrevPage={handlePrevPage}\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nconst ImageList = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const getFileName = (filename) =>{\r\n        let fname = filename.split(\"_\");\r\n        fname.shift();\r\n        return fname.join(\"_\");\r\n    }\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.image_id}>\r\n            <Media>\r\n                <Image thumbnail src={data.thumb_url} className=\"mr-3\" />\r\n                <Media.Body>\r\n                    <h5><span>{`${data.id_counter}. File Name : `}</span><span>{getFileName(data.file_name)}</span></h5>\r\n                    <p style={{marginBottom: \"0px\"}}><span>Id : </span><span>{data.image_id}</span></p>\r\n                    <p style={{marginBottom: \"0px\"}}><small><span>Created Time : </span><span>{data.dateTime}</span></small></p>\r\n                    <p><small><span>Description : </span><span>{data.description || \"No description\"}</span></small></p>\r\n                    <Link to={`/edit_image/${data.image_id}`}><Button variant=\"success\" size=\"sm\" className=\"mr-3\">Edit Image</Button></Link>\r\n                    <Button variant=\"primary\" size=\"sm\" href={data.url}>Download</Button>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    const showPagenationItem = () => {\r\n\r\n        return (\r\n            <Pagination\r\n                color=\"primary\"\r\n                className=\"mt-3\"\r\n                shape=\"rounded\"\r\n                count={props.totalPages}\r\n                page={props.currentPage}\r\n                onChange={(event, val)=>props.onChangePageNumber(val)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            props.onChangeKeyword(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <TextField\r\n                    className={classes.margin}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search\"\r\n                    onKeyDown={doSomethingWith}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n                />\r\n                <h3 className=\"card-header\">List of Images</h3>\r\n                <ListGroup variant=\"flush\">\r\n                    {props.image_list\r\n                        && props.image_list.map((img, index) => {\r\n                            if((props.currentPage-1)*props.itemsPerPage <=index && (props.currentPage)*props.itemsPerPage > index )\r\n                            return renderItem(img)\r\n                        })}\r\n                </ListGroup>\r\n                {showPagenationItem()}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ImageUpload","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\PPT\\EditPPT.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Image\\EditImage.js",["199","200","201"],"import React, { useEffect, useState } from 'react';\r\nimport { Stage, Layer, Image } from 'react-konva';\r\nimport {\r\n    Button,\r\n    ListGroup,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n} from 'react-bootstrap';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\nimport ImageService from '../../../services/image.service';\r\nimport Auth from \"../../../services/auth.service\";\r\nimport GlobalData from '../../../tools/GlobalData';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst back_end_server = GlobalData.back_end_server_ip + \":\" + GlobalData.back_end_server_port;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n        // marginTop: 130\r\n    },\r\n}));\r\n\r\nconst MyVerticallyCenteredModal = (props) => {\r\n    const onSaveClick = (event) => {\r\n        props.onAddDescription(props.description)\r\n        props.onHide()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Input Description\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h5>📝 Please enter your description to the selected image.</h5>\r\n                <Form.Control as=\"textarea\" rows={3} name=\"description\" value={props.description} onChange={props.handleInputChange} />\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\r\n                <Button variant=\"primary\" onClick={onSaveClick}>Save changes</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nconst EditImage = (props) => {\r\n    const [imageInfos, setImageInfos] = React.useState(undefined);\r\n    const [imageId, setImageId] = React.useState('');\r\n    const [imageSrc, setImageSrc] = React.useState('');\r\n    const [imageDescription, setImageDescription] = useState('');\r\n    const [errorMessage, setErrorMessage] = React.useState('');\r\n    const [currentUser] = React.useState(Auth.getCurrentUser());\r\n    const [imageHistory, setImageHistory] = React.useState(undefined);\r\n    const [orginImageHistory, setOrginImageHistory] = useState(undefined);\r\n    const [lastId, setLastId] = React.useState('');\r\n    const [isLoading, setIsLoading] = React.useState(true);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [itemsPerPage] = useState(5);\r\n    const [totalPage, setTotalPage] = useState(1);\r\n    const [modalShow, setModalShow] = React.useState(false);\r\n    const [isRotate, setIsRotate] = useState(undefined)\r\n    const [isEditDescription, setIsEditDescription] = useState(undefined)\r\n\r\n    React.useEffect(() => {\r\n        ImageService.getImageFiles()\r\n            .then(files => {\r\n                setImageInfos(files.data);\r\n                const iid = props.match.params.image_id;\r\n                return ImageService.getImageHistory(iid);\r\n            }).then(response => {\r\n                setOrginImageHistory(response.data);\r\n                setImageHistory(response.data);\r\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n                setIsLoading(false);\r\n                setErrorMessage(resMessage);\r\n            });\r\n    }, [props]);\r\n\r\n    React.useEffect(() => {\r\n        if (imageHistory && imageHistory.length > 0) {\r\n            const first_id = imageHistory[0].image_id;\r\n            const last_id = imageHistory[imageHistory.length - 1].image_id;\r\n            setLastId(last_id);\r\n\r\n            if (isRotate && !isEditDescription) {\r\n                setImageId(last_id)\r\n                setTotalPage(Math.ceil(imageHistory.length / itemsPerPage));\r\n                setPageNumber(totalPage)\r\n                setIsRotate(false)\r\n            } else if (!isRotate && isEditDescription) {\r\n                setIsEditDescription(false)\r\n            } else {\r\n                setImageId(first_id)\r\n            }\r\n\r\n            setIsLoading(false);\r\n        }\r\n    }, [imageHistory]);\r\n\r\n    React.useEffect(() => {\r\n        setImageSrc(ImageService.getImage(imageId));\r\n    }, [imageId]);\r\n\r\n    const handleRotateImage = () => {\r\n        const payload = {\r\n            imageId: imageId,\r\n            degree: 90,\r\n            clock: true,\r\n        }\r\n        setIsLoading(true);\r\n        ImageService.rotateImage(payload).then(response => {\r\n            ImageService.getImageHistory(response.data.imageId).then(response => {\r\n                setImageHistory(response.data);\r\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\r\n            }).catch(err => {\r\n\r\n            })\r\n            setErrorMessage('');\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n            setIsLoading(false);\r\n            setErrorMessage(resMessage);\r\n        });\r\n        setIsRotate(true);\r\n    }\r\n\r\n    const handleEditImage = () => {\r\n        setModalShow(true);\r\n        setImageDescription(imageHistory.find(item => item.image_id === imageId).description)\r\n        setIsEditDescription(true)\r\n    }\r\n\r\n    const handleAddDescription = (desc) => {\r\n        const data = {\r\n            imageId: imageId,\r\n            imageDescription: desc\r\n        }\r\n        ImageService.addImageDescription(data).then(response => {\r\n            const index = imageHistory.findIndex(item => item.image_id === imageId)\r\n            const history = [...imageHistory];\r\n            history[index].description = desc;\r\n            setImageHistory(history);\r\n            setErrorMessage('');\r\n        }).catch((err) => {\r\n            const resMessage = (\r\n                err.response &&\r\n                err.response.data &&\r\n                err.response.data.message\r\n            ) || err.toString();\r\n            setIsLoading(false);\r\n            setErrorMessage(resMessage);\r\n        })\r\n    }\r\n\r\n    const handleInputChange = (e) => {\r\n        setImageDescription(e.target.value);\r\n    }\r\n\r\n    const onClickHistory = (id) => {\r\n        setImageId(id);\r\n    }\r\n\r\n    const removeImage = (image_id) => {\r\n        let arr = [...imageHistory];\r\n        if (arr.length === 1) {\r\n            const confirm = window.confirm(\"Are you sure remove the last image?\");\r\n            if (confirm) {\r\n                ImageService.removeImage(image_id).then((response) => {\r\n                    props.history.push(\"/upload_image\");\r\n                }).catch((err) => {\r\n                    const resMessage = (\r\n                        err.response &&\r\n                        err.response.data &&\r\n                        err.response.data.message\r\n                    ) || err.toString();\r\n                    setIsLoading(false);\r\n                    setErrorMessage(resMessage);\r\n                });\r\n            }\r\n        } else {\r\n            ImageService.removeImage(image_id).then((response) => {\r\n                arr = arr.filter(item => item.image_id !== image_id)\r\n                setImageHistory(arr);\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n                setIsLoading(false);\r\n                setErrorMessage(resMessage);\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleNextImage = () => {\r\n        const iid = props.match.params.image_id;\r\n        var nextImageId = null;\r\n        if (imageInfos && imageInfos.length > 0) {\r\n            for (let i = 0; i < imageInfos.length - 1; i++) {\r\n                if (imageInfos[i].image_id === iid) {\r\n                    nextImageId = imageInfos[i + 1].image_id;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (nextImageId) {\r\n            props.history.push(`/edit_image/${nextImageId}`);\r\n        }\r\n    }\r\n\r\n    const handlePrevImage = () => {\r\n        const iid = props.match.params.image_id;\r\n        var prevImageId = null;\r\n        if (imageInfos && imageInfos.length > 0) {\r\n            for (let i = 1; i < imageInfos.length; i++) {\r\n                if (imageInfos[i].image_id === iid) {\r\n                    prevImageId = imageInfos[i - 1].image_id;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (prevImageId) {\r\n            props.history.push(`/edit_image/${prevImageId}`);\r\n        }\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum) => {\r\n        setPageNumber(pagenum);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (imageHistory) {\r\n            const total = Math.ceil(imageHistory.length / itemsPerPage);\r\n            setTotalPage(total);\r\n            isRotate && setPageNumber(total);\r\n        }\r\n    })\r\n\r\n    // search\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            const keyword = e.target.value;\r\n\r\n            const data = orginImageHistory.filter(item => {\r\n                let fileName = item.file_name + item.description;\r\n                fileName = fileName.trim().toLowerCase();\r\n\r\n                if (fileName.includes(keyword)) {\r\n                    return 1;\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n\r\n            setImageHistory(data);\r\n\r\n            const total = Math.ceil(data.length / itemsPerPage);\r\n            setTotalPage(total);\r\n            setPageNumber(1);\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                <div className='col-lg-6  mb-5 mb-lg-0  pb-4 pb-lg-0'>\r\n                    <div className=\"mr-3 url-image\" style={{ width: \"500px\", height: \"400px\" }}>\r\n                        <Stage width={500} height={400}>\r\n                            <Layer>\r\n                                <URLImage src={imageSrc} width={500} height={400} />\r\n                            </Layer>\r\n                        </Stage>\r\n                        <div className='text-center mt-4'>\r\n                            <div>\r\n                                <Button className=\"btn-circles mr-1\" href='/upload_image'>\r\n                                    Go Back\r\n                                </Button>\r\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handlePrevImage() }}>Prev</Button>\r\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handleNextImage() }}>Next</Button>\r\n                            </div>\r\n                            <div>\r\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleRotateImage} disabled={lastId !== imageId || isLoading}>\r\n                                    {isLoading && (\r\n                                        <span className=\"spinner-border spinner-border-sm\"></span>\r\n                                    )}\r\n                                    <span>Rotate Image</span>\r\n                                </Button>\r\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleEditImage}>\r\n                                    Edit Description\r\n                                </Button>\r\n                                <Button variant=\"primary\" className=\"my-3 mr-2\"\r\n                                    href={`${back_end_server}/api/image/getImageFile/${imageId}?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&type=download`}>\r\n                                    Download\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <MyVerticallyCenteredModal\r\n                        show={modalShow}\r\n                        onHide={() => setModalShow(false)}\r\n                        description={imageDescription}\r\n                        onAddDescription={handleAddDescription}\r\n                        onChange={handleInputChange}\r\n                    />\r\n                </div>\r\n                <div className='col-lg-6 mt-5 mt-lg-0'>\r\n                        <TextField\r\n                            className={classes.margin}\r\n                            placeholder=\"Search\"\r\n                            onKeyDown={doSomethingWith}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <SearchIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                        <ImageHistory\r\n                            imageHistory={imageHistory}\r\n                            activeImageId={imageId}\r\n                            onRemove={removeImage}\r\n                            totalPage={totalPage}\r\n                            currentPage={pageNumber}\r\n                            itemsPerPage={itemsPerPage}\r\n                            itemClick={onClickHistory}\r\n                            onChangePageNumber={handleChangePageNumber}\r\n                        />\r\n                        <Pagination color=\"primary\" shape=\"rounded\" className=\"m-3\" count={totalPage} page={pageNumber} onChange={(event, val) => setPageNumber(val)} />\r\n                </div>\r\n            </div>\r\n            {errorMessage && (\r\n                <div>\r\n                    {errorMessage}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ImageHistory = ({ imageHistory, activeImageId, onRemove, itemClick, currentPage, itemsPerPage }) => {\r\n    const getIsActive = (image_id) =>\r\n    (image_id === activeImageId ?\r\n        \"dark\" :\r\n        \"\"\r\n    );\r\n\r\n    const getFileName = (filename) => {\r\n        let fname = filename.split(\"_\");\r\n        fname.shift();\r\n        return fname.join(\"_\");\r\n    }\r\n\r\n    const renderItem = (ih) => (\r\n        <ListGroup.Item key={ih.image_id} variant={getIsActive(ih.image_id)} className=\"cursor-pointer\" onClick={() => itemClick(ih.image_id)}>\r\n            <div>\r\n                <h6>File Name : <span>{getFileName(ih.file_name)}</span></h6>\r\n                <OverlayTrigger\r\n                    key={\"right\"}\r\n                    placement={\"right\"}\r\n                    overlay={\r\n                        <Tooltip id={`remove`}>Remove image</Tooltip>\r\n                    }\r\n                >\r\n                    <button type=\"button\" className=\"close\" onClick={() => { onRemove(ih.image_id) }}>\r\n                        <span aria-hidden=\"true\" style={{ color: \"red\" }}>×</span>\r\n                        <span className=\"sr-only\">Close</span>\r\n                    </button>\r\n                </OverlayTrigger>\r\n            </div>\r\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Image Id: </span><span>{ih.image_id}</span></small></p>\r\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Description: </span><span>{ih.description || \"No description\"}</span></small></p>\r\n            <p style={{ marginBottom: \"0px\" }}><span style={{ fontWeight: 500 }}>Source Image: </span><span>{ih.source_image_id || \"Main image\"}</span></p>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    return (\r\n        <ListGroup className=\"list-group\">\r\n            {imageHistory && imageHistory.length > 0 && (\r\n                imageHistory.map((ih, index) => {\r\n                    if ((currentPage - 1) * itemsPerPage <= index && (currentPage) * itemsPerPage > index)\r\n                        return renderItem(ih)\r\n                    else {\r\n                        return null\r\n                    }\r\n                })\r\n            )}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nclass URLImage extends React.Component {\r\n    state = {\r\n        image: null,\r\n        width: 0,\r\n        height: 0,\r\n    };\r\n    componentDidMount() {\r\n        this.loadImage();\r\n    }\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.src !== this.props.src) {\r\n            this.loadImage();\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        this.image.removeEventListener('load', this.handleLoad);\r\n    }\r\n    loadImage() {\r\n        // save to \"this\" to remove \"load\" handler on unmount\r\n        this.image = new window.Image();\r\n        this.image.src = this.props.src;\r\n        this.image.addEventListener('load', this.handleLoad);\r\n    }\r\n    handleLoad = () => {\r\n        // after setState react-konva will update canvas and redraw the layer\r\n        // because \"image\" property is changed\r\n        this.setState({\r\n            image: this.image\r\n        });\r\n\r\n        const ratio = Math.min(Math.min(this.props.width, this.image.width) / this.image.width, Math.min(this.props.height, this.image.height) / this.image.height);\r\n\r\n        this.setState({\r\n            width: ratio * this.image.width,\r\n            height: ratio * this.image.height\r\n        })\r\n    };\r\n    render() {\r\n        return (\r\n            <Image\r\n                x={this.props.x}\r\n                y={this.props.y}\r\n                width={this.state.width}\r\n                height={this.state.height}\r\n                image={this.state.image}\r\n                ref={node => {\r\n                    this.imageNode = node;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditImage;\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\VideoList.js",["202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport MyVerticallyCenteredModal from './MyVerticallyCenteredModal';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport MButton from '@material-ui/core/Button';\r\n\r\n\r\nimport {\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nimport PlaylistService from '../../../services/playlist.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst getVideoId = (url) => {\r\n    return url.split(\"?v=\")[1];\r\n}\r\n\r\nexport default (props) => {\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('videolistpage') ? Number(localStorage.getItem('videolistpage')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [videoData, setVideoData] = useState([]);\r\n    const [videoInfos, setVideoInfos] = useState([]);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [playUrl, setPlayUrl] = useState(null);\r\n    const [metaTitle, setMetaTitle] = useState(null);\r\n    const [videoId, setVideoId] = useState(null);\r\n    const [playlistId, setPlaylistId] = useState(null);\r\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\r\n    const [metaDescription, setMetaDescription] = useState(null);\r\n    const [errorText, setErrorText] = useState('');\r\n\r\n\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n      setPlaylistId(props.match.params.playlist_id);\r\n      if (localStorage.getItem(\"user\") ) {\r\n          getAllVideos();\r\n      } else {\r\n          history.push(\"/signin\");\r\n      }\r\n    }, [props])\r\n\r\n    const getAllVideos = () => {\r\n     if (playlistId != null)\r\n      PlaylistService.getPublicPlaylist(playlistId)\r\n      .then(async response => {\r\n        console.log( \"response.data.length=\" + response.data.length)\r\n        if (response.data.message == 'cannot_access' || response.data.length == 0) {\r\n            history.push(\"/404\");\r\n        }\r\n        if(response.data && response.data.length>0) {\r\n\r\n            setVideoData(response.data)\r\n            setVideoInfos(response.data);\r\n\r\n            const total = Math.ceil(response.data.length / itemsPerPage);\r\n            setTotalPages(total);\r\n        }\r\n      })\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum)=>{\r\n        setPageNumber(pagenum);\r\n        localStorage.setItem('videolistpage', pagenum)\r\n    }\r\n\r\n    const handleChangeKeyword = (key) => {\r\n        const keyword = key.trim().toLowerCase();\r\n        let data = videoData.filter(item => {\r\n            let fileName = item.meta_keyword + item.meta_description + item.meta_title + getVideoId(item.video_id);\r\n            fileName = fileName.trim().toLowerCase();\r\n\r\n            if (keyword === \"\") {\r\n                return 1;\r\n            }\r\n\r\n            if (fileName.includes(keyword)) {\r\n                return 1;\r\n            }\r\n        });\r\n\r\n        setVideoInfos(data);\r\n\r\n        const total = Math.ceil(data.length / itemsPerPage);\r\n        setTotalPages(total);\r\n\r\n        localStorage.removeItem('videolistpage');\r\n        setPageNumber(1);\r\n    }\r\n\r\n\tfunction meta_restriction_age_str( meta){\r\n\t\tif( !meta)\r\n\t\t\treturn \"\";\r\n\t\treturn \" [\" + meta + \"]\";\r\n\t}\r\n\r\n    // Play one video\r\n    const handlePlayVideo = (video_url, meta_title, videoId, meta_restriction_age, meta_description) => {\r\n        PlaylistService.addHistory(videoId)\r\n            .then(response => {\r\n                setModalShow(true);\r\n                setPlayUrl( video_url );\r\n                setMetaTitle( meta_title + meta_restriction_age_str( meta_restriction_age) );\r\n                setMetaDescription( meta_description );\r\n                setVideoId( videoId );\r\n            })\r\n            .catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                if (err.response.data.message == 'Not Enough Tokens') {\r\n                    setErrorText(resMessage + '. \\nPlease take your tokens.');\r\n                    setTimeout(() => {\r\n                        setErrorText('');\r\n                      }, 5000);\r\n                }\r\n            });\r\n    }\r\n\r\n    const onNextVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index >= videoData.length - 1) {\r\n            return;\r\n        }\r\n\r\n        PlaylistService.addHistory(videoData[index + 1].id)\r\n            .then(response => {\r\n                const nextUrl = videoData[index + 1].video_id;\r\n                setVideoId( videoData[index + 1].id);\r\n                setPlayUrl(nextUrl);\r\n                setMetaTitle((videoData[index + 1].manual_title || videoData[index + 1].meta_title) + meta_restriction_age_str( videoData[index + 1].meta_restriction_age))\r\n                setMetaDescription( videoData[index + 1].manual_description || videoData[index + 1].meta_description )\r\n                setCurrentVideoNumber( getCurrentVideoNumber() + 1)\r\n            })\r\n            .catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                if (err.response.data.message == 'Not Enough Tokens') {\r\n                    setErrorText(resMessage + '\\nPlease take your tokens.');\r\n                    setTimeout(() => {\r\n                        setErrorText('');\r\n                      }, 5000);\r\n                }\r\n            });\r\n    }\r\n\r\n    const onPreviousVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index <= 0) {\r\n            return;\r\n        }\r\n\r\n        PlaylistService.addHistory(videoData[index - 1].id)\r\n            .then(response => {\r\n                const prevUrl = videoData[index - 1].video_id;\r\n                setVideoId(videoData[index - 1].id);\r\n                setPlayUrl(prevUrl);\r\n                setMetaTitle((videoData[index - 1].manual_title || videoData[index - 1].meta_title) + meta_restriction_age_str( videoData[index - 1].meta_restriction_age))\r\n                setMetaDescription( videoData[index - 1].manual_description || videoData[index - 1].meta_description )\r\n                setCurrentVideoNumber(getCurrentVideoNumber() - 1)\r\n            })\r\n            .catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                if (err.response.data.message == 'Not Enough Tokens') {\r\n                    setErrorText(resMessage + '\\nPlease take your tokens.');\r\n                    setTimeout(() => {\r\n                        setErrorText('');\r\n                      }, 5000);\r\n                }\r\n            });\r\n    }\r\n\r\n\tfunction beep() {\r\n\t\tvar snd = new Audio(\"data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");\r\n\t\tsnd.play();\r\n\t}\r\n\r\n    const onOpenSourceUrl = () => {\r\n\t\t//beep();\r\n\t\t//Pause curent video before launching a new one\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        const nextUrl = videoData[index].video_id;\r\n        PlaylistService.addHistory(videoId);\r\n\t\twindow.open( nextUrl, '_blank');\r\n\t}\r\n\r\n\tconst getCurrentVideoNumber = () => {\r\n        return videoData.findIndex(item => item.id == videoId) + 1\r\n    }\r\n\r\n    const itemClick = (video_id, ivideoId) => {\r\n        PlaylistService.addHistory(ivideoId)\r\n            .then(response => {\r\n                setPlayUrl(video_id);\r\n                setVideoId(ivideoId);\r\n                setMetaTitle(videoData.find(item=>item.id == ivideoId).manual_title || videoData.find(item=>item.id == ivideoId).meta_title);\r\n                setMetaDescription(videoData.find(item=>item.id == ivideoId).manual_description || videoData.find(item=>item.id == ivideoId).meta_description);\r\n            })\r\n            .catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                if (err.response.data.message == 'Not Enough Tokens') {\r\n                    setErrorText(resMessage + '\\nPlease take your tokens.');\r\n                    setTimeout(() => {\r\n                        setErrorText('');\r\n                      }, 5000);\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {videoInfos &&\r\n                <VideoList\r\n                    videoInfos={videoInfos}\r\n                    totalPages={totalPages}\r\n                    itemsPerPage={itemsPerPage}\r\n                    currentPage={pageNumber}\r\n                    onChangeKeyword={handleChangeKeyword}\r\n                    onChangePageNumber={handleChangePageNumber}\r\n                    handlePlayVideo={handlePlayVideo}\r\n                />\r\n            }\r\n            <MyVerticallyCenteredModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                playUrl={playUrl}\r\n                metaTitle={metaTitle}\r\n                metaDescription={metaDescription}\r\n                videoData={videoData}\r\n                videoId={videoId}\r\n                onPreviousVideo={onPreviousVideo}\r\n                onNextVideo={onNextVideo}\r\n                onOpenSourceUrl={onOpenSourceUrl}\r\n                currentVideoNumber={currentVideoNumber}\r\n                itemClick={itemClick}\r\n            />\r\n            {errorText &&\r\n                <div>\r\n                    <Alert\r\n                        severity='error'\r\n                        style={{position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px'}}\r\n                        action={\r\n                        <MButton\r\n                            color=\"inherit\" size=\"medium\"\r\n                            onClick={() => {\r\n                                history.push('/add_token_code');\r\n                            }}\r\n                        >\r\n                            Get Tokens\r\n                        </MButton>\r\n                        }\r\n                    >\r\n                        {errorText}\r\n                    </Alert>\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst VideoList = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                <Image thumbnail src={data.meta_image} className=\"mr-3\" />\r\n                <Media.Body>\r\n                    <h5><span>{data.manual_title || data.meta_title}</span></h5>\r\n                    <p style={{marginBottom: \"0px\"}}><span>ID : </span><code>{getVideoId(data.video_id)}</code></p>\r\n                    <p style={{marginBottom: \"2px\"}}><span>{data.manual_description || data.meta_description}</span></p>\r\n                    {data.meta_keyword && (\r\n                        <p><small><span>Keywords : </span><span>{data.meta_keyword}</span></small></p>\r\n                    )}\r\n                    <p><small><i><span>Created Time : </span><span>{data.dateTime}</span></i></small></p>\r\n                    <Button variant=\"primary\" size=\"sm\" style={{padding: '5px 20px'}}\r\n                    \tclassName=\"mr-2\"\r\n                    \tonClick={() => props.handlePlayVideo( data.video_id, data.manual_title || data.meta_title, data.id, data.meta_restriction_age, data.manual_description || data.meta_description)}>\r\n                        Play Video\r\n                    </Button>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    const showPagenationItem = () => {\r\n\r\n        return (\r\n            <Pagination\r\n                color=\"primary\"\r\n                className=\"mt-3\"\r\n                shape=\"rounded\"\r\n                count={props.totalPages}\r\n                page={props.currentPage}\r\n                onChange={(event, val)=>props.onChangePageNumber(val)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            props.onChangeKeyword(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <TextField\r\n                    className={classes.margin}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search\"\r\n                    onKeyDown={doSomethingWith}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n                />\r\n                <h3 className=\"card-header\">List of Videos</h3>\r\n                <ListGroup variant=\"flush\">\r\n                    {props.videoInfos\r\n                        && props.videoInfos.map((video, index) => {\r\n                            if((props.currentPage-1)*props.itemsPerPage <=index && (props.currentPage)*props.itemsPerPage > index ) {\r\n                                return renderItem(video)\r\n                            } else {\r\n                                return null\r\n                            }\r\n                        })}\r\n                </ListGroup>\r\n                {showPagenationItem()}\r\n            </div>\r\n        </>\r\n    );\r\n}","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\User\\BoardAdmin.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\Playlist.js",["220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputIcon from '@material-ui/icons/Create';\r\nimport InsertLink from '@material-ui/icons/InsertLink';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ReactPlayer from 'react-player';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport FolderSharedIcon from '@material-ui/icons/FolderShared';\r\nimport GlobalData from '../../../tools/GlobalData';\r\nimport MultipleSelect from './MutipleSelect';\r\nimport MyVerticallyCenteredModal from './MyVerticallyCenteredModal';\r\nimport EditDialog from '../Video/EditDialog';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n} from 'react-bootstrap';\r\n\r\nimport VideoService from '../../../services/video.service';\r\nimport PlaylistService from '../../../services/playlist.service';\r\nimport { LinearProgress, Paper } from '@material-ui/core';\r\n\r\nconst front_end_server = GlobalData.front_end_server_ip + \":\" + GlobalData.front_end_server_port;\r\n//const ba-ck_end_server = GlobalData.ba-ck_end_server_ip + \":3000\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst getVideoId = (url) => {\r\n    return url.split(\"?v=\")[1];\r\n} \r\n\r\nconst SettingDialog = (props) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"md\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    Playlist Infomation\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Row>\r\n                    <Col md={8}>\r\n                        <TextField\r\n                            className={classes.linkInput}\r\n                            id=\"input-with-icon-textfield-top\"\r\n                            placeholder=\"Input a new playlist name to change.\"\r\n                            value={props.currentPlaylistTitle}\r\n                            onChange={(e) => props.setCurrentPlaylistTitle(e.target.value)}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <InputIcon />\r\n                                    </InputAdornment>\r\n                                ),\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                    <Col md={4}>\r\n                        <Select className=\"mr-4\"\r\n                        style={{width: \"100px\"}}\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={props.currentPlaylistStatus}\r\n                        onChange={(e) => props.setCurrentPlaylistStatus(e.target.value)}\r\n                        >\r\n                            <MenuItem value={1}>Public</MenuItem>\r\n                            <MenuItem value={0}>Private</MenuItem>\r\n                        </Select>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"success\" onClick={props.onSave}>Save</Button>\r\n                <Button variant=\"danger\" onClick={props.onDelete}>Delete</Button>\r\n                <Button variant=\"primary\" onClick={props.onHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default () => {\r\n    const [message, setMessage] = React.useState(\"\");\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('playlistpage') ? Number(localStorage.getItem('playlistpage')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [treeData, setTreeData] = useState('');\r\n    const [selected, setSelected] = useState('root');\r\n    const [alertVisible, setAlertVisible] = useState(false);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [progressVisible, setProgressVisible] = useState(false);\r\n    const [videoData, setVideoData] = useState([]);\r\n    const [videoInfos, setVideoInfos] = useState([]);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [settingShow, setSettingShow] = useState(false);\r\n    const [playUrl, setPlayUrl] = useState(null);\r\n    const [metaTitle, setMetaTitle] = useState(null);\r\n    const [metaDescription, setMetaDescription] = useState(null);\r\n    const [playlistTitle, setPlaylistTitle] = useState('');\r\n    const [playlistStatus, setPlaylistStatus] = useState(1);\r\n    const [currentPlaylistId, setCurrentPlaylistId] = useState('');\r\n    const [playlistData, setPlaylistData] = useState([]);\r\n    const [currentPlaylistTitle, setCurrentPlaylistTitle] = useState('');\r\n    const [currentPlaylistStatus, setCurrentPlaylistStatus] = useState('');\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [videoId, setVideoId] = useState(null);\r\n    const [playlistId, setPlaylistId] = useState(null);\r\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\r\n    const [editShow, setEditShow] = useState(false);\r\n    const [manualTitle, setManualTitle] = useState(undefined);\r\n    const [manualDescription, setManualDescription] = useState(undefined);\r\n\r\n    React.useEffect(() => {\r\n        getAllPlaylists();\r\n    }, [])\r\n\r\n    const getAllPlaylists = () => {\r\n        PlaylistService.getAllPlaylist()\r\n            .then(async response => {\r\n                if(response.data && response.data.length>0) {\r\n                    setPlaylistData(response.data);\r\n                    setPlaylists(response.data);\r\n                    handleItemClick(response.data[0].playlist_id, response.data[0].playlist_title, response.data[0].playlist_status)\r\n                }\r\n            })\r\n    }\r\n\r\n    // Add playlist\r\n    const upload = () => {\r\n\r\n        PlaylistService.addPlaylist(playlistTitle, playlistStatus)\r\n            .then(response => {\r\n                if (response.data.message === 'success') {\r\n                    getAllPlaylists();\r\n                    setPlaylistTitle('');\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum)=>{\r\n        setPageNumber(pagenum);\r\n        localStorage.setItem('playlistpage', pagenum)\r\n    }\r\n\r\n    const handleChangeKeyword = (key) => {\r\n        const keyword = key.trim().toLowerCase();\r\n        const nodeId = selected;\r\n        let data = videoData.filter(item => {\r\n            let fileName = item.meta_keyword + item.meta_description + item.meta_title + getVideoId(item.video_id);\r\n            fileName = fileName ? fileName.trim().toLowerCase() : '';\r\n\r\n            if (fileName.includes(keyword)) {\r\n                return 1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        if (keyword == \"\") {\r\n            setVideoInfos(videoData);\r\n        } else {\r\n            setVideoInfos(data);\r\n        }\r\n    \r\n        const total = Math.ceil(data.length / itemsPerPage);\r\n        setTotalPages(total);\r\n\r\n        localStorage.removeItem(\"playlistpage\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleOnKeyDown = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            setPlaylistTitle(e.target.value);\r\n            upload();\r\n        }\r\n    }\r\n\r\n    // Remove one video item\r\n    const handleRemoveItem = (id) => {\r\n        VideoService.removeVideo(id)\r\n            .then(response => {\r\n                if (response.data.message === \"success\") {\r\n                    let arr = [...videoInfos];\r\n                    arr = arr.filter(item => item.id !== id);\r\n                    setVideoInfos(arr);\r\n                }\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                setMessage(resMessage);\r\n            });\r\n    }\r\n\r\n    // Play one video\r\n    const handlePlayVideo = (video_url, meta_title, meta_description, video_id) => {\r\n        setModalShow(true);\r\n        setPlayUrl(video_url);\r\n        setMetaTitle(meta_title);\r\n        setMetaDescription(meta_description);\r\n        setVideoId(video_id);\r\n    }\r\n\r\n    // playlist\r\n    const handlePlaylist = (e, video_id) => {\r\n        const playlist_title = e.target.value;\r\n        let playlist_id = '';\r\n\r\n        if (playlist_title != '') {\r\n            const selectedPlaylist = playlists.find(item => item.playlist_title == playlist_title);\r\n            playlist_id = selectedPlaylist.playlist_id;\r\n        }\r\n\r\n        VideoService.changeVideoGroup(video_id, playlist_id);\r\n        window.location.reload();\r\n    }\r\n\r\n    const handleItemClick = (playlist_id, playlist_title, playlist_status) => {\r\n        setCurrentPlaylistId(playlist_id);\r\n        setCurrentPlaylistTitle(playlist_title);\r\n        setCurrentPlaylistStatus(playlist_status);\r\n\r\n        PlaylistService.getPlaylist(playlist_id)\r\n        .then(async response => {\r\n            if(response.data && response.data.length>0) {\r\n\r\n                const res = response.data;\r\n                    \r\n                for (const key in res) {\r\n                    const videoId = res[key].id;\r\n                    const result = await VideoService.getPlaylistIds(videoId);\r\n                    res[key].arr = result.data.playlists;\r\n                }\r\n\r\n                setVideoData(res)\r\n\r\n                // setVideoData(response.data);\r\n                setVideoInfos(response.data);\r\n                \r\n                const total = Math.ceil(response.data.length / itemsPerPage);\r\n                setTotalPages(total);\r\n            } else {\r\n                setVideoInfos([]);\r\n            }\r\n        })\r\n    }\r\n\r\n    // delete\r\n    const handleSettingShow = () => {\r\n        setSettingShow(false)\r\n   \r\n        PlaylistService.removePlaylist(currentPlaylistId)\r\n            .then(response => {\r\n                if (response.data.message === 'success') {\r\n                    getAllPlaylists();\r\n                    setCurrentPlaylistId('');\r\n                    window.location.reload();\r\n                }\r\n            })\r\n    }\r\n\r\n    // change\r\n    const handleSettingSave = () => {\r\n        setSettingShow(false)\r\n        PlaylistService.changePlaylist(currentPlaylistId, currentPlaylistTitle, currentPlaylistStatus)\r\n        .then(response => {\r\n            if (response.data.message === 'success') {\r\n                getAllPlaylists();\r\n                setCurrentPlaylistId('');\r\n                setCurrentPlaylistTitle('');\r\n                setCurrentPlaylistStatus('');\r\n            }\r\n        })\r\n    }\r\n\r\n    function meta_restriction_age_str( meta){\r\n\t\tif( !meta)\r\n\t\t\treturn \"\";\r\n\t\treturn \" [\" + meta + \"]\";\r\n\t}\r\n    \r\n    const onNextVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index >= videoData.length - 1) {\r\n            return;\r\n        }\r\n        const nextUrl = videoData[index + 1].video_id;\r\n        setVideoId( videoData[index + 1].id);\r\n        setPlayUrl(nextUrl);\r\n        setMetaTitle( videoData[index + 1].meta_title + meta_restriction_age_str( videoData[index + 1].meta_restriction_age))\r\n        setMetaDescription( videoData[index + 1].meta_description )\r\n        setCurrentVideoNumber( getCurrentVideoNumber() + 1)\r\n    }\r\n\r\n    const onPreviousVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index <= 0) {\r\n            return;\r\n        }\r\n        const prevUrl = videoData[index - 1].video_id;\r\n        setVideoId(videoData[index - 1].id);\r\n        setPlayUrl(prevUrl);\r\n        setMetaTitle(videoData[index - 1].meta_title + meta_restriction_age_str( videoData[index - 1].meta_restriction_age))\r\n        setMetaDescription( videoData[index - 1].meta_description )\r\n        setCurrentVideoNumber(getCurrentVideoNumber() - 1)\r\n    }\r\n\r\n    const onOpenSourceUrl = () => {\r\n\t\t//beep();\r\n\t\t//Pause curent video before launching a new one\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        const nextUrl = videoData[index].video_id;\r\n\t\twindow.open( nextUrl, '_blank');\r\n\t}\r\n\r\n\tconst getCurrentVideoNumber = () => {\r\n        return videoData.findIndex(item => item.id == videoId) + 1\r\n    }\r\n\r\n    const itemClick = (video_id, videoId) => {\r\n        setPlayUrl(video_id);\r\n        setVideoId(videoId);\r\n        setMetaTitle(videoData.find(item=>item.id == videoId).meta_title);\r\n        setMetaDescription(videoData.find(item=>item.id == videoId).meta_description);\r\n    }\r\n\r\n\r\n    // edit save\r\n    const onSave = () => {\r\n        setEditShow(false);\r\n        VideoService.setManualInfo(videoId, manualTitle, manualDescription);\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        videoData[index].manual_title = manualTitle;\r\n        videoData[index].manual_description = manualDescription;\r\n    }\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderTree = (nodes) => {\r\n        return (\r\n        <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\r\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n        </TreeItem>\r\n    )}\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"mb-3\">My Playlists</h2>\r\n            <Row className=\"mb-3\">\r\n                <Col md={4}>\r\n                    <TextField\r\n                        className={classes.linkInput}\r\n                        id=\"input-with-icon-textfield-top\"\r\n                        placeholder=\"Input new playlist title.\"\r\n                        value={playlistTitle}\r\n                        onChange={(e) => setPlaylistTitle(e.target.value)}\r\n                        onKeyDown={(e) => handleOnKeyDown(e)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                            <InputIcon />\r\n                            </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Col>\r\n                <Col md={8}>\r\n                    <Select className=\"mr-4\"\r\n                      style={{width: \"100px\"}}\r\n                      labelId=\"demo-simple-select-label\"\r\n                      id=\"demo-simple-select\"\r\n                      value={playlistStatus}\r\n                      onChange={(e) => setPlaylistStatus(e.target.value)}\r\n                    >\r\n                        <MenuItem value={1}>Public</MenuItem>\r\n                        <MenuItem value={0}>Private</MenuItem>\r\n                    </Select>\r\n                    <Button disabled={playlistTitle === ''} onClick={upload}>\r\n                        Add Playlist\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col md={12}>\r\n                    {progressVisible && (\r\n                        <div className={classes.linerProgress}>\r\n                            <LinearProgress />\r\n                        </div>\r\n                    )}\r\n                    {message && (\r\n                        <Alert variant=\"success\" className=\"mt-3 upload_alert\" show={alertVisible}>\r\n                            <Alert.Heading>Add Result</Alert.Heading>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md={3} className=\"card\">\r\n                  <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    \r\n                    {playlistData && (\r\n                        playlistData.map(item => {\r\n                            return (\r\n                                <ListItem button key={item.id}\r\n                                            selected={currentPlaylistId == item.playlist_id}\r\n                                            onClick={() => handleItemClick(item.playlist_id, item.playlist_title, item.playlist_status)}\r\n                                 >\r\n                                    <ListItemAvatar>\r\n                                        <Avatar>\r\n                                            {item.playlist_status == 1 ? <FolderIcon /> : <FolderSharedIcon />}\r\n                                        </Avatar>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary={item.playlist_title} />\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton edge=\"end\" aria-label=\"delete\" disabled={currentPlaylistId !== item.playlist_id} onClick={() => setSettingShow(true)}>\r\n                                            <SettingsIcon/>\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                            )\r\n                        })\r\n                    )}\r\n\r\n                  </List>\r\n                </Col>\r\n                <Col md={9}>\r\n                    {videoInfos &&\r\n                        <VideoList \r\n                            videoInfos={videoInfos}\r\n                            totalPages={totalPages}\r\n                            itemsPerPage={itemsPerPage}\r\n                            currentPage={pageNumber}\r\n                            playlists={playlists}\r\n                            currentPlaylistId={currentPlaylistId}\r\n                            onChangeKeyword={handleChangeKeyword}\r\n                            onChangePageNumber={handleChangePageNumber}\r\n                            handleRemoveItem={handleRemoveItem}\r\n                            handlePlayVideo={handlePlayVideo}\r\n                            onChangePlaylist={handlePlaylist}\r\n                            setEditShow={setEditShow}\r\n                            setManualTitle={setManualTitle}\r\n                            setManualDescription={setManualDescription}\r\n                            setVideoId={setVideoId}\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <MyVerticallyCenteredModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                playUrl={playUrl}\r\n                metaTitle={metaTitle}\r\n                metaDescription={metaDescription}\r\n                videoData={videoData}\r\n                videoId={videoId}\r\n                onPreviousVideo={onPreviousVideo}\r\n                onNextVideo={onNextVideo}\r\n                onOpenSourceUrl={onOpenSourceUrl}\r\n                currentVideoNumber={currentVideoNumber}\r\n                itemClick={itemClick}\r\n            />\r\n            <SettingDialog\r\n                show={settingShow}\r\n                onHide={() => setSettingShow(false)}\r\n                onDelete={handleSettingShow}\r\n                onSave={handleSettingSave}\r\n                setCurrentPlaylistTitle={setCurrentPlaylistTitle}\r\n                setCurrentPlaylistStatus={setCurrentPlaylistStatus}\r\n                currentPlaylistTitle={currentPlaylistTitle}\r\n                currentPlaylistStatus={currentPlaylistStatus}\r\n            />\r\n            <EditDialog\r\n                show={editShow}\r\n                onHide={() => setEditShow(false)}\r\n                manualTitle={manualTitle}\r\n                manualDescription={manualDescription}\r\n                setManualTitle={setManualTitle}\r\n                setManualDescription={setManualDescription}\r\n                onSave={onSave}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst VideoList = (props) => {\r\n    const classes = useStyles();\r\n    \r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                <Image thumbnail src={data.meta_image} className=\"mr-3\" />\r\n                <Media.Body>\r\n                    <h5><span style={{color: 'green'}}>{data.manual_title && data.manual_title}</span></h5>\r\n                    <h5><span>{data.meta_title}</span></h5>\r\n                    <p style={{marginBottom: \"0px\"}}><span>ID : </span><code>{getVideoId(data.video_id)}</code></p>\r\n                    <p style={{marginBottom: \"2px\"}}><span style={{color: 'green'}}>{data.manual_description && data.manual_description}</span></p>\r\n                    <p style={{marginBottom: \"2px\"}}><span>{data.meta_description}</span></p>\r\n                    {data.meta_keyword && (\r\n                        <p><small><span>Keywords : </span><span>{data.meta_keyword}</span></small></p>\r\n                    )}\r\n                    <p><small><i><span>Created Time : </span><span>{data.dateTime}</span></i></small></p>\r\n                   \r\n                    <Row>\r\n                        <Col>\r\n                            <Button variant=\"success\" size=\"sm\" className=\"mr-2\" onClick={() => props.handlePlayVideo(data.video_id, data.manual_title || data.meta_title, data.manual_description || data.meta_description, data.id)}>Play</Button>\r\n                            <Button variant=\"info\" size=\"sm\" className=\"mr-2\" \r\n                                onClick={() => {\r\n                                    props.setManualTitle(data.manual_title ? data.manual_title : data.meta_title);\r\n                                    props.setManualDescription(data.manual_description ? data.manual_description : data.meta_description);\r\n                                    props.setEditShow(true);\r\n                                    props.setVideoId(data.id);\r\n                                }}\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                            <Button variant=\"danger\" size=\"sm\" onClick={() => props.handleRemoveItem(data.id)}>Remove</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            {props.playlists.length > 0 &&\r\n                                <MultipleSelect names={props.playlists} videoId={data.id} a={data.arr} />\r\n                            }\r\n                            {/* <select  className=\"mr-2 float-right\" onChange={(e) => props.onChangePlaylist(e, data.id)}>\r\n                                <option value=\"\">Non Playlist</option>\r\n                                {props.playlists.map((item) => {\r\n                                    return <option selected={data.playlist_id == item.playlist_id}>{item.playlist_title}</option>;\r\n                                })}\r\n                            </select> */}\r\n                        </Col>\r\n                    </Row>\r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    const showPagenationItem = () => {\r\n\r\n        return (\r\n            <Pagination\r\n                color=\"primary\"\r\n                className=\"mt-3\"\r\n                shape=\"rounded\"\r\n                count={props.totalPages}\r\n                page={props.currentPage}\r\n                onChange={(event, val)=>props.onChangePageNumber(val)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            props.onChangeKeyword(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <Paper style={{margin:\"5px\"}}>\r\n                    <TextField\r\n                        disabled\r\n                        className={classes.margin}\r\n                        value={props.currentPlaylistId && front_end_server + '/playlist/' + props.currentPlaylistId}\r\n                        style={{width: \"85%\"}}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <InsertLink />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Button onClick={() => {navigator.clipboard.writeText(front_end_server + '/playlist/' + props.currentPlaylistId)}}>Copy</Button>\r\n                </Paper>\r\n                <TextField\r\n                    className={classes.margin}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search\"\r\n                    onKeyDown={doSomethingWith}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                    }}\r\n                />\r\n                <h3 className=\"card-header\">List of Videos</h3>\r\n                <ListGroup variant=\"flush\">\r\n                    {props.videoInfos\r\n                        && (props.videoInfos.map((video, index) => {\r\n                            if((props.currentPage-1)*props.itemsPerPage <=index && (props.currentPage)*props.itemsPerPage > index ) {\r\n                                return renderItem(video)\r\n                            } else {\r\n                                return null\r\n                            }\r\n                        }))}\r\n                </ListGroup>\r\n                {showPagenationItem()}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Video\\UploadVideo.js",["247","248","249","250","251","252","253","254","255","256","257","258","259","260"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InputIcon from '@material-ui/icons/InsertLink';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport MyVerticallyCenteredModal from '../Playlist/MyVerticallyCenteredModal';\r\nimport EditDialog from './EditDialog';\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Alert,\r\n    Image,\r\n    Button,\r\n    ListGroup,\r\n    Media,\r\n    Form,\r\n} from 'react-bootstrap';\r\n\r\nimport PlaylistService from '../../../services/playlist.service';\r\nimport VideoService from '../../../services/video.service';\r\nimport { Collapse, LinearProgress } from '@material-ui/core';\r\nimport MultipleSelect from './MutipleSelect';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst getVideoId = (url) => {\r\n    return url.split(\"?v=\")[1];\r\n} \r\n\r\nconst VideoUpload = () => {\r\n    const [message, setMessage] = React.useState(\"\");\r\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('page') ? Number(localStorage.getItem('page')) : 1);\r\n    const [itemsPerPage] = React.useState(10);\r\n    const [totalPages, setTotalPages] = React.useState(1);\r\n    const [treeData, setTreeData] = useState('');\r\n    const [selected, setSelected] = useState('root');\r\n    const [alertVisible, setAlertVisible] = useState(false);\r\n    const [expanded, setExpanded] = useState([]);\r\n    const [videoUrl, setVideoUrl] = useState('');\r\n    const [progressVisible, setProgressVisible] = useState(false);\r\n    const [videoData, setVideoData] = useState([]);\r\n    const [videoInfos, setVideoInfos] = useState([]);\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [playUrl, setPlayUrl] = useState(null);\r\n    const [metaTitle, setMetaTitle] = useState(null);\r\n    const [playlists, setPlaylists] = useState([]);\r\n    const [metaDescription, setMetaDescription] = useState(null);\r\n    const [videoId, setVideoId] = useState(null);\r\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\r\n    const [editShow, setEditShow] = useState(false);\r\n    const [manualTitle, setManualTitle] = useState(undefined);\r\n    const [manualDescription, setManualDescription] = useState(undefined);\r\n    \r\n    useEffect(() => {\r\n        setExpand()\r\n    }, [])\r\n\r\n    const setExpand = () => {\r\n        const selectedNode = localStorage.getItem('selected');\r\n        let expand = ['root'];\r\n        if (selectedNode) {\r\n            let y, m ,d;\r\n            if (selectedNode.length === 4 && Number(selectedNode) > 1000) {\r\n                y = selectedNode\r\n                expand.push(y)\r\n            } else if (selectedNode.length === 7) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n            } else if (selectedNode.length === 10) {\r\n                y = selectedNode.split(\"-\")[0];\r\n                m = selectedNode.split(\"-\")[1];\r\n                d = selectedNode.split(\"-\")[2];\r\n                expand.push(y)\r\n                expand.push(y + '-' + m)\r\n                expand.push(y + '-' + m + '-' + d)\r\n            }\r\n        }\r\n        setExpanded(expand)\r\n    }\r\n\r\n    // set tree data\r\n    const setTree = (plain) => {\r\n        const data = {\r\n            id: 'root',\r\n            name: 'All Videos',\r\n            children: [],\r\n        };\r\n        plain.forEach(value => {\r\n            let [year, month, day] = new Date(value.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n\r\n            let index = data.children.findIndex(item => item.id === String(year))\r\n            if( index < 0) {\r\n                data.children.push({\r\n                    id: year.toString(),\r\n                    name: year.toString(),\r\n                    children: [{\r\n                        id: year + '-' + month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year + '-' + month + '-' + day,\r\n                            name: day,\r\n                        }]\r\n                    }]\r\n                })\r\n            } else {\r\n                let month_index = data.children[index].children.findIndex(item => String(item.id) === year+'-'+month)\r\n                if (month_index < 0) {\r\n                    data.children[index].children.push({\r\n                        id: year+'-'+month,\r\n                        name: month,\r\n                        children: [{\r\n                            id: year+'-'+month+'-'+day,\r\n                            name: day,\r\n                        }]\r\n                    })\r\n                } else {\r\n                    let day_index = data.children[index].children[month_index].children.findIndex(item => String(item.id) === year+'-'+month+'-'+day)\r\n                    if (day_index < 0) {\r\n                        data.children[index].children[month_index].children.push({\r\n                            id: year+'-'+month+'-'+day,\r\n                            name: day,\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            \r\n        });\r\n        \r\n        setTreeData(data);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        getAllVideos();\r\n\r\n        //get playlists\r\n        getAllPlaylists();\r\n    }, [])\r\n\r\n    const getAllPlaylists = () => {\r\n        PlaylistService.getAllPlaylist()\r\n            .then(async response => {\r\n                if(response.data && response.data.length>0) {\r\n                    setPlaylists(response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n    const getAllVideos = () => {\r\n        VideoService.getAllVideoList()\r\n            .then(async response => {\r\n                if(response.data && response.data.length>0) {\r\n                    const res = response.data;\r\n                    \r\n                    for (const key in res) {\r\n                        const videoId = res[key].id;\r\n                        const result = await VideoService.getPlaylistIds(videoId);\r\n                        res[key].arr = result.data.playlists;\r\n                    }\r\n\r\n                    setVideoData(res)\r\n                    setTree(response.data)\r\n                    \r\n                    ///////\r\n                    const nodeId = localStorage.getItem('selected');\r\n                    let data = await response.data.filter(item => {\r\n                        let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n        \r\n                        let selectedYear = '';\r\n                        let selectedMonth = '';\r\n                        let selectedDay = '';\r\n        \r\n                        let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\r\n                        fileName = fileName ? fileName.trim().toLowerCase() : '';\r\n        \r\n                        if (nodeId === 'root') {\r\n                                return 1;\r\n                        }\r\n        \r\n                        let selectedDate = '';\r\n                        if (String(nodeId).length === 4) {\r\n                            selectedYear = String(nodeId);\r\n                            if (selectedYear === year) {\r\n                                    return 1;    \r\n                            }\r\n                        }\r\n                    \r\n                        if (String(nodeId).length >= 6) {\r\n                            selectedDate = nodeId.split('-');\r\n                            selectedYear = selectedDate[0];\r\n                            selectedMonth = selectedDate[1];\r\n                            if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                                    return 1;    \r\n                            }\r\n                            if (String(nodeId).length >= 8) {\r\n                                selectedDay = nodeId.split('-')[2];\r\n                                if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                                        return 1;    \r\n                                } else {\r\n                                    return 0;\r\n                                }\r\n                            }\r\n                        }\r\n                        return 0;\r\n                    });\r\n                    \r\n                    setVideoInfos(data);\r\n                    \r\n                    const total = Math.ceil(data.length/itemsPerPage);\r\n                    setTotalPages(total);\r\n                }\r\n            })\r\n    }\r\n\r\n    const upload = () => {\r\n        setProgressVisible(true);\r\n\r\n        VideoService.uploadVideo(videoUrl)\r\n            .then(response => {\r\n                setMessage(response.data.message);\r\n                setAlertVisible(true)\r\n                setTimeout(() => {\r\n                    setAlertVisible(false)\r\n                }, 2000)\r\n\r\n                setProgressVisible(false);\r\n\r\n                if (response.data.message === 'success') {\r\n                    getAllVideos();\r\n                    setVideoUrl('');\r\n                }\r\n            })\r\n    }\r\n\r\n    const handleChangePageNumber = (pagenum)=>{\r\n        setPageNumber(pagenum);\r\n        localStorage.setItem('page', pagenum)\r\n    }\r\n\r\n    const handleChangeKeyword = (key) => {\r\n        const keyword = key.trim().toLowerCase();\r\n        const nodeId = selected;\r\n        let data = videoData.filter(item => {\r\n            let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n\r\n            let selectedYear = '';\r\n            let selectedMonth = '';\r\n            let selectedDay = '';\r\n\r\n            let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\r\n            fileName = fileName.trim().toLowerCase();\r\n\r\n            if (nodeId === 'root') {\r\n                if (keyword === \"\") {\r\n                    return 1;    \r\n                } else {\r\n                    if (fileName.includes(keyword)) {\r\n                        return 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let selectedDate = '';\r\n            if (String(nodeId).length === 4) {\r\n                selectedYear = String(nodeId);\r\n                if (selectedYear === year) {\r\n                    if (keyword === \"\") {\r\n                        return 1;    \r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        \r\n            if (String(nodeId).length >= 6) {\r\n                selectedDate = nodeId.split('-');\r\n                selectedYear = selectedDate[0];\r\n                selectedMonth = selectedDate[1];\r\n                if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                    if (keyword === \"\") {\r\n                        return 1;    \r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n                if (String(nodeId).length >= 8) {\r\n                    selectedDay = nodeId.split('-')[2];\r\n                    if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                        if (keyword === \"\") {\r\n                            return 1;    \r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n            return 0;\r\n        });\r\n        \r\n        setVideoInfos(data);\r\n    \r\n        const total = Math.ceil(data.length / itemsPerPage);\r\n        setTotalPages(total);\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleNodeSelect = (event, nodeId, keyword) => {\r\n        if (keyword === \"\") {\r\n            document.getElementById('input-with-icon-textfield').value = '';\r\n        }\r\n        {\r\n            setSelected(nodeId);        // e.g. 2020-3-5\r\n            localStorage.setItem(\"selected\", nodeId);\r\n            setExpand();\r\n            let data = videoData.filter(item => {\r\n                let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split( '/' ).reverse( );\r\n\r\n                let selectedYear = '';\r\n                let selectedMonth = '';\r\n                let selectedDay = '';\r\n\r\n                let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\r\n                fileName = fileName.trim().toLowerCase();\r\n\r\n                if (nodeId === 'root') {\r\n                    if (keyword === \"\") {\r\n                        return 1;    \r\n                    } else {\r\n                        if (fileName.includes(keyword)) {\r\n                            return 1;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let selectedDate = '';\r\n                if (String(nodeId).length === 4) {\r\n                    selectedYear = String(nodeId);\r\n                    if (selectedYear === year) {\r\n                        if (keyword === \"\") {\r\n                            return 1;    \r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            \r\n                if (String(nodeId).length >= 6) {\r\n                    selectedDate = nodeId.split('-');\r\n                    selectedYear = selectedDate[0];\r\n                    selectedMonth = selectedDate[1];\r\n                    if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\r\n                        if (keyword === \"\") {\r\n                            return 1;    \r\n                        } else {\r\n                            if (fileName.includes(keyword)) {\r\n                                return 1;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (String(nodeId).length >= 8) {\r\n                        selectedDay = nodeId.split('-')[2];\r\n                        if (selectedYear === year && selectedMonth === month && selectedDay === day) {\r\n                            if (keyword === \"\") {\r\n                                return 1;    \r\n                            } else {\r\n                                if (fileName.includes(keyword)) {\r\n                                    return 1;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n                return 0;\r\n            });\r\n            \r\n            setVideoInfos(data);\r\n        \r\n            const total = Math.ceil(data.length / itemsPerPage);\r\n            setTotalPages(total);\r\n        }\r\n\r\n        localStorage.removeItem(\"page\");\r\n        setPageNumber(1);\r\n    }\r\n\r\n    const handleOnKeyDown = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            setVideoUrl(e.target.value);\r\n            upload();\r\n        }\r\n    }\r\n\r\n    // Remove one video item\r\n    const handleRemoveItem = (id) => {\r\n        VideoService.removeVideo(id)\r\n            .then(response => {\r\n                if (response.data.message === \"success\") {\r\n                    let arr = [...videoInfos];\r\n                    arr = arr.filter(item => item.id !== id);\r\n                    setVideoInfos(arr);\r\n                }\r\n            }).catch((err) => {\r\n                const resMessage = (\r\n                    err.response &&\r\n                    err.response.data &&\r\n                    err.response.data.message\r\n                ) || err.toString();\r\n\r\n                setMessage(resMessage);\r\n            });\r\n    }\r\n\r\n    function meta_restriction_age_str( meta){\r\n\t\tif( !meta)\r\n\t\t\treturn \"\";\r\n\t\treturn \" [\" + meta + \"]\";\r\n\t}\r\n\r\n    // Play one video\r\n    const handlePlayVideo = (video_url, meta_title, videoId, meta_restriction_age, meta_description) => {\r\n        setModalShow(true);\r\n        setPlayUrl(video_url);\r\n        setMetaTitle(meta_title);\r\n        setMetaDescription(meta_description);\r\n        setVideoId( videoId);\r\n    }\r\n\r\n    const onNextVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index >= videoData.length - 1) {\r\n            return;\r\n        }\r\n        const nextUrl = videoData[index + 1].video_id;\r\n        setVideoId( videoData[index + 1].id);\r\n        setPlayUrl(nextUrl);\r\n        setMetaTitle( videoData[index + 1].meta_title + meta_restriction_age_str( videoData[index + 1].meta_restriction_age))\r\n        setMetaDescription( videoData[index + 1].meta_description )\r\n        setCurrentVideoNumber( getCurrentVideoNumber() + 1)\r\n    }\r\n\r\n    const onPreviousVideo = () => {\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        if (index <= 0) {\r\n            return;\r\n        }\r\n        const prevUrl = videoData[index - 1].video_id;\r\n        setVideoId(videoData[index - 1].id);\r\n        setPlayUrl(prevUrl);\r\n        setMetaTitle(videoData[index - 1].meta_title + meta_restriction_age_str( videoData[index - 1].meta_restriction_age))\r\n        setMetaDescription( videoData[index - 1].meta_description )\r\n        setCurrentVideoNumber(getCurrentVideoNumber() - 1)\r\n    }\r\n\r\n\tfunction beep() {\r\n\t\tvar snd = new Audio(\"data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");\r\n\t\tsnd.play();\r\n\t}\r\n\r\n    const onOpenSourceUrl = () => {\r\n\t\t//beep();\r\n\t\t//Pause curent video before launching a new one\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        const nextUrl = videoData[index].video_id;\r\n\t\twindow.open( nextUrl, '_blank');\r\n\t}\r\n\r\n\tconst getCurrentVideoNumber = () => {\r\n        return videoData.findIndex(item => item.id == videoId) + 1\r\n    }\r\n\r\n    const itemClick = (video_id, videoId) => {\r\n        setPlayUrl(video_id);\r\n        setVideoId(videoId);\r\n        setMetaTitle(videoData.find(item=>item.id == videoId).meta_title);\r\n        setMetaDescription(videoData.find(item=>item.id == videoId).meta_description);\r\n    }\r\n\r\n    // playlist\r\n    const handlePlaylist = (e, video_id) => {\r\n        const playlist_title = e.target.value;\r\n        let playlist_id = '';\r\n\r\n        if (playlist_title != '') {\r\n            const selectedPlaylist = playlists.find(item => item.playlist_title == playlist_title);\r\n            playlist_id = selectedPlaylist.playlist_id;\r\n        }\r\n\r\n        VideoService.changeVideoGroup(video_id, playlist_id)\r\n    }\r\n\r\n    // edit save\r\n    const onSave = () => {\r\n        setEditShow(false);\r\n        VideoService.setManualInfo(videoId, manualTitle, manualDescription);\r\n        const index = videoData.findIndex(item => item.id == videoId);\r\n        videoData[index].manual_title = manualTitle;\r\n        videoData[index].manual_description = manualDescription;\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const renderTree = (nodes) => {\r\n        return (\r\n        <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\r\n            {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\r\n        </TreeItem>\r\n    )}\r\n\r\n    return (\r\n        <>\r\n            <Row className=\"mb-3\">\r\n                <Col md={12}>\r\n                    <TextField\r\n                        className={classes.linkInput}\r\n                        id=\"input-with-icon-textfield-top\"\r\n                        placeholder=\"Paste your youtube video link.\"\r\n                        value={videoUrl}\r\n                        onChange={(e) => setVideoUrl(e.target.value)}\r\n                        onKeyDown={(e) => handleOnKeyDown(e)}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                            <InputIcon />\r\n                            </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <Button size=\"sm\" style={{ width: \"100px\" }} disabled={videoUrl === ''} onClick={upload}>\r\n                        Upload\r\n                    </Button>\r\n                    {progressVisible && (\r\n                        <div className={classes.linerProgress}>\r\n                            <LinearProgress />\r\n                        </div>\r\n                    )}\r\n                    {message && (\r\n                        <Alert variant=\"success\" className=\"mt-3 upload_alert\" show={alertVisible}>\r\n                            <Alert.Heading>Upload Result</Alert.Heading>\r\n                            {message}\r\n                        </Alert>\r\n                    )}\r\n                </Col>\r\n                \r\n            </Row>\r\n            \r\n            <Row>\r\n                <Col md={3} className=\"card\">\r\n                    <TreeView\r\n                        className={classes.root}\r\n                        defaultCollapseIcon={<ExpandMoreIcon />}\r\n                        defaultExpandIcon={<ChevronRightIcon />}\r\n                        expanded={expanded}\r\n                        onNodeSelect={(even, nodeIds) => handleNodeSelect(even, nodeIds, \"\")}\r\n                    >\r\n                        {treeData && renderTree(treeData)}\r\n                    </TreeView>\r\n                </Col>\r\n                <Col md={9}>\r\n                    {videoInfos &&\r\n                        <VideoList \r\n                            videoInfos={videoInfos}\r\n                            totalPages={totalPages}\r\n                            itemsPerPage={itemsPerPage}\r\n                            currentPage={pageNumber}\r\n                            playlists={playlists}\r\n                            onChangeKeyword={handleChangeKeyword}\r\n                            onChangePageNumber={handleChangePageNumber}\r\n                            handleRemoveItem={handleRemoveItem}\r\n                            handlePlayVideo={handlePlayVideo}\r\n                            onChangePlaylist={handlePlaylist}\r\n                            setEditShow={setEditShow}\r\n                            setManualTitle={setManualTitle}\r\n                            setManualDescription={setManualDescription}\r\n                            setVideoId={setVideoId}\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <MyVerticallyCenteredModal\r\n                show={modalShow}\r\n                onHide={() => setModalShow(false)}\r\n                playUrl={playUrl}\r\n                metaTitle={metaTitle}\r\n                metaDescription={metaDescription}\r\n                videoData={videoData}\r\n                videoId={videoId}\r\n                onPreviousVideo={onPreviousVideo}\r\n                onNextVideo={onNextVideo}\r\n                onOpenSourceUrl={onOpenSourceUrl}\r\n                currentVideoNumber={currentVideoNumber}\r\n                itemClick={itemClick}\r\n            />\r\n            <EditDialog\r\n                show={editShow}\r\n                onHide={() => setEditShow(false)}\r\n                manualTitle={manualTitle}\r\n                manualDescription={manualDescription}\r\n                setManualTitle={setManualTitle}\r\n                setManualDescription={setManualDescription}\r\n                onSave={onSave}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nconst VideoList = (props) => {\r\n    const classes = useStyles();\r\n\r\n    const renderItem = (data) => (\r\n        <ListGroup.Item key={data.id}>\r\n            <Media>\r\n                <Image thumbnail src={data.meta_image} className=\"mr-3\" />\r\n                <Media.Body>\r\n                    <h5><span style={{color: 'green'}}>{data.manual_title && data.manual_title}</span></h5>\r\n                    <h5><span>{data.meta_title}</span></h5>\r\n                    <p style={{marginBottom: \"0px\"}}><span>ID : </span><code>{getVideoId(data.video_id)}</code></p>\r\n                    <p style={{marginBottom: \"2px\"}}><span style={{color: 'green'}}>{data.manual_description && data.manual_description}</span></p>\r\n                    <p style={{marginBottom: \"2px\"}}><span>{data.meta_description}</span></p>\r\n                    {data.meta_keyword && (\r\n                        <p><small><span>Keywords : </span><span>{data.meta_keyword}</span></small></p>\r\n                    )}\r\n                    <p><small><i><span>Created Time : </span><span>{data.dateTime}</span></i></small></p>\r\n                    \r\n                    <Row>\r\n                        <Col>\r\n                            <Button variant=\"success\" size=\"sm\" className=\"mr-2\" onClick={() => props.handlePlayVideo( data.video_id, data.manual_title || data.meta_title, data.id, data.meta_restriction_age, data.manual_description || data.meta_description)}>Play</Button>\r\n                            <Button variant=\"info\" size=\"sm\" className=\"mr-2\" \r\n                                onClick={() => {\r\n                                    props.setManualTitle(data.manual_title ? data.manual_title : data.meta_title);\r\n                                    props.setManualDescription(data.manual_description ? data.manual_description : data.meta_description);\r\n                                    props.setEditShow(true);\r\n                                    props.setVideoId(data.id);\r\n                                }}\r\n                            >\r\n                                Edit\r\n                            </Button>\r\n                            <Button variant=\"danger\" size=\"sm\" onClick={() => props.handleRemoveItem(data.id)}>Remove</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            {props.playlists.length > 0 &&\r\n                                <MultipleSelect names={props.playlists} videoId={data.id} a={data.arr} />\r\n                            }\r\n                            {/* <select  className=\"mr-2 float-right\" onChange={(e) => props.onChangePlaylist(e, data.id)}>\r\n                                <option value=\"\">Non Playlist</option>\r\n                                {props.playlists.map((item) => {\r\n                                    return <option selected={data.playlist_id == item.playlist_id}>{item.playlist_title}</option>;\r\n                                })}\r\n                            </select> */}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    \r\n                    \r\n                </Media.Body>\r\n            </Media>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    const showPagenationItem = () => {\r\n        return (\r\n            <Pagination\r\n                color=\"primary\"\r\n                className=\"mt-3\"\r\n                shape=\"rounded\"\r\n                count={props.totalPages}\r\n                page={props.currentPage}\r\n                onChange={(event, val)=>props.onChangePageNumber(val)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const doSomethingWith = (e) => {\r\n        if (e.key === 'Enter' || e.keyCode === 13) {\r\n            props.onChangeKeyword(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"card\">\r\n                <TextField\r\n                    className={classes.margin}\r\n                    id=\"input-with-icon-textfield\"\r\n                    placeholder=\"Search\"\r\n                    onKeyDown={doSomethingWith}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                        <SearchIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n                />\r\n                <h3 className=\"card-header\">List of Videos</h3>\r\n                <ListGroup variant=\"flush\">\r\n                    {props.videoInfos\r\n                        && props.videoInfos.map((video, index) => {\r\n                            if((props.currentPage-1)*props.itemsPerPage <=index && (props.currentPage)*props.itemsPerPage > index ) {\r\n                                return renderItem(video)\r\n                            } else {\r\n                                return null\r\n                            }\r\n                        })}\r\n                </ListGroup>\r\n                {showPagenationItem()}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default VideoUpload","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\ReceivedPlaylist\\ReceivedPlaylist.js",["261","262","263"],"import React, { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport InsertLink from '@material-ui/icons/InsertLink';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\n\r\nimport {\r\n  Row,\r\n  Col,\r\n  Button,\r\n} from 'react-bootstrap';\r\n\r\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\r\nimport GlobalData from '../../../tools/GlobalData';\r\n\r\nconst front_end_server = GlobalData.front_end_server_ip + \":\" + GlobalData.front_end_server_port;\r\n//const back_end_server = GlobalData.back_end_server_ip + \":3000\";\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n  root: {\r\n    flexShrink: 0,\r\n    marginLeft: theme.spacing(2.5),\r\n  },\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n  const classes = useStyles1();\r\n  const theme = useTheme();\r\n  const { count, page, rowsPerPage, onChangePage } = props;\r\n\r\n  const handleFirstPageButtonClick = (event) => {\r\n    onChangePage(event, 0);\r\n  };\r\n\r\n  const handleBackButtonClick = (event) => {\r\n    onChangePage(event, page - 1);\r\n  };\r\n\r\n  const handleNextButtonClick = (event) => {\r\n    onChangePage(event, page + 1);\r\n  };\r\n\r\n  const handleLastPageButtonClick = (event) => {\r\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        onClick={handleFirstPageButtonClick}\r\n        disabled={page === 0}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleNextButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={handleLastPageButtonClick}\r\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n  count: PropTypes.number.isRequired,\r\n  onChangePage: PropTypes.func.isRequired,\r\n  page: PropTypes.number.isRequired,\r\n  rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles2 = makeStyles({\r\n  table: {\r\n    minWidth: 500,\r\n  },\r\n  pasteTextField: {\r\n    width: '100%',\r\n    marginBottom: 30\r\n  }\r\n});\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n  const classes = useStyles2();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n  const [data, setData] = useState([]);\r\n  const [rows, setRows] = useState([]);\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\r\n  const [searchString, setSearchString] = useState('');\r\n  const [errorText, setErrorText] = useState('');\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  useEffect(() => {\r\n    if (!isLoaded) {\r\n      ReceivedPlaylistService.getAllPlaylist()\r\n        .then(async response => {\r\n          if(response.data && response.data.length > 0) {\r\n            setData(response.data);\r\n            setRows(response.data);\r\n          }\r\n        })\r\n      setIsLoaded(true)\r\n    }\r\n  })\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  // playlistId\r\n  const handleDelete = (id) => {\r\n    ReceivedPlaylistService.removePlaylist(id)\r\n      .then(response => {\r\n          if (response.data.message === \"success\") {\r\n              window.location.reload();\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n  }\r\n\r\n  // custom\r\n  const handleInsertPlaylist = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      addPlaylist();\r\n    }\r\n  }\r\n\r\n  const handleSearch = (e) => {\r\n    if (e.key === 'Enter' || e.keyCode === 13) {\r\n      let arr = [...data];\r\n      arr = arr.filter(item => (item.playlist_title + item.sender_name).includes(e.target.value.trim().toLowerCase()));\r\n      setRows(arr);\r\n    }\r\n  }\r\n\r\n  const handleAddPlaylist = () => {\r\n    addPlaylist();\r\n  }\r\n\r\n  function addPlaylist() {\r\n    const playlist_id = newPlaylistUrl.split('/playlist/')[1];\r\n    ReceivedPlaylistService.addPlaylist(playlist_id)\r\n      .then(response => {\r\n          if (response.data.message === \"success\") {\r\n              window.location.reload();\r\n          }\r\n          if (response.data.message === \"cannotregister\") {\r\n              setErrorText('The playlist is already registered.');\r\n              setTimeout(() => {\r\n                setErrorText('');\r\n              }, 2000);\r\n          }\r\n      }).catch((err) => {\r\n          const resMessage = (\r\n              err.response &&\r\n              err.response.data &&\r\n              err.response.data.message\r\n          ) || err.toString();\r\n\r\n          console.log(resMessage);\r\n      });\r\n\r\n    document.getElementById('input-with-icon-textfield').value = '';\r\n    setNewPlaylistUrl('');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {errorText &&\r\n          <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\r\n      }\r\n      <Row  className='mt-5'>\r\n        <Col md={5}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Paste playlist url.\"\r\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\r\n            onKeyDown={handleInsertPlaylist}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <InsertLink />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n        <Col md={4}>\r\n          <Button size='sm' onClick={handleAddPlaylist}>\r\n            Add Playlist\r\n          </Button>\r\n        </Col>\r\n        <Col md={3}>\r\n          <TextField\r\n            className={classes.pasteTextField}\r\n            id=\"input-with-icon-textfield\"\r\n            placeholder=\"Search\"\r\n            onChange={(e) => setSearchString(e.target.value)}\r\n            onKeyDown={handleSearch}\r\n            InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n            ),\r\n            }}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      \r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"custom pagination table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>No</TableCell>\r\n              <TableCell align=\"center\">Playlist Title</TableCell>\r\n              <TableCell align=\"center\">Sender</TableCell>\r\n              <TableCell align=\"center\">Video Count</TableCell>\r\n              <TableCell align=\"center\">Playlist Status</TableCell>\r\n              <TableCell align=\"center\">Received Date</TableCell>\r\n              <TableCell align=\"center\">Operate</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {(rowsPerPage > 0\r\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              : rows\r\n            ).map((row, index) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {index + 1}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.playlist_title}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.sender_name}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.video_count}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.playlist_status == '1' ? 'Public' : 'Private'}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  {row.dateTime}\r\n                </TableCell>\r\n                <TableCell style={{ width: 160 }} align=\"center\">\r\n                  <Button size='sm' style={{marginRight: 5}} href={front_end_server + '/playlist/' + row.playlist_id} target='_blank'>Open</Button>\r\n                  <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)}>Delete</Button>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n            {emptyRows > 0 && (\r\n              <TableRow style={{ height: 53 * emptyRows }}>\r\n                <TableCell colSpan={6} />\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                colSpan={7}\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                SelectProps={{\r\n                  inputProps: { 'aria-label': 'rows per page' },\r\n                  native: true,\r\n                }}\r\n                onChangePage={handleChangePage}\r\n                onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                ActionsComponent={TablePaginationActions}\r\n              />\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\auth-header.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\user.service.js",["264"],"import axios from 'axios';\r\nimport authHeader from './auth-header';\r\nimport Auth from \"./auth.service\";\r\n\r\nimport GlobalData from '../tools/GlobalData';\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/user/';\r\n//const API_URL = `http://1-58.69.222.102:3030/api/user/`;\r\n\r\nconst getPublicContent=()=>{\r\n    return axios.get(`${API_URL}all`);\r\n}\r\nconst getUserBoard=()=>{\r\n    return axios.get(`${API_URL}user`, {headers: authHeader()});\r\n}\r\nconst getModeratorBoard=()=>{\r\n    return axios.get(`${API_URL}mod`, {headers:authHeader()});\r\n}\r\nconst getAdminBoard=()=>{\r\n    return axios.get(`${API_URL}admin`, {headers:authHeader()});\r\n}\r\nconst addTokens = (ss) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}add_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\r\n}\r\nconst addTokenCode=(token_code)=>{\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}add_token_code?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_code=${token_code}`);\r\n}\r\nconst getPrepaidTokens = () => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.get(`${API_URL}get_prepaid_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\r\n}\r\nconst addPrepaidToken = (newTokenCount) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.post(`${API_URL}add_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_count=${newTokenCount}`);\r\n}\r\nconst deletePrepaidToken = (id) => {\r\n    const currentUser = Auth.getCurrentUser();\r\n    return axios.post(`${API_URL}delete_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&id=${id}`);\r\n}\r\nexport default {\r\n    getPublicContent,\r\n    getUserBoard,\r\n    getModeratorBoard,\r\n    getAdminBoard,\r\n    addTokens,\r\n    addTokenCode,\r\n    getPrepaidTokens,\r\n    addPrepaidToken,\r\n    deletePrepaidToken,\r\n};\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\playlist.service.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\MyVerticallyCenteredModal.js",["265","266"],"import Modal from 'react-bootstrap/Modal';\r\nimport ReactPlayer from 'react-player';\r\nimport { Paper } from '@material-ui/core';\r\n\r\nimport React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport GlobalData from '../../../tools/GlobalData';\r\n\r\nimport {\r\n    Button,\r\n    Row,\r\n    Col,\r\n} from 'react-bootstrap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: '36ch',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nconst MyVerticallyCenteredModal = (props) => {\r\n    const [playingStatus, setPlayingStatus] = useState(true);\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Modal\r\n            {...props}\r\n            size=\"xl\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <Modal.Header closeButton maxButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    {props.metaTitle}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Row>\r\n                    <Col md={9}>\r\n                        <ReactPlayer url={props.playUrl} playing={true} width={GlobalData.modal_video_player_width} height={GlobalData.modal_video_player_height} controls={true} playing={playingStatus} />\r\n                        <p><i>{props.metaDescription}</i></p>\r\n                    </Col>\r\n                    <Col md={3} style={{borderLeft: '1px solid lightgray'}}>\r\n                        <h5 style={{borderBottom: '1px solid lightgray', paddingBottom: 5, display: 'flex', justifyContent: 'center'}}>Video List</h5>\r\n                        <Paper style={{height: 450, overflow: 'auto'}}>\r\n                        <List className={classes.root}>\r\n\r\n                            {props.videoData.length > 0 &&\r\n                                props.videoData.map(item => {\r\n                                    let title = item.manual_title || item.meta_title;\r\n                                    let description = item.manual_description || item.meta_description;\r\n\r\n                                    return (\r\n                                    <>\r\n                                        <ListItem alignItems=\"flex-start\"\r\n                                            button\r\n                                            onClick={() => props.itemClick(item.video_id, item.id)}\r\n                                            selected={props.videoId == item.id}\r\n                                        >\r\n                                            <ListItemAvatar>\r\n                                                <Avatar alt=\"Remy Sharp\" src={item.meta_image} />\r\n                                            </ListItemAvatar>\r\n                                            <ListItemText\r\n                                                primary={title && title.length > 20 ? title.substring(0, 20) + '...' : title}\r\n                                                secondary={\r\n                                                    <React.Fragment>\r\n                                                    <Typography\r\n                                                        component=\"span\"\r\n                                                        variant=\"body2\"\r\n                                                        className={classes.inline}\r\n                                                        color=\"textPrimary\"\r\n                                                    >\r\n                                                       { description && description.length > 40 ? description.substring(0, 40) + '...' : description}\r\n                                                    </Typography>\r\n                                                    </React.Fragment>\r\n                                                }\r\n                                            />\r\n                                        </ListItem>\r\n                                        <Divider variant=\"inset\" component=\"li\" />\r\n                                    </>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </List>\r\n                        </Paper>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                {/* <p style={{marginRight: '5%'}}>{props.currentVideoNumber} of {Object.keys(props.videoData).length}</p> */}\r\n                <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\r\n                <Button style={{marginRight: '10px'}} variant=\"info\" onClick={() => {\r\n                    setPlayingStatus(false);\r\n                    props.onOpenSourceUrl();\r\n                }}>\r\n                    Source with Bookmark\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onPreviousVideo}>Previous</Button>\r\n                <Button style={{marginRight: '10px'}} variant=\"primary\" onClick={props.onNextVideo}>Next</Button>\r\n                <Button style={{marginRight: '10px'}} variant=\"info\" onClick={() => {\r\n                    setPlayingStatus(false);\r\n                    props.onOpenSourceUrl();\r\n                }}>SB</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default MyVerticallyCenteredModal;","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\image.service.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\ppt.service.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\received-playlist.service.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\file-upload.service.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\tools\\GlobalData.js",["267"],"export default {\r\n //dev\r\n  back_end_server_ip: 'http://localhost',\r\n  back_end_server_port: '3030',\r\n  front_end_server_ip: 'http://localhost',\r\n  front_end_server_port: '3000',\r\n\r\n  //production\r\n  //back_end_server_ip: 'https://aic.space',\r\n  //back_end_server_port: '3030',\r\n  //front_end_server_ip: 'https://aic.space',\r\n  //front_end_server_port: '443',\r\n\r\n  //old-back_end_server_ip: 'https://158.69.222.102',\r\n  //old-back_end_server_ip: 'http://127.0.0.1',\r\n\r\n  modal_video_player_width: 'auto',\r\n  modal_video_player_height: '100%'\r\n};\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\video.service.js",[],"C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Video\\MutipleSelect.js",["268","269","270","271"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { StepLabel } from '@material-ui/core';\r\n\r\nimport VideoService from '../../../services/video.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(0),\r\n    minWidth: 200,\r\n    maxWidth: 250,\r\n    float: 'right'\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function MultipleSelect(props) {\r\n  const [myPlayLists, setMyPlayLists] = useState(props.a);\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (e) => {\r\n    setMyPlayLists(e.target.value)\r\n\r\n    // .then(response => {\r\n    //     setMessage(response.data.message);\r\n    //     setAlertVisible(true)\r\n    //     setTimeout(() => {\r\n    //         setAlertVisible(false)\r\n    //     }, 2000)\r\n\r\n    //     setProgressVisible(false);\r\n\r\n    //     if (response.data.message === 'success') {\r\n    //         getAllVideos();\r\n    //         setVideoUrl('');\r\n    //     }\r\n    // })\r\n\r\n  }\r\n\r\n  const savePlaylist = () => {\r\n    VideoService.addPlaylistIds(props.videoId, myPlayLists)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FormControl className={classes.formControl}>\r\n        <Select\r\n          labelId=\"demo-mutiple-name-label\"\r\n          id=\"demo-mutiple-name\"\r\n          multiple\r\n          value={myPlayLists}\r\n          onChange={handleChange}\r\n          onClose={savePlaylist}\r\n          input={<Input />}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {props.names.map((name) => (\r\n            <MenuItem key={name.id} value={name.id}>\r\n              {name.playlist_title}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Video\\EditDialog.js",["272","273","274","275"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputIcon from '@material-ui/icons/Create';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 110,\r\n        flexGrow: 1,\r\n        maxWidth: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    linkInput: {\r\n        width: \"100%\",\r\n        marginBottom: theme.spacing(1)\r\n    },\r\n    linerProgress: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nconst EditDialog = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Modal\r\n          {...props}\r\n          size=\"md\"\r\n          aria-labelledby=\"contained-modal-title-vcenter\"\r\n          centered\r\n      >\r\n          <Modal.Header closeButton>\r\n              <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                  Edit Title & Description\r\n              </Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <p><b>Manual title</b></p>\r\n            <TextField\r\n                className={classes.linkInput}\r\n                id=\"input-with-icon-textfield-top\"\r\n                placeholder=\"Input manual title.\"\r\n                value={props.manualTitle}\r\n                onChange={(e) => props.setManualTitle(e.target.value)}\r\n            />\r\n            <br />\r\n            <br />\r\n            <p><b>Manual description</b></p>\r\n            <TextField\r\n                className={classes.linkInput}\r\n                id=\"input-with-icon-textfield-top\"\r\n                placeholder=\"Input manual description.\"\r\n                multiline={true}\r\n                rows={3}\r\n                value={props.manualDescription}\r\n                onChange={(e) => props.setManualDescription(e.target.value)}\r\n            />\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"success\" onClick={props.onSave}>Save</Button>\r\n              <Button variant=\"primary\" onClick={props.onHide}>Close</Button>\r\n          </Modal.Footer>\r\n      </Modal>\r\n  );\r\n}\r\n\r\nexport default EditDialog;","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\components\\Service\\Playlist\\MutipleSelect.js",["276","277","278","279","280"],"import React, { useState, useEffect } from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { StepLabel } from '@material-ui/core';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport VideoService from '../../../services/video.service';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(0),\r\n    minWidth: 200,\r\n    maxWidth: 250,\r\n    float: 'right'\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nfunction getStyles(name, personName, theme) {\r\n  return {\r\n    fontWeight:\r\n      personName.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function MultipleSelect(props) {\r\n  const [myPlayLists, setMyPlayLists] = useState(props.a);\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (e) => {\r\n    setMyPlayLists(e.target.value)\r\n\r\n    // .then(response => {\r\n    //     setMessage(response.data.message);\r\n    //     setAlertVisible(true)\r\n    //     setTimeout(() => {\r\n    //         setAlertVisible(false)\r\n    //     }, 2000)\r\n\r\n    //     setProgressVisible(false);\r\n\r\n    //     if (response.data.message === 'success') {\r\n    //         getAllVideos();\r\n    //         setVideoUrl('');\r\n    //     }\r\n    // })\r\n\r\n  }\r\n\r\n  const savePlaylist = () => {\r\n    VideoService.addPlaylistIds(props.videoId, myPlayLists)\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <FormControl className={classes.formControl}>\r\n        <Select\r\n          labelId=\"demo-mutiple-name-label\"\r\n          id=\"demo-mutiple-name\"\r\n          multiple\r\n          value={myPlayLists}\r\n          onChange={handleChange}\r\n          onClose={savePlaylist}\r\n          input={<Input />}\r\n          MenuProps={MenuProps}\r\n        >\r\n          {props.names.map((name) => (\r\n            <MenuItem key={name.id} value={name.id}>\r\n              {name.playlist_title}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Saurabh\\Desktop\\freelancer\\Vivenda\\videnda-frontend\\src\\services\\execute.service.js",["281"],"import axios from 'axios';\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nimport GlobalData from '../tools/GlobalData';\r\n\r\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/execute_service?';\r\n//const API_URL = `http://1-58.69.222.102:3030/api/execute_service?`;\r\n//const API_URL = `http://local--host:3030/api/execute_service?`;\r\n\r\nconst getWeather = (cityName)=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_weather&user_id=${user.user_id}&user_key=${user.access_key}&city=${cityName}`);\r\n}\r\n\r\nconst getTokenHistory=()=>{\r\n    const user=AuthService.getCurrentUser();\r\n    return axios.get(`${API_URL}server=get_tokenHistory&user_id=${user.user_id}`);\r\n}\r\n\r\nexport default {\r\n    getWeather,\r\n    getTokenHistory,\r\n};\r\n",{"ruleId":"282","severity":1,"message":"283","line":134,"column":1,"nodeType":"284","endLine":146,"endColumn":3},{"ruleId":"285","severity":1,"message":"286","line":28,"column":69,"nodeType":"287","messageId":"288","endLine":28,"endColumn":71},{"ruleId":"289","severity":1,"message":"290","line":30,"column":8,"nodeType":"291","messageId":"292","endLine":30,"endColumn":31},{"ruleId":"289","severity":1,"message":"293","line":116,"column":10,"nodeType":"291","messageId":"292","endLine":116,"endColumn":22},{"ruleId":"294","severity":1,"message":"295","line":121,"column":3,"nodeType":"291","endLine":121,"endColumn":12,"suggestions":"296"},{"ruleId":"285","severity":1,"message":"286","line":183,"column":31,"nodeType":"287","messageId":"288","endLine":183,"endColumn":33},{"ruleId":"285","severity":1,"message":"286","line":290,"column":49,"nodeType":"287","messageId":"288","endLine":290,"endColumn":51},{"ruleId":"285","severity":1,"message":"286","line":290,"column":89,"nodeType":"287","messageId":"288","endLine":290,"endColumn":91},{"ruleId":"285","severity":1,"message":"286","line":293,"column":30,"nodeType":"287","messageId":"288","endLine":293,"endColumn":32},{"ruleId":"285","severity":1,"message":"286","line":298,"column":30,"nodeType":"287","messageId":"288","endLine":298,"endColumn":32},{"ruleId":"289","severity":1,"message":"297","line":153,"column":36,"nodeType":"291","messageId":"292","endLine":153,"endColumn":44},{"ruleId":"294","severity":1,"message":"298","line":198,"column":8,"nodeType":"299","endLine":198,"endColumn":10,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":567,"column":62,"nodeType":"303","messageId":"304","endLine":567,"endColumn":64},{"ruleId":"294","severity":1,"message":"298","line":102,"column":8,"nodeType":"299","endLine":102,"endColumn":15,"suggestions":"305"},{"ruleId":"294","severity":1,"message":"306","line":123,"column":8,"nodeType":"299","endLine":123,"endColumn":22,"suggestions":"307"},{"ruleId":"294","severity":1,"message":"308","line":261,"column":5,"nodeType":"291","endLine":261,"endColumn":14,"suggestions":"309"},{"ruleId":"282","severity":1,"message":"310","line":45,"column":1,"nodeType":"284","endLine":305,"endColumn":2},{"ruleId":"294","severity":1,"message":"311","line":70,"column":8,"nodeType":"299","endLine":70,"endColumn":15,"suggestions":"312"},{"ruleId":"285","severity":1,"message":"286","line":77,"column":35,"nodeType":"287","messageId":"288","endLine":77,"endColumn":37},{"ruleId":"285","severity":1,"message":"286","line":77,"column":78,"nodeType":"287","messageId":"288","endLine":77,"endColumn":80},{"ruleId":"301","severity":1,"message":"313","line":98,"column":42,"nodeType":"303","messageId":"304","endLine":98,"endColumn":44},{"ruleId":"285","severity":1,"message":"286","line":143,"column":47,"nodeType":"287","messageId":"288","endLine":143,"endColumn":49},{"ruleId":"285","severity":1,"message":"286","line":153,"column":59,"nodeType":"287","messageId":"288","endLine":153,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":174,"column":47,"nodeType":"287","messageId":"288","endLine":174,"endColumn":49},{"ruleId":"285","severity":1,"message":"286","line":184,"column":59,"nodeType":"287","messageId":"288","endLine":184,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":205,"column":47,"nodeType":"287","messageId":"288","endLine":205,"endColumn":49},{"ruleId":"289","severity":1,"message":"314","line":214,"column":11,"nodeType":"291","messageId":"292","endLine":214,"endColumn":15},{"ruleId":"285","severity":1,"message":"286","line":222,"column":59,"nodeType":"287","messageId":"288","endLine":222,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":229,"column":52,"nodeType":"287","messageId":"288","endLine":229,"endColumn":54},{"ruleId":"285","severity":1,"message":"286","line":237,"column":59,"nodeType":"287","messageId":"288","endLine":237,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":237,"column":117,"nodeType":"287","messageId":"288","endLine":237,"endColumn":119},{"ruleId":"285","severity":1,"message":"286","line":238,"column":65,"nodeType":"287","messageId":"288","endLine":238,"endColumn":67},{"ruleId":"285","severity":1,"message":"286","line":238,"column":129,"nodeType":"287","messageId":"288","endLine":238,"endColumn":131},{"ruleId":"285","severity":1,"message":"286","line":247,"column":47,"nodeType":"287","messageId":"288","endLine":247,"endColumn":49},{"ruleId":"289","severity":1,"message":"315","line":1,"column":17,"nodeType":"291","messageId":"292","endLine":1,"endColumn":26},{"ruleId":"289","severity":1,"message":"316","line":11,"column":8,"nodeType":"291","messageId":"292","endLine":11,"endColumn":19},{"ruleId":"282","severity":1,"message":"310","line":125,"column":1,"nodeType":"284","endLine":532,"endColumn":2},{"ruleId":"289","severity":1,"message":"317","line":130,"column":12,"nodeType":"291","messageId":"292","endLine":130,"endColumn":20},{"ruleId":"289","severity":1,"message":"318","line":130,"column":22,"nodeType":"291","messageId":"292","endLine":130,"endColumn":33},{"ruleId":"289","severity":1,"message":"319","line":131,"column":22,"nodeType":"291","messageId":"292","endLine":131,"endColumn":33},{"ruleId":"289","severity":1,"message":"320","line":132,"column":26,"nodeType":"291","messageId":"292","endLine":132,"endColumn":41},{"ruleId":"289","severity":1,"message":"321","line":133,"column":12,"nodeType":"291","messageId":"292","endLine":133,"endColumn":20},{"ruleId":"289","severity":1,"message":"322","line":133,"column":22,"nodeType":"291","messageId":"292","endLine":133,"endColumn":33},{"ruleId":"289","severity":1,"message":"323","line":134,"column":29,"nodeType":"291","messageId":"292","endLine":134,"endColumn":47},{"ruleId":"289","severity":1,"message":"324","line":150,"column":12,"nodeType":"291","messageId":"292","endLine":150,"endColumn":22},{"ruleId":"289","severity":1,"message":"325","line":150,"column":24,"nodeType":"291","messageId":"292","endLine":150,"endColumn":37},{"ruleId":"294","severity":1,"message":"326","line":158,"column":8,"nodeType":"299","endLine":158,"endColumn":10,"suggestions":"327"},{"ruleId":"289","severity":1,"message":"328","line":190,"column":15,"nodeType":"291","messageId":"292","endLine":190,"endColumn":21},{"ruleId":"285","severity":1,"message":"286","line":202,"column":21,"nodeType":"287","messageId":"288","endLine":202,"endColumn":23},{"ruleId":"285","severity":1,"message":"329","line":256,"column":28,"nodeType":"287","messageId":"288","endLine":256,"endColumn":30},{"ruleId":"285","severity":1,"message":"286","line":257,"column":81,"nodeType":"287","messageId":"288","endLine":257,"endColumn":83},{"ruleId":"285","severity":1,"message":"286","line":330,"column":59,"nodeType":"287","messageId":"288","endLine":330,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":343,"column":59,"nodeType":"287","messageId":"288","endLine":343,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":358,"column":59,"nodeType":"287","messageId":"288","endLine":358,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":364,"column":52,"nodeType":"287","messageId":"288","endLine":364,"endColumn":54},{"ruleId":"285","severity":1,"message":"286","line":370,"column":51,"nodeType":"287","messageId":"288","endLine":370,"endColumn":53},{"ruleId":"285","severity":1,"message":"286","line":371,"column":57,"nodeType":"287","messageId":"288","endLine":371,"endColumn":59},{"ruleId":"285","severity":1,"message":"286","line":379,"column":59,"nodeType":"287","messageId":"288","endLine":379,"endColumn":61},{"ruleId":"289","severity":1,"message":"330","line":390,"column":75,"nodeType":"291","messageId":"292","endLine":390,"endColumn":85},{"ruleId":"285","severity":1,"message":"286","line":454,"column":73,"nodeType":"287","messageId":"288","endLine":454,"endColumn":75},{"ruleId":"285","severity":1,"message":"286","line":459,"column":67,"nodeType":"287","messageId":"288","endLine":459,"endColumn":69},{"ruleId":"289","severity":1,"message":"331","line":23,"column":5,"nodeType":"291","messageId":"292","endLine":23,"endColumn":9},{"ruleId":"289","severity":1,"message":"332","line":28,"column":10,"nodeType":"291","messageId":"292","endLine":28,"endColumn":18},{"ruleId":"294","severity":1,"message":"333","line":163,"column":8,"nodeType":"299","endLine":163,"endColumn":10,"suggestions":"334"},{"ruleId":"289","severity":1,"message":"297","line":199,"column":47,"nodeType":"291","messageId":"292","endLine":199,"endColumn":55},{"ruleId":"285","severity":1,"message":"286","line":468,"column":59,"nodeType":"287","messageId":"288","endLine":468,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":481,"column":59,"nodeType":"287","messageId":"288","endLine":481,"endColumn":61},{"ruleId":"289","severity":1,"message":"314","line":493,"column":11,"nodeType":"291","messageId":"292","endLine":493,"endColumn":15},{"ruleId":"285","severity":1,"message":"286","line":501,"column":59,"nodeType":"287","messageId":"288","endLine":501,"endColumn":61},{"ruleId":"285","severity":1,"message":"286","line":507,"column":52,"nodeType":"287","messageId":"288","endLine":507,"endColumn":54},{"ruleId":"285","severity":1,"message":"286","line":513,"column":51,"nodeType":"287","messageId":"288","endLine":513,"endColumn":53},{"ruleId":"285","severity":1,"message":"286","line":514,"column":57,"nodeType":"287","messageId":"288","endLine":514,"endColumn":59},{"ruleId":"285","severity":1,"message":"329","line":522,"column":28,"nodeType":"287","messageId":"288","endLine":522,"endColumn":30},{"ruleId":"285","severity":1,"message":"286","line":523,"column":81,"nodeType":"287","messageId":"288","endLine":523,"endColumn":83},{"ruleId":"285","severity":1,"message":"286","line":534,"column":59,"nodeType":"287","messageId":"288","endLine":534,"endColumn":61},{"ruleId":"289","severity":1,"message":"293","line":118,"column":10,"nodeType":"291","messageId":"292","endLine":118,"endColumn":22},{"ruleId":"294","severity":1,"message":"295","line":123,"column":3,"nodeType":"291","endLine":123,"endColumn":12,"suggestions":"335"},{"ruleId":"285","severity":1,"message":"286","line":286,"column":40,"nodeType":"287","messageId":"288","endLine":286,"endColumn":42},{"ruleId":"282","severity":1,"message":"283","line":42,"column":1,"nodeType":"284","endLine":52,"endColumn":3},{"ruleId":"336","severity":1,"message":"337","line":53,"column":179,"nodeType":"338","messageId":"339","endLine":53,"endColumn":202},{"ruleId":"285","severity":1,"message":"286","line":71,"column":69,"nodeType":"287","messageId":"288","endLine":71,"endColumn":71},{"ruleId":"282","severity":1,"message":"283","line":1,"column":1,"nodeType":"284","endLine":19,"endColumn":3},{"ruleId":"289","severity":1,"message":"315","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":36},{"ruleId":"289","severity":1,"message":"340","line":7,"column":10,"nodeType":"291","messageId":"292","endLine":7,"endColumn":19},{"ruleId":"289","severity":1,"message":"341","line":41,"column":10,"nodeType":"291","messageId":"292","endLine":41,"endColumn":19},{"ruleId":"289","severity":1,"message":"342","line":54,"column":9,"nodeType":"291","messageId":"292","endLine":54,"endColumn":14},{"ruleId":"289","severity":1,"message":"315","line":1,"column":17,"nodeType":"291","messageId":"292","endLine":1,"endColumn":26},{"ruleId":"289","severity":1,"message":"343","line":1,"column":28,"nodeType":"291","messageId":"292","endLine":1,"endColumn":36},{"ruleId":"289","severity":1,"message":"344","line":4,"column":8,"nodeType":"291","messageId":"292","endLine":4,"endColumn":17},{"ruleId":"289","severity":1,"message":"345","line":5,"column":8,"nodeType":"291","messageId":"292","endLine":5,"endColumn":22},{"ruleId":"289","severity":1,"message":"315","line":1,"column":27,"nodeType":"291","messageId":"292","endLine":1,"endColumn":36},{"ruleId":"289","severity":1,"message":"340","line":7,"column":10,"nodeType":"291","messageId":"292","endLine":7,"endColumn":19},{"ruleId":"289","severity":1,"message":"346","line":8,"column":8,"nodeType":"291","messageId":"292","endLine":8,"endColumn":18},{"ruleId":"289","severity":1,"message":"341","line":42,"column":10,"nodeType":"291","messageId":"292","endLine":42,"endColumn":19},{"ruleId":"289","severity":1,"message":"342","line":55,"column":9,"nodeType":"291","messageId":"292","endLine":55,"endColumn":14},{"ruleId":"282","severity":1,"message":"283","line":20,"column":1,"nodeType":"284","endLine":23,"endColumn":3},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'ReceivedPlaylistService' is defined but never used.","Identifier","unusedVar","'searchString' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIsLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [isLoaded] as a second argument to the useEffect Hook.",["347"],"'fileName' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'itemsPerPage'. Either include it or remove the dependency array.","ArrayExpression",["348"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["349"],"React Hook React.useEffect has missing dependencies: 'isEditDescription', 'isRotate', 'itemsPerPage', and 'totalPage'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setPageNumber' needs the current value of 'totalPage'.",["350"],"React Hook useEffect contains a call to 'setTotalPage'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [imageHistory, itemsPerPage, isRotate] as a second argument to the useEffect Hook.",["351"],"Assign arrow function to a variable before exporting as module default","React Hook useEffect has missing dependencies: 'getAllVideos' and 'history'. Either include them or remove the dependency array.",["352"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","'beep' is defined but never used.","'useEffect' is defined but never used.","'ReactPlayer' is defined but never used.","'treeData' is assigned a value but never used.","'setTreeData' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'setAlertVisible' is assigned a value but never used.","'expanded' is assigned a value but never used.","'setExpanded' is assigned a value but never used.","'setProgressVisible' is assigned a value but never used.","'playlistId' is assigned a value but never used.","'setPlaylistId' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'getAllPlaylists'. Either include it or remove the dependency array.",["353"],"'nodeId' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'renderTree' is assigned a value but never used.","'Form' is defined but never used.","'Collapse' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getAllVideos'. Either include it or remove the dependency array.",["354"],["355"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'StepLabel' is defined but never used.","'getStyles' is defined but never used.","'theme' is assigned a value but never used.","'useState' is defined but never used.","'InputIcon' is defined but never used.","'InputAdornment' is defined but never used.","'InputLabel' is defined but never used.",{"desc":"356","fix":"357"},{"desc":"358","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"356","fix":"372"},"Add dependencies array: [isLoaded]",{"range":"373","text":"374"},"Update the dependencies array to be: [itemsPerPage]",{"range":"375","text":"376"},"Update the dependencies array to be: [itemsPerPage, props]",{"range":"377","text":"378"},"Update the dependencies array to be: [imageHistory, isEditDescription, isRotate, itemsPerPage, totalPage]",{"range":"379","text":"380"},"Add dependencies array: [imageHistory, itemsPerPage, isRotate]",{"range":"381","text":"382"},"Update the dependencies array to be: [getAllVideos, history, props]",{"range":"383","text":"384"},"Update the dependencies array to be: [getAllPlaylists]",{"range":"385","text":"386"},"Update the dependencies array to be: [getAllVideos]",{"range":"387","text":"388"},{"range":"389","text":"374"},[4447,4447],", [isLoaded]",[7864,7866],"[itemsPerPage]",[3972,3979],"[itemsPerPage, props]",[4714,4728],"[imageHistory, isEditDescription, isRotate, itemsPerPage, totalPage]",[9551,9551],", [imageHistory, itemsPerPage, isRotate]",[2278,2285],"[getAllVideos, history, props]",[6666,6668],"[getAllPlaylists]",[6031,6033],"[getAllVideos]",[4586,4586]]
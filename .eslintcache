[{"/var/www/html/bstar/videnda-frontend/src/index.js":"1","/var/www/html/bstar/videnda-frontend/src/App.js":"2","/var/www/html/bstar/videnda-frontend/src/reportWebVitals.js":"3","/var/www/html/bstar/videnda-frontend/src/services/auth.service.js":"4","/var/www/html/bstar/videnda-frontend/src/components/Home.js":"5","/var/www/html/bstar/videnda-frontend/src/components/Home-bak.js":"6","/var/www/html/bstar/videnda-frontend/src/components/NoMatch.js":"7","/var/www/html/bstar/videnda-frontend/src/components/Auth/Login.js":"8","/var/www/html/bstar/videnda-frontend/src/components/Auth/Register.js":"9","/var/www/html/bstar/videnda-frontend/src/components/Auth/ChangePassword.js":"10","/var/www/html/bstar/videnda-frontend/src/components/Auth/Deregister.js":"11","/var/www/html/bstar/videnda-frontend/src/components/Auth/ForgotPassword.js":"12","/var/www/html/bstar/videnda-frontend/src/components/Auth/VerifyEmail.js":"13","/var/www/html/bstar/videnda-frontend/src/components/Auth/ResetPassword.js":"14","/var/www/html/bstar/videnda-frontend/src/components/User/Profile.js":"15","/var/www/html/bstar/videnda-frontend/src/components/User/BoardUser.js":"16","/var/www/html/bstar/videnda-frontend/src/components/User/BoardModerator.js":"17","/var/www/html/bstar/videnda-frontend/src/components/User/BoardAdmin.js":"18","/var/www/html/bstar/videnda-frontend/src/components/User/AddTokenCode.js":"19","/var/www/html/bstar/videnda-frontend/src/components/User/CategoryPlaylists.js":"20","/var/www/html/bstar/videnda-frontend/src/components/User/Admin/CategoryManagement.js":"21","/var/www/html/bstar/videnda-frontend/src/components/User/Admin/TokenManagement.js":"22","/var/www/html/bstar/videnda-frontend/src/components/Service/ExecuteService.js":"23","/var/www/html/bstar/videnda-frontend/src/components/Service/Image/UploadImage.js":"24","/var/www/html/bstar/videnda-frontend/src/components/Service/PPT/PPTFileList.js":"25","/var/www/html/bstar/videnda-frontend/src/components/Service/Image/EditImage.js":"26","/var/www/html/bstar/videnda-frontend/src/components/Service/PPT/EditPPT.js":"27","/var/www/html/bstar/videnda-frontend/src/components/Service/Video/UploadVideo.js":"28","/var/www/html/bstar/videnda-frontend/src/components/Service/Playlist/VideoList.js":"29","/var/www/html/bstar/videnda-frontend/src/components/Service/ReceivedPlaylist/ReceivedPlaylist.js":"30","/var/www/html/bstar/videnda-frontend/src/components/Service/Playlist/Playlist.js":"31","/var/www/html/bstar/videnda-frontend/src/services/auth-header.js":"32","/var/www/html/bstar/videnda-frontend/src/services/user.service.js":"33","/var/www/html/bstar/videnda-frontend/src/services/category.service.js":"34","/var/www/html/bstar/videnda-frontend/src/services/playlist.service.js":"35","/var/www/html/bstar/videnda-frontend/src/services/video.service.js":"36","/var/www/html/bstar/videnda-frontend/src/components/Service/Video/EditDialog.js":"37","/var/www/html/bstar/videnda-frontend/src/components/Service/Video/VideoPlayer.js":"38","/var/www/html/bstar/videnda-frontend/src/services/received-playlist.service.js":"39","/var/www/html/bstar/videnda-frontend/src/tools/GlobalData.js":"40","/var/www/html/bstar/videnda-frontend/src/layouts/App.js":"41","/var/www/html/bstar/videnda-frontend/src/layouts/Home.js":"42","/var/www/html/bstar/videnda-frontend/src/components/Common/SelectOptions.js":"43","/var/www/html/bstar/videnda-frontend/src/services/downloadfile.js":"44","/var/www/html/bstar/videnda-frontend/src/services/ppt.service.js":"45","/var/www/html/bstar/videnda-frontend/src/services/image.service.js":"46","/var/www/html/bstar/videnda-frontend/src/services/file-upload.service.js":"47","/var/www/html/bstar/videnda-frontend/src/services/execute.service.js":"48","/var/www/html/bstar/videnda-frontend/src/components/User/Admin/blog/Blogs.js":"49","/var/www/html/bstar/videnda-frontend/src/services/blog.service.js":"50","/var/www/html/bstar/videnda-frontend/src/components/Service/Playlist/BlogPlaylist.js":"51","/var/www/html/bstar/videnda-frontend/src/components/User/Admin/blog/BlogSingle.js":"52"},{"size":598,"mtime":1619958442718,"results":"53","hashOfConfig":"54"},{"size":8203,"mtime":1620423172485,"results":"55","hashOfConfig":"54"},{"size":362,"mtime":1619958442718,"results":"56","hashOfConfig":"54"},{"size":3036,"mtime":1619958442718,"results":"57","hashOfConfig":"54"},{"size":4877,"mtime":1619958442714,"results":"58","hashOfConfig":"54"},{"size":3497,"mtime":1619958442714,"results":"59","hashOfConfig":"54"},{"size":309,"mtime":1619958442714,"results":"60","hashOfConfig":"54"},{"size":4063,"mtime":1619958442714,"results":"61","hashOfConfig":"54"},{"size":6523,"mtime":1619958442714,"results":"62","hashOfConfig":"54"},{"size":6794,"mtime":1619958442714,"results":"63","hashOfConfig":"54"},{"size":3710,"mtime":1619958442714,"results":"64","hashOfConfig":"54"},{"size":4215,"mtime":1619958442714,"results":"65","hashOfConfig":"54"},{"size":2062,"mtime":1619958442714,"results":"66","hashOfConfig":"54"},{"size":7683,"mtime":1619958442714,"results":"67","hashOfConfig":"54"},{"size":2919,"mtime":1619958442718,"results":"68","hashOfConfig":"54"},{"size":770,"mtime":1619958442718,"results":"69","hashOfConfig":"54"},{"size":785,"mtime":1619958442718,"results":"70","hashOfConfig":"54"},{"size":773,"mtime":1619958442718,"results":"71","hashOfConfig":"54"},{"size":5080,"mtime":1619958442718,"results":"72","hashOfConfig":"54"},{"size":2402,"mtime":1619958442718,"results":"73","hashOfConfig":"54"},{"size":17763,"mtime":1620334304585,"results":"74","hashOfConfig":"54"},{"size":10698,"mtime":1619963047803,"results":"75","hashOfConfig":"54"},{"size":8438,"mtime":1619958442714,"results":"76","hashOfConfig":"54"},{"size":22929,"mtime":1619958442714,"results":"77","hashOfConfig":"54"},{"size":6139,"mtime":1619958442714,"results":"78","hashOfConfig":"54"},{"size":19588,"mtime":1619958442714,"results":"79","hashOfConfig":"54"},{"size":5866,"mtime":1619958442714,"results":"80","hashOfConfig":"54"},{"size":34851,"mtime":1619958442714,"results":"81","hashOfConfig":"54"},{"size":23491,"mtime":1620677401901,"results":"82","hashOfConfig":"54"},{"size":11508,"mtime":1619958442714,"results":"83","hashOfConfig":"54"},{"size":30470,"mtime":1620666876547,"results":"84","hashOfConfig":"54"},{"size":238,"mtime":1619958442718,"results":"85","hashOfConfig":"54"},{"size":1941,"mtime":1619958442718,"results":"86","hashOfConfig":"54"},{"size":1750,"mtime":1619958442718,"results":"87","hashOfConfig":"54"},{"size":3100,"mtime":1620664236839,"results":"88","hashOfConfig":"54"},{"size":2322,"mtime":1620419660781,"results":"89","hashOfConfig":"54"},{"size":2299,"mtime":1619958442714,"results":"90","hashOfConfig":"54"},{"size":7876,"mtime":1620675583410,"results":"91","hashOfConfig":"54"},{"size":1852,"mtime":1619958442718,"results":"92","hashOfConfig":"54"},{"size":1035,"mtime":1619958442718,"results":"93","hashOfConfig":"54"},{"size":275,"mtime":1619958442718,"results":"94","hashOfConfig":"54"},{"size":260,"mtime":1619958442718,"results":"95","hashOfConfig":"54"},{"size":1300,"mtime":1619958442714,"results":"96","hashOfConfig":"54"},{"size":1584,"mtime":1619958442718,"results":"97","hashOfConfig":"54"},{"size":1596,"mtime":1619958442718,"results":"98","hashOfConfig":"54"},{"size":2136,"mtime":1619958442718,"results":"99","hashOfConfig":"54"},{"size":1276,"mtime":1619958442718,"results":"100","hashOfConfig":"54"},{"size":968,"mtime":1619958442718,"results":"101","hashOfConfig":"54"},{"size":19955,"mtime":1620673237117,"results":"102","hashOfConfig":"54"},{"size":2922,"mtime":1620666458061,"results":"103","hashOfConfig":"54"},{"size":25458,"mtime":1620676212659,"results":"104","hashOfConfig":"54"},{"size":5659,"mtime":1620670906614,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"aiogrp",{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"108"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"108"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"108"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"108"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"108"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"108"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"108"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"108"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"108"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"108"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"108"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"108"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"108"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"108"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"108"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/var/www/html/bstar/videnda-frontend/src/index.js",[],["230","231"],"/var/www/html/bstar/videnda-frontend/src/App.js",["232"],"import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\n\nimport './App.css';\n\nimport AuthService from './services/auth.service';\n\nimport Login from './components/Auth/Login';\nimport Register from './components/Auth/Register';\nimport ChangePassword from './components/Auth/ChangePassword';\nimport Deregister from './components/Auth/Deregister';\nimport ForgotPassword from './components/Auth/ForgotPassword';\nimport ResetPassword from './components/Auth/ResetPassword';\nimport VerifyEmail from './components/Auth/VerifyEmail';\nimport Home from './components/Home';\nimport HomeBK from './components/Home-bak';\nimport Profile from \"./components/User/Profile\";\nimport BoardUser from \"./components/User/BoardUser\";\nimport BoardModerator from \"./components/User/BoardModerator\";\nimport BoardAdmin from \"./components/User/BoardAdmin\";\nimport TokenManagement from \"./components/User/Admin/TokenManagement\";\nimport CategoryManagement from \"./components/User/Admin/CategoryManagement\";\nimport ExecuteService from \"./components/Service/ExecuteService\";\nimport NoMatch from './components/NoMatch';\nimport Blogs from \"./components/User/Admin/blog/Blogs\";\n// import BlogCreate from \"./components/User/Admin/blog/BlogCreate\";\n\nimport authService from './services/auth.service';\n// image\nimport UploadImage from './components/Service/Image/UploadImage';\nimport EditImage from './components/Service/Image/EditImage';\n// ppt\nimport PPTFileList from './components/Service/PPT/PPTFileList'\nimport EditPPT from './components/Service/PPT/EditPPT';\n// video\nimport UploadVideo from './components/Service/Video/UploadVideo'\nimport Playlist from './components/Service/Playlist/Playlist'\nimport BlogPlaylist from './components/Service/Playlist/BlogPlaylist'\nimport ReceivedPlaylist from './components/Service/ReceivedPlaylist/ReceivedPlaylist';\nimport VideoList from './components/Service/Playlist/VideoList'\nimport BlogSingle from './components/User/Admin/blog/BlogSingle'\nimport AddTokenCode from './components/User/AddTokenCode';\nimport CategoryPlaylists from './components/User/CategoryPlaylists';\n\n\n\nfunction App() {\n  const [showModeratorBoard, setShowModeratorBoard] = useState(false);\n  const [showAdminBoard, setShowAdminBoard] = useState(false);\n  const [currentUser, setCurrentUser] = useState(undefined);\n\n  useEffect(() => {\n    const user = authService.getCurrentUser();\n    if (user) {\n      setCurrentUser(user);\n      setShowAdminBoard(user.roles.includes(\"ROLE_ADMIN\"));\n      setShowModeratorBoard(user.roles.includes(\"ROLE_MODERATOR\"));\n    }\n  }, []);\n\n  const logOut = () => {\n    AuthService.logout();\n  }\n\n  return (\n    <Router>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" sticky=\"top\">\n        <Navbar.Brand href=\"/\">Videnda AI Engine</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/home\">Home</Nav.Link>\n            {showModeratorBoard && (\n              <Nav.Link href=\"/mod\">Moderator Board</Nav.Link>\n            )}\n            {showAdminBoard && (\n              <Nav.Link href=\"/admin\">Admin Board</Nav.Link>\n            )}\n            {currentUser && (\n              <Nav.Link href=\"/user\">User</Nav.Link>\n            )}\n          </Nav>\n          {currentUser ? (\n            <Nav className=\"ml-auto\">\n              {showAdminBoard && (\n                <NavDropdown title='Admin Menu' id=\"collasible-nav-dropdown\" alignRight >\n             \n                  <NavDropdown.Item href=\"/admin/blog/blogs\">Blog</NavDropdown.Item>\n                  <NavDropdown.Item href=\"/blog-playlists\">Blog Playlist</NavDropdown.Item>\n                  <NavDropdown.Item href=\"/token_management\">Token Management</NavDropdown.Item>\n                  <NavDropdown.Item href=\"/admin/categories\">Category Management</NavDropdown.Item>\n                </NavDropdown>\n              )}\n              \n              <NavDropdown title='Services' id=\"collasible-nav-dropdown\" alignRight >\n                <NavDropdown.Item href=\"/upload_image\">Upload Image</NavDropdown.Item>\n                <NavDropdown.Item href=\"/upload_video\">Upload Video</NavDropdown.Item>\n                <NavDropdown.Item href=\"/playlists\">Manage Playlist</NavDropdown.Item>\n                <NavDropdown.Item href=\"/received_playlist\">Received Playlists</NavDropdown.Item>\n                <NavDropdown.Item href=\"/manage_ppt/list\">Manage PowerPoint</NavDropdown.Item>\n              </NavDropdown>\n              <NavDropdown title={currentUser.username} id=\"collasible-nav-dropdown\" alignRight >\n                <NavDropdown.Item href=\"/add_token_code\">Add Tokens</NavDropdown.Item>\n                <NavDropdown.Item href=\"/execute_service\">Tokens History</NavDropdown.Item>\n                <NavDropdown.Item href=\"/profile\">View Profile</NavDropdown.Item>\n                <NavDropdown.Item href=\"/changePassword\">Change Password</NavDropdown.Item>\n                <NavDropdown.Item href=\"/deregister\">Deregister</NavDropdown.Item>\n                <NavDropdown.Item href=\"/signin\" onClick={logOut}>Logout</NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          ) : (\n              <Nav className=\"ml-auto\">\n                <Nav.Link href=\"/signin\">Login</Nav.Link>\n                <Nav.Link href=\"/register\">Sign Up</Nav.Link>\n              </Nav>\n            )}\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/home-back\">Site Map</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      <Switch>\n        <Route exact path={[\"/\", \"/home\"]} component={Home}></Route>\n          <Route path=\"/home-back\" component={HomeBK}></Route>\n          <Route path=\"/signin\" component={Login} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/changePassword\" component={ChangePassword} />\n          <Route path=\"/deregister\" component={Deregister} />\n          <Route path=\"/resetpassword/forgotpassword\" component={ForgotPassword} />\n          <Route path=\"/verifyemail\" component={VerifyEmail} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/resetpassword/reset\" component={ResetPassword} />\n          <Route path=\"/token_management\" component={TokenManagement} />\n          <Route path=\"/admin/blog/blogs\" component={Blogs}/>\n          <Route path=\"/execute_service\" component={ExecuteService} />\n          <Route path=\"/upload_image\" component={UploadImage} />\n          <Route path=\"/edit_image/:image_id\" component={EditImage} />\n          <Route path=\"/manage_ppt/list\" component={PPTFileList} />\n          <Route path=\"/manage_ppt/edit_ppt/:ppt_id\" component={EditPPT} />\n          <Route path=\"/upload_video\" component={UploadVideo} />\n          <Route path=\"/playlists\" component={Playlist} />\n          <Route path=\"/blog-playlists\" component={BlogPlaylist} />\n          <Route path=\"/playlist/:playlist_id\" component={VideoList} />\n          <Route path=\"/blog/:id\" component={BlogSingle} />\n          <Route path=\"/received_playlist\" component={ReceivedPlaylist} />\n          <Route path=\"/user\" component={BoardUser} />\n          <Route path=\"/mod\" component={BoardModerator} />\n          <Route path=\"/admin/categories\" component={CategoryManagement} />\n          <Route path=\"/admin\" component={BoardAdmin} />\n          <Route path=\"/add_token_code\" component={AddTokenCode} />\n          <Route path=\"/category_playlists/:category_id\" component={CategoryPlaylists} />\n          <Route path=\"*\" component={NoMatch} />\n      </Switch>\n\n      <Navbar className=\"fixed-bottom\" bg=\"dark\" variant=\"dark\" sticky=\"bottom\">\n        <div className=\"container text-center\">\n            <div className=\"col-sm-12\">\n\n                <p className=\"text-center twhite m-2\"> <a href=\"#\" className=\"twhite\"> Licence Terms</a> Copyright © 2021 Videnda AI</p>\n            </div>\n        </div>\n      </Navbar>\n    </Router>\n\n  )\n}\n\nexport default App;\n","/var/www/html/bstar/videnda-frontend/src/reportWebVitals.js",[],"/var/www/html/bstar/videnda-frontend/src/services/auth.service.js",["233"],"import axios from \"axios\";\nimport authHeader from \"./auth-header\";\n\nimport GlobalData from \"../tools/GlobalData\";\n\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/auth/';\n//const API_URL = `http://local--host:3030/api/auth/`;\n//const API_URL = 'http://15-8.69.222.102:3030/api/auth/';\n//const API_URL = 'http://127.0.0.1:3030/api/auth/';\n//const API_URL = ''\n\naxios.interceptors.response.use(\n    response => {\n        return response\n    },\n    error => {\n        if ( !error.response) {\n            console.log( \"Connection to local-host failed err=\" + error.message);\n        }\n        return Promise.reject(error)\n    }\n);\n\nconst register = (username, email, password) => {\n  console.log(\"front console = register with axios, url=\" + API_URL);\n  try{\n   return axios.post( API_URL + \"signup\", {\n     username,\n     email,\n     password,\n   });\n  }catch( err){\n\tconsole.log( \"axios post error=\" + err.message);\n  }\n  return \"{error}\";\n};\n\nconst login = (email, password) => {\n  console.log(API_URL);\n  return axios\n    .post(API_URL + \"signin\", {\n      email,\n      password,\n    })\n    .then((response) => {\n\n      if (response.data.accessToken) {\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response.data;\n    });\n};\n\nconst changePassword = (oldPassword, newPassword)=>{\n\n  let token = authHeader();\n\n  return axios\n    .post(API_URL+\"changePassword\",\n      {oldPassword, newPassword},\n      {headers: token}\n    ).then(response=>{\n      return response;\n    })\n}\n\nconst deregister = (email, password)=>{\n  let token = authHeader();\n  return axios\n    .post(API_URL+\"deregister\",\n      {email,password},\n      {headers: token}\n    ).then(response=>{\n      return response;\n    })\n}\n\nconst forgotPassword = (email)=>{\n  return axios\n    .post(API_URL+\"forgotPassword\",\n      {email}\n    ).then(response=>{\n      return response;\n    });\n}\nconst verifyEmail=(obj=>{\n  return axios\n    .post(API_URL+\"verifyEmail\",\n      obj\n    ).then(response=>{\n      return response;\n    });\n})\nconst resetPassword=(obj)=>{\n  return axios.post(\n    API_URL+\"resetPassword\",\n    obj\n  ).then(response=>{\n    return response;\n  })\n}\n\nconst logout = () => {\n  localStorage.removeItem(\"user\");\n};\n\nconst getCurrentUser = () => {\n  return JSON.parse(localStorage.getItem(\"user\"));\n};\n\nconst resendVerifyEmail = () =>{\n  const token = authHeader();\n  return axios.post(API_URL+\"resendVerifyEmail\", {}, {\n    headers: token\n  }).then(response=>{\n    return response\n  });\n}\n\nconst getUserProfile = ()=>{\n  const token = authHeader();\n  return axios.post(API_URL+\"getUserProfile\", {}, {\n    headers: token\n  }).then(response=>{\n    if (response.data.accessToken) {\n      localStorage.setItem(\"user\", JSON.stringify(response.data));\n    }\n    return response.data;\n  })\n}\n\nexport default {\n  register,\n  login,\n  logout,\n  changePassword,\n  deregister,\n  forgotPassword,\n  resetPassword,\n  verifyEmail,\n  getCurrentUser,\n  resendVerifyEmail,\n  getUserProfile,\n};\n","/var/www/html/bstar/videnda-frontend/src/components/Home.js",["234","235","236"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nimport UserService from '../services/user.service';\nimport CategoryService from '../services/category.service';\nimport HomeLayout from '../layouts/Home';\n\nimport {\n    Button,\n    Media\n} from 'react-bootstrap';\n\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\n\n\nconst Home = () => {\n    const [content, setContent] = useState();\n    const [errReceived, setErrReceived] = useState(false);\n    const [categories, setCategories] = useState();\n\n    useEffect(() => {\n        console.log(\"HOME getPublicContent START\");\n        UserService.getPublicContent().then(\n            (response) => {\n                console.log(\"HOME getPublicContent RECEIVED\");\n                setContent(response.data);\n            },\n            (error) => {\n                console.log(\"HOME getPublicContent ERR\", error);\n                console.log(\"HOME getPublicContent ERRx\", error.message);\n                setErrReceived(\"getPublicContent err=\" + error.message);\n                const _content =\n                    (error.response && error.response.data) ||\n                    error.message ||\n                    error.toString();\n                setContent(_content);\n                //setErrReceived(_content);\n            }\n        )\n        getCategories();\n    }, []);\n\n    const getCategories = () => {\n        console.log(\"HOME getCategories START\");\n        CategoryService.getAllCategory()\n            .then(response => {\n                console.log(\"HOME getCategories RECEIVED\");\n                setCategories(response.data);\n            })\n            .catch(err => {\n                //let received_data = \"getProducts error=\" + err.message;\n                console.log(\"HOME getCategories err=\", err);\n                setErrReceived(\"Categories err=\" + err.message);\n                //setResponseState( received_data);\n            });\n    }\n\n    let history = useHistory();\n    return (\n        <HomeLayout>\n            <div>{errReceived ? errReceived : \"\"}</div>\n            <ResponsiveMasonry\n                columnsCountBreakPoints={{ 450: 1, 750: 2, 1200: 3 }}\n            >\n                <Masonry>\n\n                    {categories\n                        && categories.map((data, i) => {\n                            return (\n                                <div className=\"m-0\">\n                                    <Media className=\"masonryMedia\">\n                                        <img src={data.thumb_image} className=\"img100\" style={{ cursor: 'pointer' }} />\n                                        <Media.Body class=\"media-body justify-content-center align-items-center\">\n                                            <div>\n                                                <h2><span>{data.title}</span></h2>\n                                                <p style={{ marginBottom: \"10px\" }}><span>{data.description}</span></p>\n                                                <div className=\"d-flex justify-content-center bd-highlight mb-3\">\n                                                    {data.public_playlists && data.public_playlists.length > 0 &&\n                                                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\n                                                            className=\"mr-2\"\n                                                            onClick={() => { let playlist = data.playlists.filter(item => item.id == data.public_playlists[0])[0]; console.log(playlist); history.push('/playlist/' + playlist.playlist_id) }}>\n                                                            Public Playlists\n                                                </Button>\n                                                    }\n                                                    {data.private_playlists && data.private_playlists.length > 0 &&\n                                                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\n                                                            className=\"\"\n                                                            onClick={() => { history.push('/category_playlists/' + data.category_id) }}>\n                                                            Private Playlists\n                                                </Button>\n                                                    }\n                                                </div>\n                                            </div>\n                                        </Media.Body>\n                                    </Media>\n                                </div>\n                            )\n\n                        })}\n                </Masonry>\n            </ResponsiveMasonry>\n        </HomeLayout>\n    )\n}\n\n\nexport default Home;","/var/www/html/bstar/videnda-frontend/src/components/Home-bak.js",["237","238","239","240","241"],"import React, {useState, useEffect} from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\n\nimport UserService from '../services/user.service';\nimport CategoryService from '../services/category.service';\nimport AppLayout from '../layouts/App';\n\nimport {\n    Image,\n    Button,\n    ListGroup,\n    Media,\n} from 'react-bootstrap';\n\nconst HomeBK = ()=>{\n    const [content, setContent] = useState();\n    const [categories, setCategories] = useState();\n\n    useEffect(()=>{\n        UserService.getPublicContent().then(\n            (response)=>{\n                setContent(response.data);\n            },\n            (error)=>{\n                const _content =\n                    (error.response && error.response.data) ||\n                    error.message ||\n                    error.toString();\n                setContent(_content);\n            }\n        )\n\n        getCategories();\n    }, []);\n\n    const getCategories = () => {\n        CategoryService.getAllCategory().then( response => {\n            setCategories(response.data);\n        })\n    }\n\n    return (\n        <>\n            {categories && categories.length && <CategoryList categories={categories}></CategoryList> ||\n                <div className=\"jumbotron\">\n                    <h3>{content}</h3>\n                </div>\n            }\n        </>\n    )\n}\n\n\nconst CategoryList = (props) => {\n    let history = useHistory();\n\n    const renderItem = (data) => (\n        <ListGroup.Item key={data.id}>\n            <Media>\n                { data.thumb_image &&\n                \t<Image thumbnail\n                \tsrc={data.thumb_image}\n                \tclassName=\"mr-3\"\n                \tstyle={{ cursor: 'pointer' }} /> ||\n                \t<InsertPhotoIcon style={{ fontSize: 140 }}/> }\n                <Media.Body>\n                    <h2><span>{data.title}</span></h2>\n                    <p style={{ marginBottom: \"10px\" }}><span>{data.description}</span></p>\n                    { data.public_playlists && data.public_playlists.length > 0 &&\n                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\n                            className=\"mr-2\"\n                            onClick={ () => {\n\t\t\t\t\t\t\t\tlet playlist = data.playlists.filter(\n\t\t\t\t\t\t\t\t\titem => item.id == data.public_playlists[0])[0];\n\t\t\t\t\t\t\t\t\tconsole.log(\"playlist=\", playlist);\n\t\t\t\t\t\t\t\t\thistory.push('/playlist/' + playlist.playlist_id) } }>\n                            Open Public Playlists\n                        </Button>\n                    }\n                    { data.private_playlists && data.private_playlists.length > 0 &&\n                        <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\n                            className=\"mr-2\"\n                            onClick={ () => { history.push(\n\t\t\t\t\t\t\t\t'/category_playlists/' + data.category_id) } }>\n                            Open Private Playlists\n                        </Button>\n                    }\n                </Media.Body>\n            </Media>\n        </ListGroup.Item>\n    );\n\n\n    return (\n        <AppLayout>\n            <div className=\"card\">\n                <ListGroup variant=\"flush\">\n                    {props.categories\n                        && props.categories.map(item => {\n                                return renderItem(item)\n                        })}\n                </ListGroup>\n            </div>\n        </AppLayout>\n    );\n}\n\nexport default HomeBK;","/var/www/html/bstar/videnda-frontend/src/components/NoMatch.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Auth/Login.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Auth/Register.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Auth/ChangePassword.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Auth/Deregister.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Auth/ForgotPassword.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Auth/VerifyEmail.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Auth/ResetPassword.js",[],"/var/www/html/bstar/videnda-frontend/src/components/User/Profile.js",[],"/var/www/html/bstar/videnda-frontend/src/components/User/BoardUser.js",[],"/var/www/html/bstar/videnda-frontend/src/components/User/BoardModerator.js",[],"/var/www/html/bstar/videnda-frontend/src/components/User/BoardAdmin.js",[],"/var/www/html/bstar/videnda-frontend/src/components/User/AddTokenCode.js",["242","243","244"],"import React from \"react\";\nimport AuthService from \"../../services/auth.service\";\nimport UserService from \"../../services/user.service\";\nimport AppLayout from '../../layouts/App';\n\nimport TextField from '@material-ui/core/TextField';\nimport InsertEmoticon from '@material-ui/icons/InsertEmoticon';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport { useHistory } from \"react-router-dom\";\n\n\nimport {\n  Row,\n  Col,\n  Button,\n} from 'react-bootstrap';\n\n\nconst AddTokenCode = () => {\n  console.log( \"AddTokenCode START\");\n  const [currentUser, setCurrentUser] = React.useState(undefined);\n  const [message, setMessage] = React.useState('');\n  const [tokenCode, setTokenCode] = React.useState('');\n  const history = useHistory();\n  const [mailSendError, setMailSendError] = React.useState(false);\n  const [sending, setSending] = React.useState(false);\n\n  console.log( \"AddTokenCode get profile\");\n  React.useEffect(()=>{\n    AuthService.getUserProfile()\n    \t.then((response)=>{\n\t\t  setCurrentUser(response);\n    \t})\n    \t.catch((err) => {\n\t\t\tconst err_str = err.toString();\n            const resMessage = \"Please Login [\" + err_str + \"]\";\n            setMessage(resMessage);\n            if( err_str.includes( \"403\"))\n            \thistory.push('/signin');\n            //setTimeout(() => {\n            //  setMessage('');\n            //}, 3000);\n        });\n  }, [])\n\n  const resendVerifyEmail=()=>{\n    setSending(true);\n    AuthService.resendVerifyEmail().then((response)=>{\n      setMailSendError(false);\n      setSending(false);\n      setMessage(response.data.message);\n    }, error=>{\n      const resMessage=(\n          error.response &&\n          error.response.data &&\n          error.response.data.message\n      ) || error.toString();\n      setSending(false);\n      setMessage(resMessage);\n    });\n  }\n\n  console.log( \"AddTokenCode add tokens\");\n  const handleAddTokens = (e) => {\n    if (e.key === 'Enter' || e.keyCode === 13 || e.target.innerText == 'Add Tokens') {\n      UserService.addTokenCode(tokenCode)\n        .then(response => {\n          if (response.data.message === \"success\") {\n              window.location.reload();\n          }\n        }).catch((err) => {\n            const resMessage = (\n                err.response &&\n                err.response.data &&\n                err.response.data.message\n            ) || err.toString();\n\n            setMessage(resMessage);\n            setTimeout(() => {\n              setMessage('');\n            }, 3000);\n        });\n\n      document.getElementById('input-with-icon-textfield').value = '';\n      setTokenCode('');\n    }\n  }\n\n\n  return (\n    <AppLayout>\n\n{currentUser && currentUser.accessToken ? (\n          <>\n            {\n              currentUser.verified_email===\"none\"&&\n              <>\n         \n              <div className={\"alert alert-danger\"}>\n                  You need to verify your email. If you didn't receive the verify email, please click this{` `}\n                  <button className=\"btn btn-primary btn-sm\" onClick={resendVerifyEmail} disabled={sending}>\n                    {sending && (\n                        <span className=\"spinner-border spinner-border-sm\"></span>\n                    )}\n                    <span>Button</span></button> to resend the verify email.\n                </div>                \n              </>\n              \n            }             \n            {\n              message &&\n              <div className={mailSendError ? \"alert alert-danger\" : \"alert alert-danger\"}>\n                {message}\n              </div>\n            }    \n          </>\n        ):(\n            <header className=\"jumbotron\">\n                <h3>\n                  <strong>Please Login</strong>\n                </h3>\n            </header>\n          )\n        }\n\n      <Row  className='mt-5'>\n        <Col md={4}>\n          <TextField\n            style={{width: '100%'}}\n            id=\"input-with-icon-textfield\"\n            placeholder=\"Input code\"\n            onChange={(e) => setTokenCode(e.target.value)}\n            onKeyDown={handleAddTokens}\n            InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <InsertEmoticon />\n                  </InputAdornment>\n            ),\n            }}\n          />\n        </Col>\n        <Col md={8}>\n          <Button size='sm' onClick={handleAddTokens}>\n            Add Tokens\n          </Button>\n        </Col>\n      </Row>\n      <Row  className='mt-5'>\n        <Col md={4}>\n           <a href=\"https://exquisiteview.com/Tokens_c13.htm\" target=\"_blank\">Get More Tokens</a>\n        </Col>\n        <Col md={8}>\n        </Col>\n      </Row>\n\n      { currentUser &&\n        <header className=\"jumbotron mt-4\">\n          <h3 className='mb-4'><strong>{currentUser.username}</strong></h3>\n          <p><strong>Current Tokens: </strong>{currentUser.nr_tokens}</p>\n        </header>\n      }\n\n      { message &&\n        <div className=\"alert alert-primary\">\n          {message}\n        </div>\n      }\n\n    </AppLayout>\n  );\n};\n\nexport default AddTokenCode;","/var/www/html/bstar/videnda-frontend/src/components/User/CategoryPlaylists.js",["245","246","247","248","249","250","251"],"import React, {useState, useEffect} from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport InsertPhotoIcon from '@material-ui/icons/InsertPhoto';\n\nimport CategoryService from '../../services/category.service';\nimport AppLayout from '../../layouts/App';\n\nimport {\n    Image,\n    Button,\n    ListGroup,\n    Media,\n} from 'react-bootstrap';\n\nconst CategoryPlaylists = ()=>{\n    const [category, setCategory] = useState(null);\n    const [playlists, setPlaylists] = useState([]);\n    let history = useHistory();\n    let params = useParams();\n    let categoryId = params.category_id || history.push(\"/404\");\n\n    useEffect(()=>{\n        getCategory();\n    }, []);\n\n    const getCategory = () => {\n        CategoryService.getCategory(categoryId).then( response => {\n          setCategory(response.data || null);\n          setPlaylists(response.data && response.data.playlists.filter(item => item.playlist_status == 0) || []);\n        })\n    }\n\n    return (\n        <AppLayout>\n            {playlists && <PlaylistList playlists={playlists}></PlaylistList>}\n        </AppLayout>\n    )\n}\n\nconst PlaylistList = (props) => {\n    let history = useHistory();\n\n    const renderItem = (data) => (\n        <ListGroup.Item key={data.id}>\n            <Media>\n                { data.thumb_image && <Image thumbnail src={data.thumb_image} className=\"mr-3\" style={{ cursor: 'pointer' }} /> || <InsertPhotoIcon style={{ fontSize: 140 }}/> }\n                \n                <Media.Body>\n                    <h2><span>{data.playlist_title}</span></h2>\n                    <p style={{ marginBottom: \"10px\" }}><span>{data.video_count} Videos</span></p>\n                    <Button variant=\"primary\" size=\"sm\" style={{ padding: '5px 20px' }}\n                        className=\"mr-2\"\n                        onClick={ () => { history.push('/playlist/' + data.playlist_id) } }>\n                        Open\n                    </Button>\n                </Media.Body>\n            </Media>\n        </ListGroup.Item>\n    );\n\n\n    return (\n        <>\n            <div className=\"card\">\n                <ListGroup variant=\"flush\">\n                    {props.playlists\n                        && props.playlists.map(item => {\n                                return renderItem(item)\n                        })}\n                </ListGroup>\n            </div>\n        </>\n    );\n}\n\nexport default CategoryPlaylists;","/var/www/html/bstar/videnda-frontend/src/components/User/Admin/CategoryManagement.js",["252","253","254","255","256","257","258","259","260","261","262","263","264"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport SelectOptions from '../../Common/SelectOptions';\n\nimport {\n  Row,\n  Col,\n  Button,\n  Badge,\n  Modal,\n} from 'react-bootstrap';\n\nimport UserService from '../../../services/user.service';\nimport PlaylistService from '../../../services/playlist.service';\nimport CategoryService from '../../../services/category.service';\nimport AppLayout from '../../../layouts/App';\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nconst CategoryModal = (props) => {\n    return (\n        <Modal\n            show={props.show}\n            onHide={props.onHide}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Category Information\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <Col md={12}>\n                        <TextField placeholder=\"Name\" fullWidth value={props.title} onChange={ (e) => props.setCategoryTitle(e.target.value) } />\n                    </Col>\n                    <Col md={12} style={{marginTop: 15}}>\n                        <TextField placeholder=\"Description\" multiline fullWidth rows={4} value={props.description} onChange={ (e) => props.setCategoryDescription(e.target.value) } />\n                    </Col>\n                    <Col md={12} style={{marginTop: 15}}>\n                        <label> Thumbnail:&nbsp;&nbsp; </label>\n                        <input type=\"file\" accept=\"image/*\" onChange={ (e) => props.setCategoryThumb(e.target.files[0]) } />\n                    </Col>\n                    {props.publicPlaylists &&\n                        <Col md={6} style={{marginTop: 15}}>\n                            <SelectOptions\n                                label='Public Playlists'\n                                id={props.id}\n                                value={props.categoryPublicPlaylist}\n                                items={props.publicPlaylists}\n                                onSave={props.updateCategoryPublicPlaylist}\n                                multiple={false}\n                            />\n                        </Col>\n                    }\n                    {props.privatePlaylists.length > 0 &&\n                        <Col md={6} style={{marginTop: 15}}>\n                            <SelectOptions\n                                label='Private Playlists'\n                                id={props.id}\n                                value={props.categoryPrivatePlaylists}\n                                items={props.privatePlaylists}\n                                onSave={props.updateCategoryPrivatePlaylists}\n                                multiple={true}\n                            />\n                        </Col>\n                    }\n                </Row>\n                \n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"primary\" onClick={ props.onSave}>Save changes</Button>\n                <Button variant=\"danger\" onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n  pasteTextField: {\n    width: '100%',\n    marginBottom: 30\n  }\n});\n\nexport default function CategoryManagement() {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [data, setData] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [searchString, setSearchString] = useState('');\n    const [errorText, setErrorText] = useState('');\n    const [marketingPublicPlaylists, setMarketingPublicPlaylists] = useState([]);\n    const [marketingPrivatePlaylists, setMarketingPrivatePlaylists] = useState([]);\n        \n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    const [showCategoryModal, setShowCategoryModal] = useState(false);\n\n    // for category modal\n    const [categoryId, setCategoryId] = useState('');\n    const [categoryTitle, setCategoryTitle] = useState('');\n    const [categoryDescription, setCategoryDescription] = useState('');\n    const [categoryThumb, setCategoryThumb] = useState(null);\n    const [categoryPublicPlaylist, setCategoryPublicPlaylist] = useState();\n    const [categoryPrivatePlaylists, setCategoryPrivatePlaylists] = useState([]);\n\n    useEffect(() => {\n        if (!isLoaded) {\n            getAllCategory();\n            getAllPlaylists();\n            setIsLoaded(true)\n        }\n    })\n    \n    const getAllCategory = () => {\n        CategoryService.getAllCategory()\n            .then(result => {\n                setRows(result.data)\n                setData(result.data)\n            })\n    }\n\n    const getAllPlaylists = () => {\n        PlaylistService.getAllPlaylist()\n            .then(async response => {\n                if (response.data && response.data.length > 0) {\n                    let privatePlaylists = [];\n                    let publicPlaylists = [];\n                    response.data.map(item => {\n                        if( item.type == 'marketing') {\n                            let obj = {id: item.id, name: item.playlist_title};\n                            item.playlist_status == 0 && privatePlaylists.push(obj) || publicPlaylists.push(obj);\n                        }\n                    })\n\n                    setMarketingPublicPlaylists(publicPlaylists);\n                    setMarketingPrivatePlaylists(privatePlaylists);\n                }\n            })\n    }\n\n    const resetCategoryData = () => {\n        setCategoryId('');\n        setCategoryTitle('');\n        setCategoryDescription('');\n        setCategoryThumb(null);\n        setCategoryPublicPlaylist();\n        setCategoryPrivatePlaylists([]);\n    }\n\n    const updateCategoryPublicPlaylist = (id, value) => {\n        if( value )\n            setCategoryPublicPlaylist(value)\n        else\n            setCategoryPublicPlaylist()\n    }\n\n    const updateCategoryPrivatePlaylists = (id, value) => {\n        setCategoryPrivatePlaylists(value)\n    }\n\n    const saveCategory = async () => {\n        setRows([])\n        setData([])\n\n        let thumb = '';\n        if( categoryThumb ) {\n            thumb = await CategoryService.uploadThumbnail(categoryThumb);\n        }\n\n        let playlists = [];\n        if( categoryPublicPlaylist > 0 )\n            playlists = [categoryPublicPlaylist, ...categoryPrivatePlaylists];\n        else\n            playlists = [...categoryPrivatePlaylists];\n\n        if( categoryId ) {\n            await CategoryService.updateCategory(categoryId, categoryTitle, categoryDescription, thumb, playlists)\n        } else {\n            await CategoryService.addCategory(categoryTitle, categoryDescription, thumb, playlists)\n        }\n\n        setShowCategoryModal(false)\n        resetCategoryData()\n        getAllCategory()\n    }\n\n    const editCategory = (id) => {\n        resetCategoryData()\n\n        const category = rows.filter(item => item.category_id == id)[0];\n        \n        setCategoryId(category.category_id);\n        setCategoryTitle(category.title);\n        setCategoryDescription(category.description);\n        setCategoryThumb(null);\n        setCategoryPublicPlaylist(category.public_playlists && category.public_playlists.length && category.public_playlists[0]);\n        setCategoryPrivatePlaylists(category.private_playlists);\n\n        setShowCategoryModal(true)\n    }\n\n    const removeCategory = (id) => {\n        if (window.confirm('Are you sure?')) {\n            setRows([])\n            setData([])\n            \n            CategoryService.removeCategory(id)\n            .then(response => {\n                if( response.data.message == 'success')\n                    getAllCategory()\n            }).catch((err) => {\n                const resMessage = (\n                    err.response &&\n                    err.response.data &&\n                    err.response.data.message\n                ) || err.toString();\n                console.log(resMessage);\n            });\n        }\n    }\n\n    const handleSearch = (e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            let arr = [...data];\n            arr = arr.filter(item => (item.title).toLowerCase().includes(e.target.value.trim().toLowerCase()) || (item.description).toLowerCase().includes(e.target.value.trim().toLowerCase()) );\n            setRows(arr);\n        }\n    }\n    \n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n\n    return (\n        <AppLayout>\n            {errorText &&\n                <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\n            }\n            <Row className='mt-5'>\n                <Col md={9}>\n                <Button size='sm' onClick={() => { resetCategoryData(); setShowCategoryModal(true); }}>\n                    Add Category\n                </Button>\n                </Col>\n                <Col md={3}>\n                <TextField\n                    className={classes.pasteTextField}\n                    id=\"input-with-icon-textfield\"\n                    placeholder=\"Search Category\"\n                    onChange={(e) => setSearchString(e.target.value)}\n                    onKeyDown={handleSearch}\n                    InputProps={{\n                        startAdornment: (\n                        <InputAdornment position=\"start\">\n                            <SearchIcon />\n                        </InputAdornment>\n                    ),\n                    }}\n                />\n                </Col>\n            </Row>\n            \n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"custom pagination table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"center\">No</TableCell>\n                            <TableCell align=\"center\">Image</TableCell>\n                            <TableCell align=\"center\">Title</TableCell>\n                            <TableCell align=\"center\">Description</TableCell>\n                            <TableCell align=\"center\">Public Playlists</TableCell>\n                            <TableCell align=\"center\">Private Playlists</TableCell>\n                            <TableCell align=\"center\">Operate</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {(rowsPerPage > 0 ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage) : rows).map((row, index) => (\n                            <TableRow key={row.id}>\n                                <TableCell style={{ width: 50 }} component=\"th\" scope=\"row\" align=\"center\">\n                                    {index + 1}\n                                </TableCell>\n                                <TableCell style={{ width: 150 }} align=\"center\">\n                                    {row.thumb_image && <img src={row.thumb_image} width=\"100%\" style={{objectFit: 'cover'}} /> }\n                                </TableCell>\n                                <TableCell style={{ width: 150 }} align=\"center\">\n                                    {row.title}\n                                </TableCell>\n                                <TableCell style={{ width: 200 }} align=\"center\">\n                                    {row.description}\n                                </TableCell>\n                                <TableCell style={{ width: 150 }} align=\"center\">\n                                    {row.public_playlists.length}\n                                </TableCell>\n                                <TableCell style={{ width: 150 }} align=\"center\">\n                                    {row.private_playlists.length}\n                                </TableCell>\n                                <TableCell style={{ width: 160 }} align=\"center\">\n                                    <Button size='sm' variant='primary' block onClick={() => editCategory(row.category_id)}>Edit</Button>\n                                    <Button size='sm' variant='danger' block onClick={() => removeCategory(row.category_id)}>Delete</Button>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n\n                        {emptyRows > 0 && (\n                            <TableRow style={{ height: 53 * emptyRows }}>\n                                <TableCell colSpan={6} />\n                            </TableRow>\n                        )}\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                                colSpan={7}\n                                count={rows.length}\n                                rowsPerPage={rowsPerPage}\n                                page={page}\n                                SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                                }}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                                ActionsComponent={TablePaginationActions}\n                            />\n                        </TableRow>\n                    </TableFooter>\n                </Table>\n            </TableContainer>\n            \n            <CategoryModal\n                show={showCategoryModal}\n                onHide={() => setShowCategoryModal(false)}\n                id={ categoryId }\n                title={ categoryTitle }\n                description={ categoryDescription }\n                categoryPublicPlaylist={ categoryPublicPlaylist }\n                categoryPrivatePlaylists={ categoryPrivatePlaylists }\n                publicPlaylists={ marketingPublicPlaylists }\n                privatePlaylists={ marketingPrivatePlaylists }\n                onSave={saveCategory}\n                setCategoryTitle={setCategoryTitle}\n                setCategoryDescription={setCategoryDescription}\n                setCategoryThumb={setCategoryThumb}\n                updateCategoryPublicPlaylist={updateCategoryPublicPlaylist}\n                updateCategoryPrivatePlaylists={updateCategoryPrivatePlaylists}\n            />\n        </AppLayout>\n    );\n}","/var/www/html/bstar/videnda-frontend/src/components/User/Admin/TokenManagement.js",["265","266","267","268","269","270","271","272"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport CreateIcon from '@material-ui/icons/Create';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\nimport {\n  Row,\n  Col,\n  Button,\n  Badge\n} from 'react-bootstrap';\n\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\nimport UserService from '../../../services/user.service';\nimport AppLayout from '../../../layouts/App';\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n        {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n  pasteTextField: {\n    width: '100%',\n    marginBottom: 30\n  }\n});\n\nexport default function TokenManagement() {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [data, setData] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\n  const [searchString, setSearchString] = useState('');\n  const [errorText, setErrorText] = useState('');\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  useEffect(() => {\n    if (!isLoaded) {\n        UserService.getPrepaidTokens()\n            .then(async response => {\n                if(response.data && response.data.length > 0) {\n                    setData(response.data);\n                    setRows(response.data);\n                }\n            })\n\n        setIsLoaded(true)\n    }\n  })\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // playlistId\n  const handleDelete = (id) => {\n    UserService.deletePrepaidToken(id)\n      .then(response => {\n          if (response.data === \"success\") {\n              window.location.reload();\n          }\n      }).catch((err) => {\n          const resMessage = (\n              err.response &&\n              err.response.data &&\n              err.response.data.message\n          ) || err.toString();\n\n          console.log(resMessage);\n      });\n  }\n\n  // custom\n  const handleInsertPlaylist = (e) => {\n    if (e.key === 'Enter' || e.keyCode === 13) {\n      addPlaylist();\n    }\n  }\n\n  const handleSearch = (e) => {\n    if (e.key === 'Enter' || e.keyCode === 13) {\n      let arr = [...data];\n      arr = arr.filter(item => (item.code).includes(e.target.value.trim().toLowerCase()));\n      setRows(arr);\n    }\n  }\n\n  const handleAddPlaylist = () => {\n    addPlaylist();\n  }\n\n  function addPlaylist() {\n      \n    if (newPlaylistUrl.trim() == '') {\n        return;\n    }\n    \n    let newTokenCount = Number(newPlaylistUrl.trim());\n    if (isNaN(newTokenCount) || newTokenCount <= 0) {\n        return;\n    }\n    \n    UserService.addPrepaidToken(newTokenCount)\n      .then(response => {\n          if (response.data === \"success\") {\n              window.location.reload();\n          }\n          if (response.data.message === \"cannotregister\") {\n              setErrorText('The playlist is already registered.');\n              setTimeout(() => {\n                setErrorText('');\n              }, 2000);\n          }\n      }).catch((err) => {\n          const resMessage = (\n              err.response &&\n              err.response.data &&\n              err.response.data.message\n          ) || err.toString();\n\n          console.log(resMessage);\n      });\n\n    document.getElementById('input-with-icon-textfield').value = '';\n    setNewPlaylistUrl('');\n  }\n\n  return (\n    <AppLayout>\n      {errorText &&\n          <h5 className=\"alert alert-danger\" style={{position: 'absolute', bottom: 50, right: 50, padding: 40}}>{errorText}</h5>\n      }\n      <Row  className='mt-5'>\n        <Col md={5}>\n          <TextField\n            className={classes.pasteTextField}\n            id=\"input-with-icon-textfield\"\n            placeholder=\"Insert token count\"\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\n            onKeyDown={handleInsertPlaylist}\n            InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <CreateIcon />\n                  </InputAdornment>\n            ),\n            }}\n          />\n        </Col>\n        <Col md={4}>\n          <Button size='sm' onClick={handleAddPlaylist}>\n            Add New Token Code\n          </Button>\n        </Col>\n        <Col md={3}>\n          <TextField\n            className={classes.pasteTextField}\n            id=\"input-with-icon-textfield\"\n            placeholder=\"Search token code\"\n            onChange={(e) => setSearchString(e.target.value)}\n            onKeyDown={handleSearch}\n            InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n            ),\n            }}\n          />\n        </Col>\n      </Row>\n      \n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"custom pagination table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">No</TableCell>\n              <TableCell align=\"center\">Token Code</TableCell>\n              <TableCell align=\"center\">Token Count</TableCell>\n              <TableCell align=\"center\">Token Status</TableCell>\n              <TableCell align=\"center\">Used Date</TableCell>\n              <TableCell align=\"center\">Operate</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(rowsPerPage > 0\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              : rows\n            ).map((row, index) => (\n              <TableRow key={row.id}>\n                <TableCell style={{ width: 100 }} component=\"th\" scope=\"row\" align=\"center\">\n                  {index + 1}\n                </TableCell>\n                <TableCell style={{ width: 250 }} align=\"center\">\n                  {row.code}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  {row.nr_tokens}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  <Badge pill variant={row.used == 1 ? 'warning' : 'success'}>{row.used == '1' ? 'Used' : 'Unused'}</Badge>\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  { row.used == 1 &&\n                      row.updatedAt\n                  }\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  { row.used == 0 && \n                    <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)}>Delete</Button>\n                  }\n                </TableCell>\n              </TableRow>\n            ))}\n\n            {emptyRows > 0 && (\n              <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={7}\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </TableContainer>\n    </AppLayout>\n  );\n}","/var/www/html/bstar/videnda-frontend/src/components/Service/ExecuteService.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Service/Image/UploadImage.js",["273","274","275"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { Pagination } from '@material-ui/lab';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport MButton from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport Alert from '@material-ui/lab/Alert';\nimport downloadFile from '../../../services/downloadfile';\n\nimport {\n    Row,\n    Col,\n    Image,\n    Button,\n    ListGroup,\n    ProgressBar,\n    Media,\n} from 'react-bootstrap';\n\nimport UploadService from '../../../services/file-upload.service';\nimport ImageService from '../../../services/image.service';\nimport AppLayout from '../../../layouts/App';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 110,\n        flexGrow: 1,\n        maxWidth: 400,\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n}));\n\nconst ImageUpload = () => {\n    const [currentFile, setCurrentFile] = React.useState(undefined);\n    const [previewImage, setPreviewImage] = React.useState(undefined);\n    const [progress, setProgress] = React.useState(0);\n    const [message, setMessage] = React.useState('');\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('page') ? Number(localStorage.getItem('page')) : 1);\n    const [itemsPerPage] = React.useState(10);\n    const [totalPages, setTotalPages] = React.useState(1);\n    const [imageInfos, setImageInfos] = React.useState([]);\n    const [treeData, setTreeData] = useState('');\n    const [selected, setSelected] = useState('root');\n    const [imageData, setImageData] = useState([]);\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [allImage, setAllImage] = useState([]);\n    const [expanded, setExpanded] = useState([]);\n\n    useEffect(() => {\n        setExpand()\n    }, [])\n\n    const setExpand = () => {\n        // localStorage.getItem('selected') ? localStorage.getItem('selected')) :\n        const selectedNode = localStorage.getItem('selected');\n        let expand = ['root'];\n        if (selectedNode) {\n            let y, m, d;\n            if (selectedNode.length === 4 && Number(selectedNode) > 1000) {\n                y = selectedNode\n                expand.push(y)\n            } else if (selectedNode.length === 7) {\n                y = selectedNode.split(\"-\")[0];\n                m = selectedNode.split(\"-\")[1];\n                expand.push(y)\n                expand.push(y + '-' + m)\n            } else if (selectedNode.length === 10) {\n                y = selectedNode.split(\"-\")[0];\n                m = selectedNode.split(\"-\")[1];\n                d = selectedNode.split(\"-\")[2];\n                expand.push(y)\n                expand.push(y + '-' + m)\n                expand.push(y + '-' + m + '-' + d)\n            }\n        }\n        setExpanded(expand)\n    }\n\n    // set tree data\n    const setTree = (plain) => {\n        const data = {\n            id: 'root',\n            name: 'Images',\n            children: [],\n        };\n        plain.forEach(value => {\n            let [year, month, day] = new Date(value.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n            let index = data.children.findIndex(item => item.id === String(year))\n            if (index < 0) {\n                data.children.push({\n                    id: year.toString(),\n                    name: year.toString(),\n                    children: [{\n                        id: year + '-' + month,\n                        name: month,\n                        children: [{\n                            id: year + '-' + month + '-' + day,\n                            name: day,\n                        }]\n                    }]\n                })\n            } else {\n                let month_index = data.children[index].children.findIndex(item => String(item.id) === year + '-' + month)\n                if (month_index < 0) {\n                    data.children[index].children.push({\n                        id: year + '-' + month,\n                        name: month,\n                        children: [{\n                            id: year + '-' + month + '-' + day,\n                            name: day,\n                        }]\n                    })\n                } else {\n                    let day_index = data.children[index].children[month_index].children.findIndex(item => String(item.id) === year + '-' + month + '-' + day)\n                    if (day_index < 0) {\n                        data.children[index].children[month_index].children.push({\n                            id: year + '-' + month + '-' + day,\n                            name: day,\n                        })\n                    }\n                }\n            }\n\n        });\n\n        setTreeData(data);\n    }\n\n    React.useEffect(() => {\n        setMessage('qwe');\n\n        ImageService.getImageFiles()\n            .then(async response => {\n                if (response.data && response.data.length > 0) {\n                    setImageData(response.data)\n                    setTree(response.data)\n\n                    ///////\n                    const nodeId = localStorage.getItem('selected');\n                    let data = await response.data.filter(item => {\n                        let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n                        let selectedYear = '';\n                        let selectedMonth = '';\n                        let selectedDay = '';\n\n                        let fileName = item.file_name + item.description;\n                        fileName = fileName.trim().toLowerCase();\n\n                        if (nodeId === 'root') {\n                            return 1;\n                        }\n\n                        let selectedDate = '';\n                        if (String(nodeId).length === 4) {\n                            selectedYear = String(nodeId);\n                            if (selectedYear === year) {\n                                return 1;\n                            }\n                        }\n\n                        if (String(nodeId).length >= 6) {\n                            selectedDate = nodeId.split('-');\n                            selectedYear = selectedDate[0];\n                            selectedMonth = selectedDate[1];\n                            if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\n                                return 1;\n                            }\n                            if (String(nodeId).length >= 8) {\n                                selectedDay = nodeId.split('-')[2];\n                                if (selectedYear === year && selectedMonth === month && selectedDay === day) {\n                                    return 1;\n                                } else {\n                                    return 0;\n                                }\n                            }\n                        }\n                        return 0;\n                    });\n\n                    setImageInfos(data);\n\n                    const total = Math.ceil(data.length / itemsPerPage);\n                    setTotalPages(total);\n                }\n            })\n        ImageService.getAllImageFiles()\n            .then(response => {\n                if (response.data && response.data.length > 0) {\n                    setAllImage(response.data)\n                }\n            })\n    }, [])\n\n    const upload = () => {\n        setProgress(0);\n        UploadService.uploadImage(currentFile, (event) => {\n            setProgress(Math.round((100 * event.loaded) / event.total));\n        }).then(response => {\n            setMessage(response.data.message);\n            setAlertVisible(true)\n            setTimeout(() => {\n                setAlertVisible(false)\n            }, 2000)\n            return ImageService.getImageFiles();\n        }).then(files => {\n            if (files.data && files.data.length > 0) {\n                setImageData(files.data);\n                setTree(files.data);\n                setImageInfos(files.data);\n                const total = Math.ceil(files.data.length / itemsPerPage);\n                setTotalPages(total);\n            }\n        }).catch(error => {\n            const resMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            setMessage(resMessage);\n            setProgress(0);\n            setCurrentFile(undefined);\n        })\n    }\n\n    const selectFile = (event) => {\n        if (event.target.files[0]) {\n            setCurrentFile(event.target.files[0]);\n            setPreviewImage(URL.createObjectURL(event.target.files[0]));\n            setProgress(0);\n            setMessage(\"\");\n        }\n    }\n\n    const handleChangePageNumber = (pagenum) => {\n        setPageNumber(pagenum);\n        localStorage.setItem('page', pagenum)\n    }\n\n    const handleGoFirstPage = () => {\n        setPageNumber(1);\n    }\n\n    const handleGoLastPage = () => {\n        setPageNumber(totalPages);\n    }\n\n    const handlePrevPage = () => {\n        if (pageNumber > 1) {\n            const page = pageNumber - 1;\n            setPageNumber(page);\n        }\n    }\n\n    const handleNextPage = () => {\n        if (pageNumber < totalPages) {\n            const page = pageNumber + 1;\n            setPageNumber(page);\n        }\n    }\n\n    const handleChangeKeyword = (key) => {\n        //handleNodeSelect(null, selected ? selected : 'root', );\n        const keyword = key.trim().toLowerCase();\n        const nodeId = selected;\n        let data = allImage.filter(item => {\n            let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n            let selectedYear = '';\n            let selectedMonth = '';\n            let selectedDay = '';\n\n            let fileName = item.file_name + item.description;\n            fileName = fileName.trim().toLowerCase();\n\n            if (nodeId === 'root') {\n                if (keyword === \"\") {\n                    return 1;\n                } else {\n                    if (fileName.includes(keyword)) {\n                        return 1;\n                    }\n                }\n            }\n\n            let selectedDate = '';\n            if (String(nodeId).length === 4) {\n                selectedYear = String(nodeId);\n                if (selectedYear === year) {\n                    if (keyword === \"\") {\n                        return 1;\n                    } else {\n                        if (fileName.includes(keyword)) {\n                            return 1;\n                        }\n                    }\n                }\n            }\n\n            if (String(nodeId).length >= 6) {\n                selectedDate = nodeId.split('-');\n                selectedYear = selectedDate[0];\n                selectedMonth = selectedDate[1];\n                if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\n                    if (keyword === \"\") {\n                        return 1;\n                    } else {\n                        if (fileName.includes(keyword)) {\n                            return 1;\n                        }\n                    }\n                }\n                if (String(nodeId).length >= 8) {\n                    selectedDay = nodeId.split('-')[2];\n                    if (selectedYear === year && selectedMonth === month && selectedDay === day) {\n                        if (keyword === \"\") {\n                            return 1;\n                        } else {\n                            if (fileName.includes(keyword)) {\n                                return 1;\n                            }\n                        }\n                    } else {\n                        return 0;\n                    }\n                }\n            }\n            return 0;\n        });\n\n        setImageInfos(data);\n\n        const total = Math.ceil(data.length / itemsPerPage);\n        setTotalPages(total);\n\n        localStorage.removeItem(\"page\");\n        setPageNumber(1);\n    }\n\n    const handleNodeSelect = (event, nodeId, keyword) => {\n        if (keyword === \"\") {\n            document.getElementById('input-with-icon-textfield').value = '';\n        }\n        {\n            setSelected(nodeId);        // e.g. 2020-3-5\n            localStorage.setItem(\"selected\", nodeId);\n            setExpand();\n            let data = imageData.filter(item => {\n                let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n                let selectedYear = '';\n                let selectedMonth = '';\n                let selectedDay = '';\n\n                let fileName = item.file_name + item.description;\n                fileName = fileName.trim().toLowerCase();\n\n                if (nodeId === 'root') {\n                    if (keyword === \"\") {\n                        return 1;\n                    } else {\n                        if (fileName.includes(keyword)) {\n                            return 1;\n                        }\n                    }\n                }\n\n                let selectedDate = '';\n                if (String(nodeId).length === 4) {\n                    selectedYear = String(nodeId);\n                    if (selectedYear === year) {\n                        if (keyword === \"\") {\n                            return 1;\n                        } else {\n                            if (fileName.includes(keyword)) {\n                                return 1;\n                            }\n                        }\n                    }\n                }\n\n                if (String(nodeId).length >= 6) {\n                    selectedDate = nodeId.split('-');\n                    selectedYear = selectedDate[0];\n                    selectedMonth = selectedDate[1];\n                    if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\n                        if (keyword === \"\") {\n                            return 1;\n                        } else {\n                            if (fileName.includes(keyword)) {\n                                return 1;\n                            }\n                        }\n                    }\n                    if (String(nodeId).length >= 8) {\n                        selectedDay = nodeId.split('-')[2];\n                        if (selectedYear === year && selectedMonth === month && selectedDay === day) {\n                            if (keyword === \"\") {\n                                return 1;\n                            } else {\n                                if (fileName.includes(keyword)) {\n                                    return 1;\n                                }\n                            }\n                        } else {\n                            return 0;\n                        }\n                    }\n                }\n                return 0;\n            });\n\n            setImageInfos(data);\n\n            const total = Math.ceil(data.length / itemsPerPage);\n            setTotalPages(total);\n        }\n\n        localStorage.removeItem(\"page\");\n        setPageNumber(1);\n    }\n\n    const classes = useStyles();\n\n    const renderTree = (nodes) => {\n        return (\n            <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\n                {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\n            </TreeItem>\n        )\n    }\n\n\n    return (\n        <AppLayout>\n            <Row className=\"mb-3\">\n                <Col md={4}>\n                    <label className=\"btn btn-default p-0\">\n                        <input type=\"file\" accept=\"image/*\" onChange={selectFile} />\n                    </label>\n                    <Button size=\"sm\" style={{ width: \"100px\" }} disabled={!currentFile} onClick={upload}>\n                        Upload\n                    </Button>\n                </Col>\n                <Col md={8}>\n                    {previewImage && (\n                        <div className=\"text-center\">\n                            <Image className=\"preview\" src={previewImage} alt=\"\" />\n                        </div>\n                    )}\n                    {currentFile && (\n                        < ProgressBar className=\"my-3\" min={0} max={100} now={progress} label={`${progress}%`} striped />\n                    )}\n\n                    {alertVisible && message && (\n                        <Alert\n                            severity='success'\n                            style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\n                        >\n                            {message}\n                        </Alert>\n                    )}\n                </Col>\n            </Row>\n\n            <Row>\n                <Col md={3} className=\"card\">\n                    <TreeView\n                        className={classes.root}\n                        defaultCollapseIcon={<ExpandMoreIcon />}\n                        //defaultExpanded={['root']}\n                        defaultExpandIcon={<ChevronRightIcon />}\n                        expanded={expanded}\n                        onNodeSelect={(even, nodeIds) => handleNodeSelect(even, nodeIds, \"\")}\n                    >\n                        {treeData && renderTree(treeData)}\n                    </TreeView>\n                </Col>\n                <Col md={9}>\n                    {imageInfos\n                        && <ImageList\n                            image_list={imageInfos}\n                            totalPages={totalPages}\n                            itemsPerPage={itemsPerPage}\n                            currentPage={pageNumber}\n                            onChangeKeyword={handleChangeKeyword}\n                            onChangePageNumber={handleChangePageNumber}\n                            onGoFirstPage={handleGoFirstPage}\n                            onGoLastPage={handleGoLastPage}\n                            onNextPage={handleNextPage}\n                            onPrevPage={handlePrevPage}\n                        />\n                    }\n                </Col>\n            </Row>\n        </AppLayout>\n    );\n}\n\nconst ImageList = (props) => {\n    let history = useHistory();\n    const [ErrorMessage, setErrorMessage] = React.useState('');\n\n    const classes = useStyles();\n\n    const handleImageDownload = (url, imageid) => {\n        ImageService.downloadImage(url).then((res) => {\n            downloadFile(res.data, imageid + '.jpg')\n        }).catch((err) => {\n\n            err.response.data.text().then(res => {\n                let eMessage = JSON.parse(res).message\n                setErrorMessage(eMessage);\n                setTimeout(() => {\n                    setErrorMessage('');\n                }, 5000);\n            })\n\n        })\n    }\n\n\n\n\n\n    const getFileName = (filename) => {\n        let fname = filename.split(\"_\");\n        fname.shift();\n        return fname.join(\"_\");\n    }\n    const renderItem = (data) => (\n        <ListGroup.Item key={data.image_id}>\n            <Media>\n                <Image thumbnail src={data.thumb_url} className=\"mr-3\" />\n                <Media.Body>\n                    <h5><span>{`${data.id_counter}. File Name : `}</span><span>{getFileName(data.file_name)}</span></h5>\n                    <p style={{ marginBottom: \"0px\" }}><span>Id : </span><span>{data.image_id}</span></p>\n                    <p style={{ marginBottom: \"0px\" }}><small><span>Created Time : </span><span>{data.dateTime}</span></small></p>\n                    <p><small><span>Description : </span><span>{data.description || \"No description\"}</span></small></p>\n                    <Link to={`/edit_image/${data.image_id}`}><Button variant=\"success\" size=\"sm\" className=\"mr-3\">Edit Image</Button></Link>\n                    <Button variant=\"primary\" onClick={() => handleImageDownload(data.url, data.image_id)} size=\"sm\">Download</Button>\n                </Media.Body>\n            </Media>\n        </ListGroup.Item>\n    );\n\n    const showPagenationItem = () => {\n\n        return (\n            <Pagination\n                color=\"primary\"\n                className=\"mt-3\"\n                shape=\"rounded\"\n                count={props.totalPages}\n                page={props.currentPage}\n                onChange={(event, val) => props.onChangePageNumber(val)}\n            />\n        );\n    }\n\n    const doSomethingWith = (e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            props.onChangeKeyword(e.target.value);\n        }\n    }\n\n    return (\n        <AppLayout>\n            <div className=\"card\">\n                <TextField\n                    className={classes.margin}\n                    id=\"input-with-icon-textfield\"\n                    placeholder=\"Search\"\n                    onKeyDown={doSomethingWith}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">\n                                <SearchIcon />\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n                <h3 className=\"card-header\">List of Images</h3>\n                <ListGroup variant=\"flush\">\n                    {props.image_list\n                        && props.image_list.map((img, index) => {\n                            if ((props.currentPage - 1) * props.itemsPerPage <= index && (props.currentPage) * props.itemsPerPage > index)\n                                return renderItem(img)\n                        })}\n                </ListGroup>\n                {showPagenationItem()}\n            </div>\n\n            {ErrorMessage &&\n                <div>\n                    <Alert\n                        severity='error'\n                        style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\n                        action={\n                            <MButton\n                                color=\"inherit\" size=\"medium\"\n                                onClick={() => {\n                                    history.push('/add_token_code');\n                                }}\n                            >\n                                Take More Tokens\n                        </MButton>\n                        }\n                    >\n                        {ErrorMessage}\n                    </Alert>\n                </div>\n            }\n        </AppLayout>\n    );\n}\n\nexport default ImageUpload","/var/www/html/bstar/videnda-frontend/src/components/Service/PPT/PPTFileList.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Service/Image/EditImage.js",["276"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport { Stage, Layer, Image } from 'react-konva';\nimport {\n    Button,\n    ListGroup,\n    OverlayTrigger,\n    Tooltip,\n} from 'react-bootstrap';\nimport Pagination from '@material-ui/lab/Pagination';\n\nimport ImageService from '../../../services/image.service';\nimport Auth from \"../../../services/auth.service\";\nimport GlobalData from '../../../tools/GlobalData';\nimport Modal from 'react-bootstrap/Modal'\nimport Form from 'react-bootstrap/Form'\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { makeStyles, responsiveFontSizes } from '@material-ui/core/styles';\nimport Alert from '@material-ui/lab/Alert';\nimport MButton from '@material-ui/core/Button';\nimport { useHistory } from \"react-router-dom\";\nimport imageService from '../../../services/image.service';\nimport downloadFile from '../../../services/downloadfile'\n\nconst back_end_server = GlobalData.back_end_server_ip + \":\" + GlobalData.back_end_server_port;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 110,\n        flexGrow: 1,\n        maxWidth: 400,\n    },\n    margin: {\n        margin: theme.spacing(1),\n        // marginTop: 130\n    },\n}));\n\nconst MyVerticallyCenteredModal = (props) => {\n    const onSaveClick = (event) => {\n        props.onAddDescription(props.description)\n        props.onHide()\n    }\n\n    return (\n        <Modal\n            show={props.show}\n            onHide={props.onHide}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Input Description\n            </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <h5>📝 Please enter your description to the selected image.</h5>\n                <Form.Control as=\"textarea\" rows={3} name=\"description\" value={props.description} onChange={props.handleInputChange} />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={props.onHide}>Close</Button>\n                <Button variant=\"primary\" onClick={onSaveClick}>Save changes</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nconst EditImage = (props) => {\n    const [imageInfos, setImageInfos] = React.useState(undefined);\n    const [imageId, setImageId] = React.useState('');\n    const [imageSrc, setImageSrc] = React.useState('');\n    const [imageDescription, setImageDescription] = useState('');\n    const [errorMessage, setErrorMessage] = React.useState('');\n    const [currentUser] = React.useState(Auth.getCurrentUser());\n    const [imageHistory, setImageHistory] = React.useState(undefined);\n    const [orginImageHistory, setOrginImageHistory] = useState(undefined);\n    const [lastId, setLastId] = React.useState('');\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [itemsPerPage] = useState(5);\n    const [totalPage, setTotalPage] = useState(1);\n    const [modalShow, setModalShow] = React.useState(false);\n    const [isRotate, setIsRotate] = useState(undefined)\n    const [isEditDescription, setIsEditDescription] = useState(undefined)\n\n    let history = useHistory();\n\n    React.useEffect(() => {\n        ImageService.getImageFiles()\n            .then(files => {\n                setImageInfos(files.data);\n                const iid = props.match.params.image_id;\n                return ImageService.getImageHistory(iid);\n            }).then(response => {\n                setOrginImageHistory(response.data);\n                setImageHistory(response.data);\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\n            }).catch((err) => {\n                const resMessage = (\n                    err.response &&\n                    err.response.data &&\n                    err.response.data.message\n                ) || err.toString();\n                setIsLoading(false);\n                setErrorMessage(resMessage);\n            });\n    }, [props]);\n\n    React.useEffect(() => {\n        if (imageHistory && imageHistory.length > 0) {\n            const first_id = imageHistory[0].image_id;\n            const last_id = imageHistory[imageHistory.length - 1].image_id;\n            setLastId(last_id);\n\n            if (isRotate && !isEditDescription) {\n                setImageId(last_id)\n                setTotalPage(Math.ceil(imageHistory.length / itemsPerPage));\n                setPageNumber(totalPage)\n                setIsRotate(false)\n            } else if (!isRotate && isEditDescription) {\n                setIsEditDescription(false)\n            } else {\n                setImageId(first_id)\n            }\n\n            setIsLoading(false);\n        }\n    }, [imageHistory]);\n\n    React.useEffect(() => {\n        setImageSrc(ImageService.getImage(imageId));\n    }, [imageId]);\n\n    const handleRotateImage = () => {\n        const payload = {\n            imageId: imageId,\n            degree: 90,\n            clock: true,\n        }\n        setIsLoading(true);\n        ImageService.rotateImage(payload).then(response => {\n            ImageService.getImageHistory(response.data.imageId).then(response => {\n                setImageHistory(response.data);\n                setTotalPage(Math.ceil(response.data.length / itemsPerPage));\n            }).catch(err => {\n\n            })\n            setErrorMessage('');\n        }).catch((err) => {\n            const resMessage = (\n                err.response &&\n                err.response.data &&\n                err.response.data.message\n            ) || err.toString();\n            setIsLoading(false);\n            \n            setErrorMessage(resMessage);\n            setTimeout(() => {\n                setErrorMessage('');\n            }, 5000);\n        });\n        setIsRotate(true);\n    }\n\n    const handleEditImage = () => {\n        setModalShow(true);\n        setImageDescription(imageHistory.find(item => item.image_id === imageId).description)\n        setIsEditDescription(true)\n    }\n\n    const handleAddDescription = (desc) => {\n        const data = {\n            imageId: imageId,\n            imageDescription: desc\n        }\n        ImageService.addImageDescription(data).then(response => {\n            const index = imageHistory.findIndex(item => item.image_id === imageId)\n            const history = [...imageHistory];\n            history[index].description = desc;\n            setImageHistory(history);\n            setErrorMessage('');\n        }).catch((err) => {\n            const resMessage = (\n                err.response &&\n                err.response.data &&\n                err.response.data.message\n            ) || err.toString();\n            setIsLoading(false);\n\n            setErrorMessage(resMessage);\n            setTimeout(() => {\n                setErrorMessage('');\n            }, 5000);\n        })\n    }\n\n    const handleInputChange = (e) => {\n        setImageDescription(e.target.value);\n    }\n\n    const onClickHistory = (id) => {\n        setImageId(id);\n    }\n\n    const removeImage = (image_id) => {\n        let arr = [...imageHistory];\n        if (arr.length === 1) {\n            const confirm = window.confirm(\"Are you sure remove the last image?\");\n            if (confirm) {\n                ImageService.removeImage(image_id).then((response) => {\n                    props.history.push(\"/upload_image\");\n                }).catch((err) => {\n                    const resMessage = (\n                        err.response &&\n                        err.response.data &&\n                        err.response.data.message\n                    ) || err.toString();\n                    setIsLoading(false);\n                    setErrorMessage(resMessage);\n                });\n            }\n        } else {\n            ImageService.removeImage(image_id).then((response) => {\n                arr = arr.filter(item => item.image_id !== image_id)\n                setImageHistory(arr);\n            }).catch((err) => {\n                const resMessage = (\n                    err.response &&\n                    err.response.data &&\n                    err.response.data.message\n                ) || err.toString();\n                setIsLoading(false);\n                setErrorMessage(resMessage);\n            });\n        }\n    }\n\n    const handleNextImage = () => {\n        const iid = props.match.params.image_id;\n        var nextImageId = null;\n        if (imageInfos && imageInfos.length > 0) {\n            for (let i = 0; i < imageInfos.length - 1; i++) {\n                if (imageInfos[i].image_id === iid) {\n                    nextImageId = imageInfos[i + 1].image_id;\n                    break;\n                }\n            }\n        }\n        if (nextImageId) {\n            props.history.push(`/edit_image/${nextImageId}`);\n        }\n    }\n\n    const handlePrevImage = () => {\n        const iid = props.match.params.image_id;\n        var prevImageId = null;\n        if (imageInfos && imageInfos.length > 0) {\n            for (let i = 1; i < imageInfos.length; i++) {\n                if (imageInfos[i].image_id === iid) {\n                    prevImageId = imageInfos[i - 1].image_id;\n                    break;\n                }\n            }\n        }\n        if (prevImageId) {\n            props.history.push(`/edit_image/${prevImageId}`);\n        }\n    }\n\n    const handleChangePageNumber = (pagenum) => {\n        setPageNumber(pagenum);\n    }\n\n    useEffect(() => {\n        if (imageHistory) {\n            const total = Math.ceil(imageHistory.length / itemsPerPage);\n            setTotalPage(total);\n            isRotate && setPageNumber(total);\n        }\n    })\n\n    // search\n    const doSomethingWith = (e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            const keyword = e.target.value;\n\n            const data = orginImageHistory.filter(item => {\n                let fileName = item.file_name + item.description;\n                fileName = fileName.trim().toLowerCase();\n\n                if (fileName.includes(keyword)) {\n                    return 1;\n                } else {\n                    return null;\n                }\n            })\n\n            setImageHistory(data);\n\n            const total = Math.ceil(data.length / itemsPerPage);\n            setTotalPage(total);\n            setPageNumber(1);\n        }\n    }\n\n    const handleImageDownload = (url, imageid) => {\n        imageService.downloadImage(url).then((res) => {\n            downloadFile(res.data, imageid + '.jpg')\n        }).catch((err) => {\n            setIsLoading(false);\n            err.response.data.text().then(res => {\n                let eMessage = JSON.parse(res).message\n                setErrorMessage(eMessage);\n                setTimeout(() => {\n                    setErrorMessage('');\n                }, 5000);\n            })\n        })\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className='col-lg-6  mb-5 mb-lg-0  pb-4 pb-lg-0'>\n                    <div className=\"mr-3 url-image\" style={{ width: \"500px\", height: \"400px\" }}>\n                        <Stage width={500} height={400}>\n                            <Layer>\n                                <URLImage src={imageSrc} width={500} height={400} />\n                            </Layer>\n                        </Stage>\n                        <div className='text-center mt-4'>\n                            <div>\n                                <Button className=\"btn-circles mr-1\" href='/upload_image'>\n                                    Go Back\n                                </Button>\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handlePrevImage() }}>Prev</Button>\n                                <Button variant=\"outline-info\" className=\"mr-1\" onClick={() => { handleNextImage() }}>Next</Button>\n                            </div>\n                            <div>\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleRotateImage} disabled={lastId !== imageId || isLoading}>\n                                    {isLoading && (\n                                        <span className=\"spinner-border spinner-border-sm\"></span>\n                                    )}\n                                    <span>Rotate Image</span>\n                                </Button>\n                                <Button variant=\"success\" className=\"my-1 mr-1\" onClick={handleEditImage}>\n                                    Edit Description\n                                </Button>\n                                <Button variant=\"primary\" className=\"my-3 mr-2\"\n                                    onClick={() => handleImageDownload(`${back_end_server}/api/image/getImageFile/${imageId}?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&type=download`, imageId)}\n                                >                                    Download\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n\n                    <MyVerticallyCenteredModal\n                        show={modalShow}\n                        onHide={() => setModalShow(false)}\n                        description={imageDescription}\n                        onAddDescription={handleAddDescription}\n                        onChange={handleInputChange}\n                    />\n                </div>\n                <div className='col-lg-6 mt-5 mt-lg-0'>\n                    <TextField\n                        className={classes.margin}\n                        placeholder=\"Search\"\n                        onKeyDown={doSomethingWith}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <SearchIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <ImageHistory\n                        imageHistory={imageHistory}\n                        activeImageId={imageId}\n                        onRemove={removeImage}\n                        totalPage={totalPage}\n                        currentPage={pageNumber}\n                        itemsPerPage={itemsPerPage}\n                        itemClick={onClickHistory}\n                        onChangePageNumber={handleChangePageNumber}\n                    />\n                    <Pagination color=\"primary\" shape=\"rounded\" className=\"m-3\" count={totalPage} page={pageNumber} onChange={(event, val) => setPageNumber(val)} />\n                </div>\n            </div>\n            {\n                errorMessage &&\n                <div>\n                    <Alert\n                        severity='error'\n                        style={{ position: 'fixed', bottom: 50, right: 50, zIndex: 9999, padding: '20px 40px' }}\n                        action={ errorMessage.includes('Not Enough Tokens') &&\n                            <MButton\n                                color=\"inherit\" size=\"medium\"\n                                onClick={() => {\n                                    history.push('/add_token_code');\n                                }}\n                            >\n                                Take More Tokens\n                        </MButton>\n                        }\n                    >\n                        {errorMessage}\n                    </Alert>\n                </div>\n            }\n        </div>\n    )\n}\n\nconst ImageHistory = ({ imageHistory, activeImageId, onRemove, itemClick, currentPage, itemsPerPage }) => {\n    const getIsActive = (image_id) =>\n    (image_id === activeImageId ?\n        \"dark\" :\n        \"\"\n    );\n\n    const getFileName = (filename) => {\n        let fname = filename.split(\"_\");\n        fname.shift();\n        return fname.join(\"_\");\n    }\n\n    const renderItem = (ih) => (\n        <ListGroup.Item key={ih.image_id} variant={getIsActive(ih.image_id)} className=\"cursor-pointer\" onClick={() => itemClick(ih.image_id)}>\n            <div>\n                <h6>File Name : <span>{getFileName(ih.file_name)}</span></h6>\n                <OverlayTrigger\n                    key={\"right\"}\n                    placement={\"right\"}\n                    overlay={\n                        <Tooltip id={`remove`}>Remove image</Tooltip>\n                    }\n                >\n                    <button type=\"button\" className=\"close\" onClick={() => { onRemove(ih.image_id) }}>\n                        <span aria-hidden=\"true\" style={{ color: \"red\" }}>×</span>\n                        <span className=\"sr-only\">Close</span>\n                    </button>\n                </OverlayTrigger>\n            </div>\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Image Id: </span><span>{ih.image_id}</span></small></p>\n            <p style={{ marginBottom: \"0px\" }}><small><span style={{ fontWeight: 500 }}>Description: </span><span>{ih.description || \"No description\"}</span></small></p>\n            <p style={{ marginBottom: \"0px\" }}><span style={{ fontWeight: 500 }}>Source Image: </span><span>{ih.source_image_id || \"Main image\"}</span></p>\n        </ListGroup.Item>\n    );\n\n    return (\n        <ListGroup className=\"list-group\">\n            {imageHistory && imageHistory.length > 0 && (\n                imageHistory.map((ih, index) => {\n                    if ((currentPage - 1) * itemsPerPage <= index && (currentPage) * itemsPerPage > index)\n                        return renderItem(ih)\n                    else {\n                        return null\n                    }\n                })\n            )}\n        </ListGroup>\n    )\n}\n\nclass URLImage extends React.Component {\n    state = {\n        image: null,\n        width: 0,\n        height: 0,\n    };\n    componentDidMount() {\n        this.loadImage();\n    }\n    componentDidUpdate(oldProps) {\n        if (oldProps.src !== this.props.src) {\n            this.loadImage();\n        }\n    }\n    componentWillUnmount() {\n        this.image.removeEventListener('load', this.handleLoad);\n    }\n    loadImage() {\n        // save to \"this\" to remove \"load\" handler on unmount\n        this.image = new window.Image();\n        this.image.src = this.props.src;\n        this.image.addEventListener('load', this.handleLoad);\n    }\n    handleLoad = () => {\n        // after setState react-konva will update canvas and redraw the layer\n        // because \"image\" property is changed\n        this.setState({\n            image: this.image\n        });\n\n        const ratio = Math.min(Math.min(this.props.width, this.image.width) / this.image.width, Math.min(this.props.height, this.image.height) / this.image.height);\n\n        this.setState({\n            width: ratio * this.image.width,\n            height: ratio * this.image.height\n        })\n    };\n    render() {\n        return (\n            <Image\n                x={this.props.x}\n                y={this.props.y}\n                width={this.state.width}\n                height={this.state.height}\n                image={this.state.image}\n                ref={node => {\n                    this.imageNode = node;\n                }}\n            />\n        );\n    }\n}\n\nexport default EditImage;\n","/var/www/html/bstar/videnda-frontend/src/components/Service/PPT/EditPPT.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Service/Video/UploadVideo.js",["277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeView from '@material-ui/lab/TreeView';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { Pagination } from '@material-ui/lab';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputIcon from '@material-ui/icons/InsertLink';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport VideoPlayer from './VideoPlayer';\nimport EditDialog from './EditDialog';\n\nimport {\n    Row,\n    Col,\n    Alert,\n    Image,\n    Button,\n    ListGroup,\n    Media,\n    Form,\n} from 'react-bootstrap';\n\nimport PlaylistService from '../../../services/playlist.service';\nimport VideoService from '../../../services/video.service';\nimport { LinearProgress } from '@material-ui/core';\nimport SelectOptions from '../../Common/SelectOptions';\nimport authService from '../../../services/auth.service';\nimport AppLayout from '../../../layouts/App';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 110,\n        flexGrow: 1,\n        maxWidth: 400,\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    linkInput: {\n        width: \"100%\",\n        marginBottom: theme.spacing(1)\n    },\n    linerProgress: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    }\n}));\n\nconst getVideoId = (url) => {\n    return url.split(\"?v=\")[1];\n}\n\nconst VideoUpload = () => {\n    const [message, setMessage] = React.useState(\"\");\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('page') ? Number(localStorage.getItem('page')) : 1);\n    const [itemsPerPage] = React.useState(10);\n    const [totalPages, setTotalPages] = React.useState(1);\n    const [treeData, setTreeData] = useState('');\n    const [selected, setSelected] = useState('root');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [expanded, setExpanded] = useState([]);\n    const [videoUrl, setVideoUrl] = useState('');\n    const [progressVisible, setProgressVisible] = useState(false);\n    const [videoData, setVideoData] = useState([]);\n    const [videoInfos, setVideoInfos] = useState([]);\n    const [modalShow, setModalShow] = useState(false);\n    const [playUrl, setPlayUrl] = useState(null);\n    const [metaTitle, setMetaTitle] = useState(null);\n    const [playlists, setPlaylists] = useState([]);\n    const [metaDescription, setMetaDescription] = useState(null);\n    const [videoId, setVideoId] = useState(null);\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\n    const [editShow, setEditShow] = useState(false);\n    const [manualTitle, setManualTitle] = useState(undefined);\n    const [manualDescription, setManualDescription] = useState(undefined);\n    //const [myPlayingStatus, setMyPlayingStatus] = useState(false);\n\n    useEffect(() => {\n        setExpand()\n    }, [])\n\n    const setExpand = () => {\n        const selectedNode = localStorage.getItem('selected');\n        let expand = ['root'];\n        if (selectedNode) {\n            let y, m, d;\n            if (selectedNode.length === 4 && Number(selectedNode) > 1000) {\n                y = selectedNode\n                expand.push(y)\n            } else if (selectedNode.length === 7) {\n                y = selectedNode.split(\"-\")[0];\n                m = selectedNode.split(\"-\")[1];\n                expand.push(y)\n                expand.push(y + '-' + m)\n            } else if (selectedNode.length === 10) {\n                y = selectedNode.split(\"-\")[0];\n                m = selectedNode.split(\"-\")[1];\n                d = selectedNode.split(\"-\")[2];\n                expand.push(y)\n                expand.push(y + '-' + m)\n                expand.push(y + '-' + m + '-' + d)\n            }\n        }\n        setExpanded(expand)\n    }\n\n    // set tree data\n    const setTree = (plain) => {\n        const data = {\n            id: 'root',\n            name: 'All Videos',\n            children: [],\n        };\n        plain.forEach(value => {\n            let [year, month, day] = new Date(value.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n            let index = data.children.findIndex(item => item.id === String(year))\n            if (index < 0) {\n                data.children.push({\n                    id: year.toString(),\n                    name: year.toString(),\n                    children: [{\n                        id: year + '-' + month,\n                        name: month,\n                        children: [{\n                            id: year + '-' + month + '-' + day,\n                            name: day,\n                        }]\n                    }]\n                })\n            } else {\n                let month_index = data.children[index].children.findIndex(item => String(item.id) === year + '-' + month)\n                if (month_index < 0) {\n                    data.children[index].children.push({\n                        id: year + '-' + month,\n                        name: month,\n                        children: [{\n                            id: year + '-' + month + '-' + day,\n                            name: day,\n                        }]\n                    })\n                } else {\n                    let day_index = data.children[index].children[month_index].children.findIndex(item => String(item.id) === year + '-' + month + '-' + day)\n                    if (day_index < 0) {\n                        data.children[index].children[month_index].children.push({\n                            id: year + '-' + month + '-' + day,\n                            name: day,\n                        })\n                    }\n                }\n            }\n\n        });\n\n        setTreeData(data);\n    }\n\n    React.useEffect(() => {\n        getAllVideos();\n\n        //get playlists\n        getAllPlaylists();\n    }, [])\n\n    const getAllPlaylists = () => {\n        PlaylistService.getAllPlaylist()\n            .then(async response => {\n                if (response.data && response.data.length > 0) {\n                    setPlaylists(response.data);\n                }\n            })\n    }\n\n    const getAllVideos = () => {\n        VideoService.getAllVideoList()\n            .then(async response => {\n                if (response.data && response.data.length > 0) {\n                    const res = response.data;\n\n                    for (const key in res) {\n                        const videoId = res[key].id;\n                        const result = await VideoService.getPlaylistIds(videoId);\n                        res[key].arr = result.data.playlists;\n                    }\n\n                    setVideoData(res)\n                    setTree(response.data)\n\n                    ///////\n                    const nodeId = localStorage.getItem('selected');\n                    let data = await response.data.filter(item => {\n                        let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n                        let selectedYear = '';\n                        let selectedMonth = '';\n                        let selectedDay = '';\n\n                        let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\n                        fileName = fileName ? fileName.trim().toLowerCase() : '';\n\n                        if (nodeId === 'root') {\n                            return 1;\n                        }\n\n                        let selectedDate = '';\n                        if (String(nodeId).length === 4) {\n                            selectedYear = String(nodeId);\n                            if (selectedYear === year) {\n                                return 1;\n                            }\n                        }\n\n                        if (String(nodeId).length >= 6) {\n                            selectedDate = nodeId.split('-');\n                            selectedYear = selectedDate[0];\n                            selectedMonth = selectedDate[1];\n                            if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\n                                return 1;\n                            }\n                            if (String(nodeId).length >= 8) {\n                                selectedDay = nodeId.split('-')[2];\n                                if (selectedYear === year && selectedMonth === month && selectedDay === day) {\n                                    return 1;\n                                } else {\n                                    return 0;\n                                }\n                            }\n                        }\n                        return 0;\n                    });\n\n                    setVideoInfos(data);\n\n                    const total = Math.ceil(data.length / itemsPerPage);\n                    setTotalPages(total);\n                }\n            })\n    }\n\n    const upload = () => {\n        setProgressVisible(true);\n\n        VideoService.uploadVideo(videoUrl)\n            .then(response => {\n                setMessage(response.data.message);\n                setAlertVisible(true)\n                setTimeout(() => {\n                    setAlertVisible(false)\n                }, 2000)\n\n                setProgressVisible(false);\n\n                if (response.data.message === 'success') {\n                    getAllVideos();\n                    setVideoUrl('');\n                }\n            })\n    }\n\n    const handleChangePageNumber = (pagenum) => {\n        setPageNumber(pagenum);\n        localStorage.setItem('page', pagenum)\n    }\n\n    const handleChangeKeyword = (key) => {\n        const keyword = key.trim().toLowerCase();\n        const nodeId = selected;\n        let data = videoData.filter(item => {\n            let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n            let selectedYear = '';\n            let selectedMonth = '';\n            let selectedDay = '';\n\n            let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\n            fileName = fileName.trim().toLowerCase();\n\n            if (nodeId === 'root') {\n                if (keyword === \"\") {\n                    return 1;\n                } else {\n                    if (fileName.includes(keyword)) {\n                        return 1;\n                    }\n                }\n            }\n\n            let selectedDate = '';\n            if (String(nodeId).length === 4) {\n                selectedYear = String(nodeId);\n                if (selectedYear === year) {\n                    if (keyword === \"\") {\n                        return 1;\n                    } else {\n                        if (fileName.includes(keyword)) {\n                            return 1;\n                        }\n                    }\n                }\n            }\n\n            if (String(nodeId).length >= 6) {\n                selectedDate = nodeId.split('-');\n                selectedYear = selectedDate[0];\n                selectedMonth = selectedDate[1];\n                if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\n                    if (keyword === \"\") {\n                        return 1;\n                    } else {\n                        if (fileName.includes(keyword)) {\n                            return 1;\n                        }\n                    }\n                }\n                if (String(nodeId).length >= 8) {\n                    selectedDay = nodeId.split('-')[2];\n                    if (selectedYear === year && selectedMonth === month && selectedDay === day) {\n                        if (keyword === \"\") {\n                            return 1;\n                        } else {\n                            if (fileName.includes(keyword)) {\n                                return 1;\n                            }\n                        }\n                    } else {\n                        return 0;\n                    }\n                }\n            }\n            return 0;\n        });\n\n        setVideoInfos(data);\n\n        const total = Math.ceil(data.length / itemsPerPage);\n        setTotalPages(total);\n\n        localStorage.removeItem(\"page\");\n        setPageNumber(1);\n    }\n\n    const handleNodeSelect = (event, nodeId, keyword) => {\n        if (keyword === \"\") {\n            document.getElementById('input-with-icon-textfield').value = '';\n        }\n        {\n            setSelected(nodeId);        // e.g. 2020-3-5\n            localStorage.setItem(\"selected\", nodeId);\n            setExpand();\n            let data = videoData.filter(item => {\n                let [year, month, day] = new Date(item.dateTime).toLocaleDateString('pt-br').split('/').reverse();\n\n                let selectedYear = '';\n                let selectedMonth = '';\n                let selectedDay = '';\n\n                let fileName = item.meta_keyword + item.meta_description + item.meta_title + item.manual_description + item.manual_title + getVideoId(item.video_id);\n                fileName = fileName.trim().toLowerCase();\n\n                if (nodeId === 'root') {\n                    if (keyword === \"\") {\n                        return 1;\n                    } else {\n                        if (fileName.includes(keyword)) {\n                            return 1;\n                        }\n                    }\n                }\n\n                let selectedDate = '';\n                if (String(nodeId).length === 4) {\n                    selectedYear = String(nodeId);\n                    if (selectedYear === year) {\n                        if (keyword === \"\") {\n                            return 1;\n                        } else {\n                            if (fileName.includes(keyword)) {\n                                return 1;\n                            }\n                        }\n                    }\n                }\n\n                if (String(nodeId).length >= 6) {\n                    selectedDate = nodeId.split('-');\n                    selectedYear = selectedDate[0];\n                    selectedMonth = selectedDate[1];\n                    if (selectedYear === year && selectedMonth === month && nodeId.split('-').length === 2) {\n                        if (keyword === \"\") {\n                            return 1;\n                        } else {\n                            if (fileName.includes(keyword)) {\n                                return 1;\n                            }\n                        }\n                    }\n                    if (String(nodeId).length >= 8) {\n                        selectedDay = nodeId.split('-')[2];\n                        if (selectedYear === year && selectedMonth === month && selectedDay === day) {\n                            if (keyword === \"\") {\n                                return 1;\n                            } else {\n                                if (fileName.includes(keyword)) {\n                                    return 1;\n                                }\n                            }\n                        } else {\n                            return 0;\n                        }\n                    }\n                }\n                return 0;\n            });\n\n            setVideoInfos(data);\n\n            const total = Math.ceil(data.length / itemsPerPage);\n            setTotalPages(total);\n        }\n\n        localStorage.removeItem(\"page\");\n        setPageNumber(1);\n    }\n\n    const handleOnKeyDown = (e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            setVideoUrl(e.target.value);\n            upload();\n        }\n    }\n\n    // Remove one video item\n    const handleRemoveItem = (id) => {\n        if (window.confirm('Are you sure?')) {\n            VideoService.removeVideo(id)\n                .then(response => {\n                    if (response.data.message === \"success\") {\n                        let arr = [...videoInfos];\n                        arr = arr.filter(item => item.id !== id);\n                        setVideoInfos(arr);\n                    }\n                }).catch((err) => {\n                    const resMessage = (\n                        err.response &&\n                        err.response.data &&\n                        err.response.data.message\n                    ) || err.toString();\n\n                    setMessage(resMessage);\n                });\n        }\n    }\n\n    function meta_restriction_age_str(meta) {\n        if (!meta)\n            return \"\";\n        return \" [\" + meta + \"]\";\n    }\n\n    // Play one video\n    const handlePlayVideo = (video_url, meta_title, videoId, meta_restriction_age, meta_description) => {\n        //setMyPlayingStatus(true);\n        setModalShow(true);\n        setPlayUrl(video_url);\n        setMetaTitle(meta_title);\n        setMetaDescription(meta_description);\n        setVideoId(videoId);\n    }\n\n    const onNextVideo = () => {\n        const index = videoData.findIndex(item => item.id == videoId);\n        if (index >= videoData.length - 1) {\n            return;\n        }\n        const nextUrl = videoData[index + 1].video_id;\n        setVideoId(videoData[index + 1].id);\n        setPlayUrl(nextUrl);\n        setMetaTitle(videoData[index + 1].meta_title + meta_restriction_age_str(videoData[index + 1].meta_restriction_age))\n        setMetaDescription(videoData[index + 1].meta_description)\n        setCurrentVideoNumber(getCurrentVideoNumber() + 1)\n    }\n\n    const onPreviousVideo = () => {\n        const index = videoData.findIndex(item => item.id == videoId);\n        if (index <= 0) {\n            return;\n        }\n        const prevUrl = videoData[index - 1].video_id;\n        setVideoId(videoData[index - 1].id);\n        setPlayUrl(prevUrl);\n        setMetaTitle(videoData[index - 1].meta_title + meta_restriction_age_str(videoData[index - 1].meta_restriction_age))\n        setMetaDescription(videoData[index - 1].meta_description)\n        setCurrentVideoNumber(getCurrentVideoNumber() - 1)\n    }\n\n    function beep() {\n        var snd = new Audio(\"data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeIIIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVKOhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1fhzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACiDgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhEBcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABYAAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzwy5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHsf/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZSaQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAAkQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFymS3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzNGzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0qEOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l//8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kGeFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZB4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZTGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRPgUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCkQjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=\");\n        snd.play();\n    }\n\n    const onOpenSourceUrl = () => {\n        //beep();\n        //Pause curent video before launching a new one\n        const index = videoData.findIndex(item => item.id == videoId);\n        const nextUrl = videoData[index].video_id;\n        window.open(nextUrl, '_blank');\n    }\n\n    const getCurrentVideoNumber = () => {\n        return videoData.findIndex(item => item.id == videoId) + 1\n    }\n\n    const itemClick = (video_id, videoId) => {\n        setPlayUrl(video_id);\n        setVideoId(videoId);\n        setMetaTitle(videoData.find(item => item.id == videoId).meta_title);\n        setMetaDescription(videoData.find(item => item.id == videoId).meta_description);\n    }\n\n    // playlist\n    const handlePlaylist = (e, video_id) => {\n        const playlist_title = e.target.value;\n        let playlist_id = '';\n\n        if (playlist_title != '') {\n            const selectedPlaylist = playlists.find(item => item.playlist_title == playlist_title);\n            playlist_id = selectedPlaylist.playlist_id;\n        }\n\n        VideoService.changeVideoGroup(video_id, playlist_id)\n    }\n\n    // edit save\n    const onSave = () => {\n        setEditShow(false);\n        VideoService.setManualInfo(videoId, manualTitle, manualDescription);\n        const index = videoData.findIndex(item => item.id == videoId);\n        videoData[index].manual_title = manualTitle;\n        videoData[index].manual_description = manualDescription;\n    }\n\n    const setVideoType = (video_id, type) => {\n        let arr = videoInfos;\n        arr.map((item, index) => {\n            item.id == video_id && (arr[index].type = type);\n        });\n        setVideoInfos(arr);\n\n        VideoService.setVideoType(video_id, type);\n    }\n\n    const savePlaylist = (id, value) => {\n        VideoService.addPlaylistIds(id, value)\n    }\n\n    const classes = useStyles();\n\n    const renderTree = (nodes) => {\n        return (\n            <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\n                {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\n            </TreeItem>\n        )\n    }\n\n    return (\n        <AppLayout>\n            <Row className=\"mb-3\">\n                <Col md={12}>\n                    <TextField\n                        className={classes.linkInput}\n                        id=\"input-with-icon-textfield-top\"\n                        placeholder=\"Paste your youtube video link.\"\n                        value={videoUrl}\n                        onChange={(e) => setVideoUrl(e.target.value)}\n                        onKeyDown={(e) => handleOnKeyDown(e)}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <InputIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <Button size=\"sm\" style={{ width: \"100px\" }} disabled={videoUrl === ''} onClick={upload}>\n                        Upload\n                    </Button>\n                    {progressVisible && (\n                        <div className={classes.linerProgress}>\n                            <LinearProgress />\n                        </div>\n                    )}\n                    {message && (\n                        <Alert variant=\"success\" className=\"mt-3 upload_alert\" show={alertVisible}>\n                            <Alert.Heading>Upload Result</Alert.Heading>\n                            {message}\n                        </Alert>\n                    )}\n                </Col>\n\n            </Row>\n\n            <Row>\n                <Col md={3} className=\"card\">\n                    <TreeView\n                        className={classes.root}\n                        defaultCollapseIcon={<ExpandMoreIcon />}\n                        defaultExpandIcon={<ChevronRightIcon />}\n                        expanded={expanded}\n                        onNodeSelect={(even, nodeIds) => handleNodeSelect(even, nodeIds, \"\")}\n                    >\n                        {treeData && renderTree(treeData)}\n                    </TreeView>\n                </Col>\n                <Col md={9}>\n                    {videoInfos &&\n                        <VideoList\n                            videoInfos={videoInfos}\n                            totalPages={totalPages}\n                            itemsPerPage={itemsPerPage}\n                            currentPage={pageNumber}\n                            playlists={playlists}\n                            savePlaylist={savePlaylist}\n                            onChangeKeyword={handleChangeKeyword}\n                            onChangePageNumber={handleChangePageNumber}\n                            handleRemoveItem={handleRemoveItem}\n                            handlePlayVideo={handlePlayVideo}\n                            onChangePlaylist={handlePlaylist}\n                            setEditShow={setEditShow}\n                            setManualTitle={setManualTitle}\n                            setManualDescription={setManualDescription}\n                            setVideoId={setVideoId}\n                            setVideoType={setVideoType}\n                        />\n                    }\n                </Col>\n            </Row>\n            <VideoPlayer\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n                playUrl={playUrl}\n                metaTitle={metaTitle}\n                metaDescription={metaDescription}\n                videoData={videoData}\n                videoId={videoId}\n                onPreviousVideo={onPreviousVideo}\n                onNextVideo={onNextVideo}\n                onOpenSourceUrl={onOpenSourceUrl}\n                currentVideoNumber={currentVideoNumber}\n                itemClick={itemClick}\n                onPreviousVideo={onPreviousVideo}\n\t\t\t\t//onClickFullScreen={onClickFullScreen}\n                //myPlayingStatus={true}\n            />\n            <EditDialog\n                show={editShow}\n                onHide={() => setEditShow(false)}\n                manualTitle={manualTitle}\n                manualDescription={manualDescription}\n                setManualTitle={setManualTitle}\n                setManualDescription={setManualDescription}\n                onSave={onSave}\n            />\n        </AppLayout>\n    );\n}\n\n\nconst VideoList = (props) => {\n    const classes = useStyles();\n\n    let playlists = [];\n    props.playlists.map(item=>{\n        playlists.push({id: item.id, name: item.playlist_title});\n    });\n\n    const user = authService.getCurrentUser();\n    const isAdmin = user && user.roles.includes(\"ROLE_ADMIN\") || false\n\n    const renderItem = (data) => (\n        <ListGroup.Item key={data.id}>\n            <Media>\n                <Image thumbnail src={data.meta_image} className=\"mr-3\" style={{ cursor: 'pointer' }} onClick={() => props.handlePlayVideo(data.video_id, data.manual_title || data.meta_title, data.id, data.meta_restriction_age, data.manual_description || data.meta_description)} />\n                <Media.Body>\n                    <h5><span style={{ color: 'green' }}>{data.manual_title && data.manual_title}</span></h5>\n                    <h5><span>{data.meta_title}</span></h5>\n                    <p style={{ marginBottom: \"0px\" }}><span>ID : </span><code>{getVideoId(data.video_id)}</code></p>\n                    <p style={{ marginBottom: \"2px\" }}><span style={{ color: 'green' }}>{data.manual_description && data.manual_description}</span></p>\n                    <p style={{ marginBottom: \"2px\" }}><span>{data.meta_description}</span></p>\n                    {data.meta_keyword && (\n                        <p><small><span>Keywords : </span><span>{data.meta_keyword}</span></small></p>\n                    )}\n                    <p><small><i><span>Created Time : </span><span>{data.dateTime}</span></i></small></p>\n\n                    <Row>\n                        <Col className=\"align-self-end pb-4\">\n                            <Button variant=\"success\" size=\"sm\" className=\"mr-2\"\n                            \tonClick={() => props.handlePlayVideo(data.video_id, data.manual_title ||\n                            \t\tdata.meta_title, data.id, data.meta_restriction_age,\n                            \t\tdata.manual_description || data.meta_description)}>Play</Button>\n                            <Button variant=\"info\" size=\"sm\" className=\"mr-2\"\n                                onClick={() => {\n                                    props.setManualTitle( data.manual_title ? data.manual_title : data.meta_title);\n                                    props.setManualDescription(\n\t\t\t\t\t\t\t\t\t\tdata.manual_description ? data.manual_description : data.meta_description);\n                                    props.setEditShow( true);\n                                    props.setVideoId(  data.id);\n                                }}\n                            >\n                                Edit\n                            </Button>\n                            {/* <Button variant=\"danger\" size=\"sm\" onClick={() => props.handleRemoveItem(data.id)}>Remove 0</Button> */}\n                            <Button variant=\"danger\" size=\"sm\" onClick={() => { props.handleRemoveItem(data.id) } } >Remove</Button>\n                        </Col>\n                        <Col>\n                            {props.playlists.length > 0 &&\n                                <SelectOptions\n                                    label='Playlists'\n                                    id={data.id}\n                                    value={data.arr}\n                                    items={playlists}\n                                    onSave={props.savePlaylist}\n                                    multiple={true}\n                                />\n                            }\n                            { isAdmin &&\n                                <SelectOptions\n                                    label='Type'\n                                    id={data.id}\n                                    value={data.type}\n                                    items={[\n                                        {id: 'free', name: 'Free'},\n                                        {id: 'pro', name: 'Pro'}\n                                        ]}\n                                    onSave={props.setVideoType}\n                                    multiple={false}\n                                />\n                            }\n                        </Col>\n                    </Row>\n                </Media.Body>\n            </Media>\n        </ListGroup.Item>\n    );\n\n    const showPagenationItem = () => {\n        return (\n            <Pagination\n                color=\"primary\"\n                className=\"mt-3\"\n                shape=\"rounded\"\n                count={props.totalPages}\n                page={props.currentPage}\n                onChange={(event, val) => props.onChangePageNumber(val)}\n            />\n        );\n    }\n\n    const doSomethingWith = (e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            props.onChangeKeyword(e.target.value);\n        }\n    }\n\n    return (\n        <>\n            <div className=\"card\">\n                <TextField\n                    className={classes.margin}\n                    id=\"input-with-icon-textfield\"\n                    placeholder=\"Search\"\n                    onKeyDown={doSomethingWith}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">\n                                <SearchIcon />\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n                <h3 className=\"card-header\">List of Videos</h3>\n                <ListGroup variant=\"flush\">\n                    {props.videoInfos\n                        && props.videoInfos.map((video, index) => {\n                            if ((props.currentPage - 1) * props.itemsPerPage <= index && (props.currentPage) * props.itemsPerPage > index) {\n                                return renderItem(video)\n                            } else {\n                                return null\n                            }\n                        })}\n                </ListGroup>\n                {showPagenationItem()}\n            </div>\n        </>\n    );\n}\n\nexport default VideoUpload","/var/www/html/bstar/videnda-frontend/src/components/Service/Playlist/VideoList.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Service/ReceivedPlaylist/ReceivedPlaylist.js",["296","297","298","299","300","301","302"],"import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InsertLink from '@material-ui/icons/InsertLink';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\n\nimport {\n  Row,\n  Col,\n  Button,\n  Image\n} from 'react-bootstrap';\n\nimport ReceivedPlaylistService from '../../../services/received-playlist.service';\nimport AppLayout from '../../../layouts/App';\n\nimport GlobalData from '../../../tools/GlobalData';\n\nconst front_end_server = GlobalData.front_end_server_ip + \":\" + GlobalData.front_end_server_port;\n\nconst useStyles1 = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n}));\n\nfunction TablePaginationActions(props) {\n  const classes = useStyles1();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <AppLayout>\n      <div className={classes.root}>\n        <IconButton\n          onClick={handleFirstPageButtonClick}\n          disabled={page === 0}\n          aria-label=\"first page\"\n        >\n          {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n        </IconButton>\n        <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n          {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n        </IconButton>\n        <IconButton\n          onClick={handleNextButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"next page\"\n        >\n          {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n        </IconButton>\n        <IconButton\n          onClick={handleLastPageButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"last page\"\n        >\n          {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n        </IconButton>\n      </div>\n    </AppLayout>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onChangePage: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\nconst useStyles2 = makeStyles({\n  table: {\n    minWidth: 500,\n  },\n  pasteTextField: {\n    width: '100%',\n    marginBottom: 30\n  }\n});\n\nexport default function CustomPaginationActionsTable() {\n  const classes = useStyles2();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [data, setData] = useState([]);\n  const [rows, setRows] = useState([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [newPlaylistUrl, setNewPlaylistUrl] = useState('');\n  const [searchString, setSearchString] = useState('');\n  const [errorText, setErrorText] = useState('');\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  useEffect(() => {\n    if (!isLoaded) {\n      ReceivedPlaylistService.getAllPlaylist()\n        .then(async response => {\n          console.log('-->', response.data)\n          if (response.data && response.data.length > 0) {\n            setData(response.data);\n            setRows(response.data);\n          }\n        })\n      setIsLoaded(true)\n    }\n  })\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  // playlistId\n  const handleDelete = (id) => {\n    if (window.confirm('Are you sure?')) {\n      ReceivedPlaylistService.removePlaylist(id)\n        .then(response => {\n          if (response.data.message === \"success\") {\n            window.location.reload();\n          }\n        }).catch((err) => {\n          const resMessage = (\n            err.response &&\n            err.response.data &&\n            err.response.data.message\n          ) || err.toString();\n\n          console.log(resMessage);\n        });\n    }\n  }\n\n  // custom\n  const handleInsertPlaylist = (e) => {\n    if (e.key === 'Enter' || e.keyCode === 13) {\n      addPlaylist();\n    }\n  }\n\n  const handleSearch = (e) => {\n    if (e.key === 'Enter' || e.keyCode === 13) {\n      let arr = [...data];\n      arr = arr.filter(item => (item.playlist_title + item.sender_name).includes(e.target.value.trim().toLowerCase()));\n      setRows(arr);\n    }\n  }\n\n  const handleAddPlaylist = () => {\n    addPlaylist();\n  }\n\n  function addPlaylist() {\n    const playlist_id = newPlaylistUrl.split('/playlist/')[1];\n    ReceivedPlaylistService.addPlaylist(playlist_id)\n      .then(response => {\n        if (response.data.message === \"success\") {\n          window.location.reload();\n        }\n        if (response.data.message === \"cannotregister\") {\n          setErrorText('The playlist is already registered.');\n          setTimeout(() => {\n            setErrorText('');\n          }, 2000);\n        }\n      }).catch((err) => {\n        const resMessage = (\n          err.response &&\n          err.response.data &&\n          err.response.data.message\n        ) || err.toString();\n\n        console.log(resMessage);\n      });\n\n    document.getElementById('input-with-icon-textfield').value = '';\n    setNewPlaylistUrl('');\n  }\n\n  return (\n    <>\n      {errorText &&\n        <h5 className=\"alert alert-danger\" style={{ position: 'absolute', bottom: 50, right: 50, padding: 40 }}>{errorText}</h5>\n      }\n      <Row className='mt-5'>\n        <Col md={5}>\n          <TextField\n            className={classes.pasteTextField}\n            id=\"input-with-icon-textfield\"\n            placeholder=\"Paste playlist url.\"\n            onChange={(e) => setNewPlaylistUrl(e.target.value)}\n            onKeyDown={handleInsertPlaylist}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <InsertLink />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </Col>\n        <Col md={4}>\n          <Button size='sm' onClick={handleAddPlaylist}>\n            Add Playlist\n          </Button>\n        </Col>\n        <Col md={3}>\n          <TextField\n            className={classes.pasteTextField}\n            id=\"input-with-icon-textfield\"\n            placeholder=\"Search\"\n            onChange={(e) => setSearchString(e.target.value)}\n            onKeyDown={handleSearch}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }}\n          />\n        </Col>\n      </Row>\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"custom pagination table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>No</TableCell>\n              <TableCell align=\"center\">Thumbnail</TableCell>\n              <TableCell align=\"center\">Title</TableCell>\n              <TableCell align=\"center\">Sender</TableCell>\n              <TableCell align=\"center\">Video Count</TableCell>\n              <TableCell align=\"center\">Status</TableCell>\n              <TableCell align=\"center\">Received Date</TableCell>\n              <TableCell align=\"center\">Operate</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {(rowsPerPage > 0\n              ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              : rows\n            ).map((row, index) => (\n              <TableRow key={row.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {index + 1}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  <a href={front_end_server + '/playlist/' + row.playlist_id} target=\"_blank\">\n                    { row.thumb_image && <Image src={ row.thumb_image } style={{ objectFit: 'cover', width: '100%' }} /> || <VideoLibraryIcon /> }\n                  </a>\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  <a href={front_end_server + '/playlist/' + row.playlist_id} target=\"_blank\">\n                    {row.playlist_title}\n                  </a>\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  {row.sender_name}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  {row.video_count}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  {row.playlist_status == '1' ? 'Public' : 'Private'}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  {row.dateTime}\n                </TableCell>\n                <TableCell style={{ width: 160 }} align=\"center\">\n                  <Button size='sm' style={{ marginRight: 5 }} href={front_end_server + '/playlist/' + row.playlist_id} target='_blank' block>Open</Button>\n                  <Button size='sm' variant='danger' onClick={() => handleDelete(row.id)} block>Delete</Button>\n                </TableCell>\n              </TableRow>\n            ))}\n\n            {emptyRows > 0 && (\n              <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={6} />\n              </TableRow>\n            )}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={7}\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                  inputProps: { 'aria-label': 'rows per page' },\n                  native: true,\n                }}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n              />\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </TableContainer>\n    </>\n  );\n}\n","/var/www/html/bstar/videnda-frontend/src/components/Service/Playlist/Playlist.js",["303","304","305","306","307","308","309","310"],"/* eslint-disable import/no-anonymous-default-export */\n/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-unused-vars */\n/* eslint-disable eqeqeq */\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TreeItem from '@material-ui/lab/TreeItem';\nimport { Pagination } from '@material-ui/lab';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport InputIcon from '@material-ui/icons/Create';\nimport InsertLink from '@material-ui/icons/InsertLink';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Modal from 'react-bootstrap/Modal';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport Avatar from '@material-ui/core/Avatar';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\nimport GlobalData from '../../../tools/GlobalData';\nimport SelectOptions from '../../Common/SelectOptions';\nimport VideoPlayer from '../Video/VideoPlayer';\nimport EditDialog from '../Video/EditDialog';\n\nimport {\n    Row,\n    Col,\n    Alert,\n    Image,\n    Button,\n    ListGroup,\n    Media,\n} from 'react-bootstrap';\n\nimport VideoService from '../../../services/video.service';\nimport PlaylistService from '../../../services/playlist.service';\nimport { LinearProgress, Paper } from '@material-ui/core';\n\nimport authService from '../../../services/auth.service';\nimport AppLayout from '../../../layouts/App';\n\nconst front_end_server = GlobalData.front_end_server_ip + \":\" + GlobalData.front_end_server_port;\n//const ba-ck_end_server = GlobalData.ba-ck_end_server_ip + \":3000\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 110,\n        flexGrow: 1,\n        maxWidth: 400,\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    linkInput: {\n        width: \"100%\",\n        marginBottom: theme.spacing(1)\n    },\n    linerProgress: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    }\n}));\n\nconst getVideoId = (url) => {\n    return url.split(\"?v=\")[1];\n}\n\nconst SettingDialog = (props) => {\n    const classes = useStyles();\n\n    return (\n        <Modal\n            show={props.show}\n            onHide={props.onHide}\n            size=\"md\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    Playlist Infomation\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Row className=\"justify-content-end\">\n                    <Col md={8}>\n                        <TextField\n                            className={classes.linkInput}\n                            placeholder=\"Input a new playlist name to change.\"\n                            value={props.currentPlaylistTitle}\n                            onChange={(e) => props.setCurrentPlaylistTitle(e.target.value)}\n                            InputProps={{\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <InputIcon />\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </Col>\n                    <Col md={4}>\n                        <Select className=\"mr-4\"\n                            style={{ width: \"100%\" }}\n                            value={props.currentPlaylistStatus}\n                            onChange={(e) => props.setCurrentPlaylistStatus(e.target.value)}\n                        >\n                            <MenuItem value={1}>Public</MenuItem>\n                            <MenuItem value={0}>Private</MenuItem>\n                        </Select>\n                    </Col>\n\n                    <Col md={12}>\n                        <Select className=\"mr-4 mt-4\"\n                            style={{ width: \"100%\" }}\n                            value={props.currentPlaylistThumbVideo}\n                            onChange={(e) => props.setCurrentPlaylistThumbVideo(e.target.value)}\n                        >\n                            <MenuItem value=\"0\" disabled> Choose a video for thumbnail </MenuItem>\n                            { props.videoInfos.map((item, index) => {\n                                return (\n                                    <MenuItem key={index} value={item.id}> { item.manual_title || item.meta_title } </MenuItem>\n                                )}\n                            )}\n                        </Select>\n                    </Col>\n                    \n                    {props.isAdmin &&\n                        <Col md={6}>\n                            <Select\n                                className=\"mr-4 mt-4\"\n                                labelId=\"demo-simple-select-label\"\n                                id=\"demo-simple-select\"\n                                value={props.currentPlaylistType}\n                                onChange={(e) => props.setCurrentPlaylistType(e.target.value)}\n                                fullWidth\n                            >\n                                <MenuItem value='standard'>Standard</MenuItem>\n                                <MenuItem value='marketing'>Marketing</MenuItem>\n                            </Select>\n                        </Col>\n                    }\n                </Row>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"success\" onClick={props.onSave}>Save</Button>\n                <Button variant=\"danger\" onClick={props.onDelete}>Delete</Button>\n                <Button variant=\"primary\" onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default () => {\n    const [message, setMessage] = React.useState(\"\");\n    const [pageNumber, setPageNumber] = React.useState(localStorage.getItem('playlistpage') ? Number(localStorage.getItem('playlistpage')) : 1);\n    const [itemsPerPage] = React.useState(10);\n    const [totalPages, setTotalPages] = React.useState(1);\n    const [treeData, setTreeData] = useState('');\n    const [selected, setSelected] = useState('root');\n    const [alertVisible, setAlertVisible] = useState(false);\n    const [expanded, setExpanded] = useState([]);\n    const [progressVisible, setProgressVisible] = useState(false);\n    const [videoData, setVideoData] = useState([]);\n    const [videoInfos, setVideoInfos] = useState([]);\n    const [modalShow, setModalShow] = useState(false);\n    const [settingShow, setSettingShow] = useState(false);\n    const [playUrl, setPlayUrl] = useState(null);\n    const [metaTitle, setMetaTitle] = useState(null);\n    const [metaDescription, setMetaDescription] = useState(null);\n    const [playlistTitle, setPlaylistTitle] = useState('');\n    const [playlistStatus, setPlaylistStatus] = useState(1);\n    const [currentPlaylistId, setCurrentPlaylistId] = useState('');\n    const [playlistData, setPlaylistData] = useState([]);\n    const [currentPlaylistTitle, setCurrentPlaylistTitle] = useState('');\n    const [currentPlaylistStatus, setCurrentPlaylistStatus] = useState('');\n    const [currentPlaylistThumbVideo, setCurrentPlaylistThumbVideo] = useState(0);\n    const [currentPlaylistType, setCurrentPlaylistType] = useState(0);\n    \n    const [playlists, setPlaylists] = useState([]);\n    const [videoId, setVideoId] = useState(null);\n    // const [playlistId, setPlaylistId] = useState(null);\n    const [currentVideoNumber, setCurrentVideoNumber] = useState(1);\n    const [editShow, setEditShow] = useState(false);\n    const [manualTitle, setManualTitle] = useState(undefined);\n    const [manualDescription, setManualDescription] = useState(undefined);\n\n    const user = authService.getCurrentUser();\n    const isAdmin = user && user.roles.includes(\"ROLE_ADMIN\") || false\n\n    React.useEffect(() => {\n        getAllPlaylists();\n    }, [])\n\n    const getAllPlaylists = () => {\n        PlaylistService.getAllPlaylist()\n            .then(async response => {\n                if (response.data && response.data.length > 0) {\n                    setPlaylistData(response.data);\n                    setPlaylists(response.data);\n                    handleItemClick(response.data[0])\n                }\n            })\n    }\n\n    // Add playlist\n    const upload = () => {\n        PlaylistService.addPlaylist(playlistTitle, playlistStatus)\n            .then(response => {\n                if (response.data.message === 'success') {\n                    getAllPlaylists();\n                    setPlaylistTitle('');\n                }\n            })\n    }\n\n    const handleChangePageNumber = (pagenum) => {\n        setPageNumber(pagenum);\n        localStorage.setItem('playlistpage', pagenum)\n    }\n\n    const handleChangeKeyword = (key) => {\n        const keyword = key.trim().toLowerCase();\n        const nodeId = selected;\n        let data = videoData.filter(item => {\n            let fileName = item.meta_keyword + item.meta_description + item.meta_title + getVideoId(item.video_id);\n            fileName = fileName ? fileName.trim().toLowerCase() : '';\n\n            if (fileName.includes(keyword)) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        if (keyword == \"\") {\n            setVideoInfos(videoData);\n        } else {\n            setVideoInfos(data);\n        }\n\n        const total = Math.ceil(data.length / itemsPerPage);\n        setTotalPages(total);\n\n        localStorage.removeItem(\"playlistpage\");\n        setPageNumber(1);\n    }\n\n    const handleOnKeyDown = (e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            setPlaylistTitle(e.target.value);\n            upload();\n        }\n    }\n\n    // Remove one video item\n    const handleRemoveItem = (id) => {\n        if (window.confirm('Are you sure?')) {\n            VideoService.removeVideo(id)\n                .then(response => {\n                    if (response.data.message === \"success\") {\n                        let arr = [...videoInfos];\n                        arr = arr.filter(item => item.id !== id);\n                        setVideoInfos(arr);\n                    }\n                }).catch((err) => {\n                    const resMessage = (\n                        err.response &&\n                        err.response.data &&\n                        err.response.data.message\n                    ) || err.toString();\n\n                    setMessage(resMessage);\n                });\n        }\n    }\n\n    // Play one video\n    const handlePlayVideo = (video_url, meta_title, meta_description, video_id) => {\n        setModalShow(true);\n        setPlayUrl(video_url);\n        setMetaTitle(meta_title);\n        setMetaDescription(meta_description);\n        setVideoId(video_id);\n    }\n\n    // playlist\n    const handlePlaylist = (e, video_id) => {\n        const playlist_title = e.target.value;\n        let playlist_id = '';\n\n        if (playlist_title != '') {\n            const selectedPlaylist = playlists.find(item => item.playlist_title == playlist_title);\n            playlist_id = selectedPlaylist.playlist_id;\n        }\n\n        VideoService.changeVideoGroup(video_id, playlist_id);\n        window.location.reload();\n    }\n\n    const handleItemClick = (item ) => {\n        setCurrentPlaylistId(item.playlist_id);\n        setCurrentPlaylistTitle(item.playlist_title);\n        setCurrentPlaylistStatus(item.playlist_status);\n        setCurrentPlaylistThumbVideo(item.thumb_video);\n        setCurrentPlaylistType(item.type);\n\n        PlaylistService.getPlaylist(item.playlist_id)\n            .then(async response => {\n                if (response.data && response.data.length > 0) {\n\n                    const res = response.data;\n\n                    for (const key in res) {\n                        const videoId = res[key].id;\n                        const result = await VideoService.getPlaylistIds(videoId);\n                        res[key].arr = result.data.playlists;\n                    }\n\n                    setVideoData(res)\n\n                    // setVideoData(response.data);\n                    setVideoInfos(response.data);\n\n                    const total = Math.ceil(response.data.length / itemsPerPage);\n                    setTotalPages(total);\n                } else {\n                    setVideoInfos([]);\n                }\n            })\n    }\n\n    // delete\n    const handleSettingShow = () => {\n        if (window.confirm('Are you sure?')) {\n            setSettingShow(false)\n            PlaylistService.removePlaylist(currentPlaylistId)\n                .then(response => {\n                    if (response.data.message === 'success') {\n                        getAllPlaylists();\n                        setCurrentPlaylistId('');\n                        window.location.reload();\n                    }\n                })\n        }\n    }\n\n    // change\n    const handleSettingSave = () => {\n        setSettingShow(false)\n        PlaylistService.changePlaylist(currentPlaylistId, currentPlaylistTitle, currentPlaylistStatus, currentPlaylistThumbVideo, currentPlaylistType)\n            .then(response => {\n                // console.log('sss',response)\n                if (response.data.message === 'success') {\n                    getAllPlaylists();\n                    setCurrentPlaylistId('');\n                    setCurrentPlaylistTitle('');\n                    setCurrentPlaylistStatus('');\n                    setCurrentPlaylistThumbVideo(0);\n                }\n            })\n    }\n\n    function meta_restriction_age_str(meta) {\n        if (!meta)\n            return \"\";\n        return \" [\" + meta + \"]\";\n    }\n\n    const onNextVideo = () => {\n        const index = videoData.findIndex(item => item.id == videoId);\n        if (index >= videoData.length - 1) {\n            return;\n        }\n        const nextUrl = videoData[index + 1].video_id;\n        setVideoId(videoData[index + 1].id);\n        setPlayUrl(nextUrl);\n        setMetaTitle(videoData[index + 1].meta_title + meta_restriction_age_str(videoData[index + 1].meta_restriction_age))\n        setMetaDescription(videoData[index + 1].meta_description)\n        setCurrentVideoNumber(getCurrentVideoNumber() + 1)\n    }\n\n    const onPreviousVideo = () => {\n        const index = videoData.findIndex(item => item.id == videoId);\n        if (index <= 0) {\n            return;\n        }\n        const prevUrl = videoData[index - 1].video_id;\n        setVideoId(videoData[index - 1].id);\n        setPlayUrl(prevUrl);\n        setMetaTitle(videoData[index - 1].meta_title + meta_restriction_age_str(videoData[index - 1].meta_restriction_age))\n        setMetaDescription(videoData[index - 1].meta_description)\n        setCurrentVideoNumber(getCurrentVideoNumber() - 1)\n    }\n\n    const onOpenSourceUrl = () => {\n        //beep();\n        //Pause curent video before launching a new one\n        const index = videoData.findIndex(item => item.id == videoId);\n        const nextUrl = videoData[index].video_id;\n        window.open(nextUrl, '_blank');\n    }\n\n    const getCurrentVideoNumber = () => {\n        return videoData.findIndex(item => item.id == videoId) + 1\n    }\n\n    const itemClick = (video_id, videoId) => {\n        setPlayUrl(video_id);\n        setVideoId(videoId);\n        setMetaTitle(videoData.find(item => item.id == videoId).meta_title);\n        setMetaDescription(videoData.find(item => item.id == videoId).meta_description);\n    }\n\n\n    // edit save\n    const onSave = () => {\n        setEditShow(false);\n        VideoService.setManualInfo(videoId, manualTitle, manualDescription);\n        const index = videoData.findIndex(item => item.id == videoId);\n        videoData[index].manual_title = manualTitle;\n        videoData[index].manual_description = manualDescription;\n    }\n\n    const setVideoType = (video_id, type) => {\n        let arr = videoInfos;\n        arr.map((item, index) => {\n            item.id == video_id && (arr[index].type = type);\n        });\n        setVideoInfos(arr);\n\n        VideoService.setVideoType(video_id, type);\n    }\n\n    const savePlaylist = (id, value) => {\n        console.log('savePLaylsit',id, value)\n        VideoService.addPlaylistIds(id, value)\n    }\n\n    const classes = useStyles();\n\n    const renderTree = (nodes) => {\n        return (\n            <TreeItem key={nodes.id} nodeId={nodes.id} label={nodes.name}>\n                {Array.isArray(nodes.children) ? nodes.children.map((node) => renderTree(node)) : null}\n            </TreeItem>\n        )\n    }\n\n    return (\n        <AppLayout>\n            <h2 className=\"mb-3\">My Playlists</h2>\n            <Row className=\"mb-3\">\n                <Col md={4}>\n                    <TextField\n                        className={classes.linkInput}\n                        id=\"input-with-icon-textfield-top\"\n                        placeholder=\"Input new playlist title.\"\n                        value={playlistTitle}\n                        onChange={(e) => setPlaylistTitle(e.target.value)}\n                        onKeyDown={(e) => handleOnKeyDown(e)}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <InputIcon />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                </Col>\n                <Col md={8}>\n                    <Select className=\"mr-4\"\n                        style={{ width: \"100px\" }}\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        value={playlistStatus}\n                        onChange={(e) => setPlaylistStatus(e.target.value)}\n                    >\n                        <MenuItem value={1}>Public</MenuItem>\n                        <MenuItem value={0}>Private</MenuItem>\n                    </Select>\n\n                    <Button disabled={playlistTitle === ''} onClick={upload}>\n                        Add Playlist\n                    </Button>\n                </Col>\n            </Row>\n            <Row>\n                <Col md={12}>\n                    {progressVisible && (\n                        <div className={classes.linerProgress}>\n                            <LinearProgress />\n                        </div>\n                    )}\n                    {message && (\n                        <Alert variant=\"success\" className=\"mt-3 upload_alert\" show={alertVisible}>\n                            <Alert.Heading>Add Result</Alert.Heading>\n                            {message}\n                        </Alert>\n                    )}\n                </Col>\n            </Row>\n            <Row>\n                <Col md={3} className=\"card\">\n                    <List component=\"nav\" aria-label=\"main mailbox folders\">\n\n                        {playlistData && (\n                            playlistData.map(item => {\n                                return (\n                                    <ListItem button key={item.id}\n                                        selected={currentPlaylistId == item.playlist_id}\n                                        onClick={() => handleItemClick(item)}\n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                {item.thumb_image && <Image roundedCircle src={ item.thumb_image } style={{ objectFit: 'cover', width: 40, height: 40 }} /> || <VideoLibraryIcon/> }\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText primary={item.playlist_title} />\n                                        <ListItemSecondaryAction>\n                                            <IconButton edge=\"end\" aria-label=\"delete\" disabled={currentPlaylistId !== item.playlist_id} onClick={() => setSettingShow(true)}>\n                                                <SettingsIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                )\n                            })\n                        )}\n\n                    </List>\n                </Col>\n                <Col md={9}>\n                    {videoInfos &&\n                        <VideoList\n                            videoInfos={videoInfos}\n                            totalPages={totalPages}\n                            itemsPerPage={itemsPerPage}\n                            currentPage={pageNumber}\n                            playlists={playlists}\n                            currentPlaylistId={currentPlaylistId}\n                            onChangeKeyword={handleChangeKeyword}\n                            onChangePageNumber={handleChangePageNumber}\n                            handleRemoveItem={handleRemoveItem}\n                            handlePlayVideo={handlePlayVideo}\n                            onChangePlaylist={handlePlaylist}\n                            setEditShow={setEditShow}\n                            setManualTitle={setManualTitle}\n                            setManualDescription={setManualDescription}\n                            setVideoId={setVideoId}\n                            savePlaylist={savePlaylist}\n                            setVideoType={setVideoType}\n                        />\n                    }\n                </Col>\n            </Row>\n            <VideoPlayer\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n                playUrl={playUrl}\n                metaTitle={metaTitle}\n                metaDescription={metaDescription}\n                videoData={videoData}\n                videoId={videoId}\n                onPreviousVideo={onPreviousVideo}\n                onNextVideo={onNextVideo}\n                onOpenSourceUrl={onOpenSourceUrl}\n                currentVideoNumber={currentVideoNumber}\n                itemClick={itemClick}\n            />\n            <SettingDialog\n                show={settingShow}\n                onHide={() => setSettingShow(false)}\n                onDelete={handleSettingShow}\n                onSave={handleSettingSave}\n                setCurrentPlaylistTitle={setCurrentPlaylistTitle}\n                currentPlaylistTitle={currentPlaylistTitle}\n                currentPlaylistStatus={currentPlaylistStatus}\n                setCurrentPlaylistStatus={setCurrentPlaylistStatus}\n                setCurrentPlaylistThumbVideo={setCurrentPlaylistThumbVideo}\n                currentPlaylistThumbVideo={currentPlaylistThumbVideo}\n                setCurrentPlaylistType={setCurrentPlaylistType}\n                currentPlaylistType={currentPlaylistType}\n                videoInfos={videoInfos}\n                isAdmin={isAdmin}\n            />\n            <EditDialog\n                show={editShow}\n                onHide={() => setEditShow(false)}\n                manualTitle={manualTitle}\n                manualDescription={manualDescription}\n                setManualTitle={setManualTitle}\n                setManualDescription={setManualDescription}\n                onSave={onSave}\n            />\n        </AppLayout>\n    );\n}\n\n\nconst VideoList = (props) => {\n    const classes = useStyles();\n\n    let playlists = [];\n    props.playlists.map(item=>{\n        playlists.push({id: item.id, name: item.playlist_title});\n    });\n    \n    const user = authService.getCurrentUser();\n    const isAdmin = user && user.roles.includes(\"ROLE_ADMIN\") || false\n\n    const renderItem = (data) => (\n        <ListGroup.Item key={data.id}>\n            <Media>\n                <Image thumbnail src={data.meta_image} className=\"mr-3\" style={{ cursor: 'pointer' }} onClick={() => props.handlePlayVideo(data.video_id, data.manual_title || data.meta_title, data.manual_description || data.meta_description, data.id)} />\n                <Media.Body>\n                    <h5><span style={{ color: 'green' }}>{data.manual_title && data.manual_title}</span></h5>\n                    <h5><span>{data.meta_title}</span></h5>\n                    <p style={{ marginBottom: \"0px\" }}><span>ID : </span><code>{getVideoId(data.video_id)}</code></p>\n                    <p style={{ marginBottom: \"2px\" }}><span style={{ color: 'green' }}>{data.manual_description && data.manual_description}</span></p>\n                    <p style={{ marginBottom: \"2px\" }}><span>{data.meta_description}</span></p>\n                    {data.meta_keyword && (\n                        <p><small><span>Keywords : </span><span>{data.meta_keyword}</span></small></p>\n                    )}\n                    <p><small><i><span>Created Time : </span><span>{data.dateTime}</span></i></small></p>\n\n                    <Row>\n                        <Col className=\"align-self-end pb-4\">\n                            <Button variant=\"success\" size=\"sm\" className=\"mr-2\" onClick={() => props.handlePlayVideo(data.video_id, data.manual_title || data.meta_title, data.manual_description || data.meta_description, data.id)}>Play</Button>\n                            <Button variant=\"info\" size=\"sm\" className=\"mr-2\"\n                                onClick={() => {\n                                    props.setManualTitle(data.manual_title ? data.manual_title : data.meta_title);\n                                    props.setManualDescription(data.manual_description ? data.manual_description : data.meta_description);\n                                    props.setEditShow(true);\n                                    props.setVideoId(data.id);\n                                }}\n                            >\n                                Edit\n                            </Button>\n                            <Button variant=\"danger\" size=\"sm\" onClick={() => props.handleRemoveItem(data.id)}>Remove</Button>\n                        </Col>\n                        <Col>\n                            {props.playlists.length > 0 &&\n                                <SelectOptions\n                                    label='Playlists X'\n                                    id={data.id}\n                                    value={data.arr}\n                                    items={playlists}\n                                    onSave={props.savePlaylist}\n                                    multiple={true}\n                                />\n                            }\n                            { isAdmin && \n                                <SelectOptions\n                                    label='Type'\n                                    id={data.id}\n                                    value={data.type}\n                                    items={[\n                                        {id: 'free', name: 'Free'},\n                                        {id: 'pro', name: 'Pro'}\n                                        ]}\n                                    onSave={props.setVideoType}\n                                    multiple={false}\n                                />\n                            }\n                        </Col>\n                    </Row>\n                </Media.Body>\n            </Media>\n        </ListGroup.Item>\n    );\n\n    const showPagenationItem = () => {\n\n        return (\n            <Pagination\n                color=\"primary\"\n                className=\"mt-3\"\n                shape=\"rounded\"\n                count={props.totalPages}\n                page={props.currentPage}\n                onChange={(event, val) => props.onChangePageNumber(val)}\n            />\n        );\n    }\n\n    const doSomethingWith = (e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n            props.onChangeKeyword(e.target.value);\n        }\n    }\n\n    return (\n        <>\n            <div className=\"card\">\n                <Paper style={{ margin: \"5px\" }}>\n                    <TextField\n                        disabled\n                        className={classes.margin}\n                        value={props.currentPlaylistId && front_end_server + '/playlist/' + props.currentPlaylistId}\n                        style={{ width: \"85%\" }}\n                        InputProps={{\n                            startAdornment: (\n                                <InputAdornment position=\"start\">\n                                    <InsertLink />\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    <Button onClick={() => { navigator.clipboard.writeText(front_end_server + '/playlist/' + props.currentPlaylistId) }}>Copy</Button>\n                </Paper>\n                <TextField\n                    className={classes.margin}\n                    id=\"input-with-icon-textfield\"\n                    placeholder=\"Search\"\n                    onKeyDown={doSomethingWith}\n                    InputProps={{\n                        startAdornment: (\n                            <InputAdornment position=\"start\">\n                                <SearchIcon />\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n                <h3 className=\"card-header\">List of Videos</h3>\n                <ListGroup variant=\"flush\">\n                    {props.videoInfos\n                        && (props.videoInfos.map((video, index) => {\n                            if ((props.currentPage - 1) * props.itemsPerPage <= index && (props.currentPage) * props.itemsPerPage > index) {\n                                return renderItem(video)\n                            } else {\n                                return null\n                            }\n                        }))}\n                </ListGroup>\n                {showPagenationItem()}\n            </div>\n        </>\n    );\n}\n\n","/var/www/html/bstar/videnda-frontend/src/services/auth-header.js",[],"/var/www/html/bstar/videnda-frontend/src/services/user.service.js",["311"],"import axios from 'axios';\nimport authHeader from './auth-header';\nimport Auth from \"./auth.service\";\n\nimport GlobalData from '../tools/GlobalData';\n\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/user/';\n//const API_URL = `http://1-58.69.222.102:3030/api/user/`;\n\nconst getPublicContent=()=>{\n    return axios.get(`${API_URL}all`);\n}\nconst getUserBoard=()=>{\n    return axios.get(`${API_URL}user`, {headers: authHeader()});\n}\nconst getModeratorBoard=()=>{\n    return axios.get(`${API_URL}mod`, {headers:authHeader()});\n}\nconst getAdminBoard=()=>{\n    return axios.get(`${API_URL}admin`, {headers:authHeader()});\n}\nconst addTokens = (ss) => {\n    const currentUser = Auth.getCurrentUser();\n    return axios.get(`${API_URL}add_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\n}\nconst addTokenCode=(token_code)=>{\n    const currentUser = Auth.getCurrentUser();\n    return axios.get(`${API_URL}add_token_code?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_code=${token_code}`);\n}\nconst getPrepaidTokens = () => {\n    const currentUser = Auth.getCurrentUser();\n    return axios.get(`${API_URL}get_prepaid_tokens?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}`);\n}\nconst addPrepaidToken = (newTokenCount) => {\n    const currentUser = Auth.getCurrentUser();\n    return axios.post(`${API_URL}add_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&token_count=${newTokenCount}`);\n}\nconst deletePrepaidToken = (id) => {\n    const currentUser = Auth.getCurrentUser();\n    return axios.post(`${API_URL}delete_prepaid_token?user_id=${currentUser.user_id}&user_key=${currentUser.access_key}&id=${id}`);\n}\nexport default {\n    getPublicContent,\n    getUserBoard,\n    getModeratorBoard,\n    getAdminBoard,\n    addTokens,\n    addTokenCode,\n    getPrepaidTokens,\n    addPrepaidToken,\n    deletePrepaidToken,\n};\n","/var/www/html/bstar/videnda-frontend/src/services/category.service.js",[],"/var/www/html/bstar/videnda-frontend/src/services/playlist.service.js",[],"/var/www/html/bstar/videnda-frontend/src/services/video.service.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Service/Video/EditDialog.js",["312","313","314","315"],"import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport InputIcon from '@material-ui/icons/Create';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Modal from 'react-bootstrap/Modal';\n\nimport { Button } from 'react-bootstrap';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        height: 110,\n        flexGrow: 1,\n        maxWidth: 400,\n    },\n    margin: {\n        margin: theme.spacing(1),\n    },\n    linkInput: {\n        width: \"100%\",\n        marginBottom: theme.spacing(1)\n    },\n    linerProgress: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2)\n    }\n}));\n\nconst EditDialog = (props) => {\n  const classes = useStyles();\n\n  return (\n        <Modal\n            show={props.show}\n            onHide={props.onHide}\n            size=\"md\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n          <Modal.Header closeButton>\n              <Modal.Title id=\"contained-modal-title-vcenter\">\n                  Edit Title & Description\n              </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p><b>Manual title</b></p>\n            <TextField\n                className={classes.linkInput}\n                id=\"input-with-icon-textfield-top\"\n                placeholder=\"Input manual title.\"\n                value={props.manualTitle}\n                onChange={(e) => props.setManualTitle(e.target.value)}\n            />\n            <br />\n            <br />\n            <p><b>Manual description</b></p>\n            <TextField\n                className={classes.linkInput}\n                id=\"input-with-icon-textfield-top\"\n                placeholder=\"Input manual description.\"\n                multiline={true}\n                rows={3}\n                value={props.manualDescription}\n                onChange={(e) => props.setManualDescription(e.target.value)}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n              <Button variant=\"success\" onClick={props.onSave}>Save</Button>\n              <Button variant=\"primary\" onClick={props.onHide}>Close</Button>\n          </Modal.Footer>\n      </Modal>\n  );\n}\n\nexport default EditDialog;","/var/www/html/bstar/videnda-frontend/src/components/Service/Video/VideoPlayer.js",["316"],"/var/www/html/bstar/videnda-frontend/src/services/received-playlist.service.js",[],"/var/www/html/bstar/videnda-frontend/src/tools/GlobalData.js",["317"],"export default {\n  //dev localhost\n  back_end_server_ip: 'http://localhost',\n  front_end_server_ip: 'http://localhost',\n  //dev Orange\n  //back_end_server_ip: 'http://192.168.8.140',\n  //front_end_server_ip: 'http://192.168.8.140',\n  //dev Vodafone\n  //back_end_server_ip: 'http://192.168.43.44', //vodafone\n  //front_end_server_ip: 'http://192.168.43.44',\n  //dev ports\n  front_end_server_port: '3000',\n  back_end_server_port:  '3030',\n\n  //production\n  //back_end_server_ip: 'https://aic.space',\n  //back_end_server_port: '3030',\n  //front_end_server_ip: 'https://aic.space',\n  //front_end_server_port: '443',\n\n  //production OVH 2\n  //back_end_server_ip: 'http://144.217.162.34',\n  //back_end_server_port: '3030',\n  //front_end_server_ip: 'http://144.217.162.34',\n  //front_end_server_port: '3000',\n  //front_end_server_port: '443', //after SSL install\n\n  //old-back_end_server_ip: 'https://158.69.222.102',\n  //old-back_end_server_ip: 'http://127.0.0.1',\n\n  modal_video_player_width: 'auto',\n  modal_video_player_height: '100%'\n};\n","/var/www/html/bstar/videnda-frontend/src/layouts/App.js",["318","319","320"],"import React, {useState, useEffect} from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst HomeLayout = (props)=>{\n    return (\n        <div className=\"container app-container mt-3\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default HomeLayout;","/var/www/html/bstar/videnda-frontend/src/layouts/Home.js",["321","322","323"],"import React, {useState, useEffect} from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nconst HomeLayout = (props)=>{\n    return (\n        <div className=\"app-container\">\n            {props.children}\n        </div>\n    )\n}\n\nexport default HomeLayout;","/var/www/html/bstar/videnda-frontend/src/components/Common/SelectOptions.js",[],"/var/www/html/bstar/videnda-frontend/src/services/downloadfile.js",[],"/var/www/html/bstar/videnda-frontend/src/services/ppt.service.js",[],"/var/www/html/bstar/videnda-frontend/src/services/image.service.js",[],"/var/www/html/bstar/videnda-frontend/src/services/file-upload.service.js",[],"/var/www/html/bstar/videnda-frontend/src/services/execute.service.js",["324"],"import axios from 'axios';\nimport AuthService from \"../services/auth.service\";\n\nimport GlobalData from '../tools/GlobalData';\n\nconst API_URL = GlobalData.back_end_server_ip + ':' + GlobalData.back_end_server_port + '/api/execute_service?';\n//const API_URL = `http://1-58.69.222.102:3030/api/execute_service?`;\n//const API_URL = `http://local--host:3030/api/execute_service?`;\n\nconst getWeather = (cityName)=>{\n    const user=AuthService.getCurrentUser();\n    return axios.get(`${API_URL}server=get_weather&user_id=${user.user_id}&user_key=${user.access_key}&city=${cityName}`);\n}\n\nconst getTokenHistory=()=>{\n    const user=AuthService.getCurrentUser();\n    return axios.get(`${API_URL}server=get_tokenHistory&user_id=${user.user_id}`);\n}\n\nconst getDashboard=()=>{\n    const user=AuthService.getCurrentUser();\n    return axios.get(`${API_URL}server=get_dashboard&user_id=${user.user_id}`);\n}\n\nexport default {\n    getWeather,\n    getTokenHistory,\n    getDashboard,\n};\n","/var/www/html/bstar/videnda-frontend/src/components/User/Admin/blog/Blogs.js",["325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343"],"/var/www/html/bstar/videnda-frontend/src/services/blog.service.js",[],"/var/www/html/bstar/videnda-frontend/src/components/Service/Playlist/BlogPlaylist.js",["344","345","346","347","348","349","350","351"],"/var/www/html/bstar/videnda-frontend/src/components/User/Admin/blog/BlogSingle.js",["352"],{"ruleId":"353","replacedBy":"354"},{"ruleId":"355","replacedBy":"356"},{"ruleId":"357","severity":1,"message":"358","line":163,"column":56,"nodeType":"359","endLine":163,"endColumn":87},{"ruleId":"360","severity":1,"message":"361","line":133,"column":1,"nodeType":"362","endLine":145,"endColumn":3},{"ruleId":"363","severity":1,"message":"364","line":17,"column":12,"nodeType":"365","messageId":"366","endLine":17,"endColumn":19},{"ruleId":"367","severity":1,"message":"368","line":72,"column":41,"nodeType":"359","endLine":72,"endColumn":120},{"ruleId":"369","severity":1,"message":"370","line":81,"column":131,"nodeType":"371","messageId":"372","endLine":81,"endColumn":133},{"ruleId":"373","severity":1,"message":"374","line":45,"column":46,"nodeType":"375","messageId":"376","endLine":45,"endColumn":48},{"ruleId":"373","severity":1,"message":"374","line":45,"column":103,"nodeType":"375","messageId":"376","endLine":45,"endColumn":105},{"ruleId":"373","severity":1,"message":"374","line":61,"column":36,"nodeType":"375","messageId":"376","endLine":61,"endColumn":38},{"ruleId":"373","severity":1,"message":"374","line":65,"column":51,"nodeType":"375","messageId":"376","endLine":65,"endColumn":53},{"ruleId":"369","severity":1,"message":"370","line":75,"column":26,"nodeType":"371","messageId":"372","endLine":75,"endColumn":28},{"ruleId":"377","severity":1,"message":"378","line":45,"column":6,"nodeType":"379","endLine":45,"endColumn":8,"suggestions":"380"},{"ruleId":"369","severity":1,"message":"370","line":66,"column":69,"nodeType":"371","messageId":"372","endLine":66,"endColumn":71},{"ruleId":"381","severity":1,"message":"382","line":152,"column":12,"nodeType":"359","endLine":152,"endColumn":79},{"ruleId":"363","severity":1,"message":"383","line":16,"column":12,"nodeType":"365","messageId":"366","endLine":16,"endColumn":20},{"ruleId":"377","severity":1,"message":"384","line":24,"column":8,"nodeType":"379","endLine":24,"endColumn":10,"suggestions":"385"},{"ruleId":"373","severity":1,"message":"374","line":29,"column":38,"nodeType":"375","messageId":"376","endLine":29,"endColumn":40},{"ruleId":"369","severity":1,"message":"370","line":29,"column":101,"nodeType":"371","messageId":"372","endLine":29,"endColumn":103},{"ruleId":"373","severity":1,"message":"374","line":29,"column":107,"nodeType":"375","messageId":"376","endLine":29,"endColumn":109},{"ruleId":"373","severity":1,"message":"374","line":46,"column":36,"nodeType":"375","messageId":"376","endLine":46,"endColumn":38},{"ruleId":"373","severity":1,"message":"374","line":46,"column":129,"nodeType":"375","messageId":"376","endLine":46,"endColumn":131},{"ruleId":"363","severity":1,"message":"386","line":27,"column":3,"nodeType":"365","messageId":"366","endLine":27,"endColumn":8},{"ruleId":"363","severity":1,"message":"387","line":31,"column":8,"nodeType":"365","messageId":"366","endLine":31,"endColumn":19},{"ruleId":"363","severity":1,"message":"388","line":179,"column":12,"nodeType":"365","messageId":"366","endLine":179,"endColumn":24},{"ruleId":"363","severity":1,"message":"389","line":180,"column":23,"nodeType":"365","messageId":"366","endLine":180,"endColumn":35},{"ruleId":"377","severity":1,"message":"390","line":196,"column":5,"nodeType":"365","endLine":196,"endColumn":14,"suggestions":"391"},{"ruleId":"392","severity":1,"message":"393","line":218,"column":44,"nodeType":"394","messageId":"395","endLine":218,"endColumn":46},{"ruleId":"369","severity":1,"message":"370","line":219,"column":39,"nodeType":"371","messageId":"372","endLine":219,"endColumn":41},{"ruleId":"369","severity":1,"message":"370","line":221,"column":50,"nodeType":"371","messageId":"372","endLine":221,"endColumn":52},{"ruleId":"373","severity":1,"message":"374","line":221,"column":55,"nodeType":"375","messageId":"376","endLine":221,"endColumn":57},{"ruleId":"373","severity":1,"message":"374","line":221,"column":85,"nodeType":"375","messageId":"376","endLine":221,"endColumn":87},{"ruleId":"369","severity":1,"message":"370","line":280,"column":63,"nodeType":"371","messageId":"372","endLine":280,"endColumn":65},{"ruleId":"369","severity":1,"message":"370","line":299,"column":43,"nodeType":"371","messageId":"372","endLine":299,"endColumn":45},{"ruleId":"367","severity":1,"message":"368","line":379,"column":57,"nodeType":"359","endLine":379,"endColumn":128},{"ruleId":"363","severity":1,"message":"396","line":30,"column":8,"nodeType":"365","messageId":"366","endLine":30,"endColumn":31},{"ruleId":"363","severity":1,"message":"388","line":117,"column":10,"nodeType":"365","messageId":"366","endLine":117,"endColumn":22},{"ruleId":"377","severity":1,"message":"390","line":122,"column":3,"nodeType":"365","endLine":122,"endColumn":12,"suggestions":"397"},{"ruleId":"369","severity":1,"message":"370","line":184,"column":31,"nodeType":"371","messageId":"372","endLine":184,"endColumn":33},{"ruleId":"369","severity":1,"message":"370","line":291,"column":49,"nodeType":"371","messageId":"372","endLine":291,"endColumn":51},{"ruleId":"369","severity":1,"message":"370","line":291,"column":89,"nodeType":"371","messageId":"372","endLine":291,"endColumn":91},{"ruleId":"369","severity":1,"message":"370","line":294,"column":30,"nodeType":"371","messageId":"372","endLine":294,"endColumn":32},{"ruleId":"369","severity":1,"message":"370","line":299,"column":30,"nodeType":"371","messageId":"372","endLine":299,"endColumn":32},{"ruleId":"363","severity":1,"message":"398","line":158,"column":36,"nodeType":"365","messageId":"366","endLine":158,"endColumn":44},{"ruleId":"377","severity":1,"message":"399","line":203,"column":8,"nodeType":"379","endLine":203,"endColumn":10,"suggestions":"400"},{"ruleId":"392","severity":1,"message":"401","line":598,"column":62,"nodeType":"394","messageId":"402","endLine":598,"endColumn":64},{"ruleId":"363","severity":1,"message":"403","line":20,"column":22,"nodeType":"365","messageId":"366","endLine":20,"endColumn":41},{"ruleId":"363","severity":1,"message":"404","line":23,"column":5,"nodeType":"365","messageId":"366","endLine":23,"endColumn":9},{"ruleId":"377","severity":1,"message":"405","line":166,"column":8,"nodeType":"379","endLine":166,"endColumn":10,"suggestions":"406"},{"ruleId":"363","severity":1,"message":"398","line":202,"column":47,"nodeType":"365","messageId":"366","endLine":202,"endColumn":55},{"ruleId":"369","severity":1,"message":"370","line":474,"column":59,"nodeType":"371","messageId":"372","endLine":474,"endColumn":61},{"ruleId":"369","severity":1,"message":"370","line":487,"column":59,"nodeType":"371","messageId":"372","endLine":487,"endColumn":61},{"ruleId":"363","severity":1,"message":"407","line":499,"column":14,"nodeType":"365","messageId":"366","endLine":499,"endColumn":18},{"ruleId":"369","severity":1,"message":"370","line":507,"column":59,"nodeType":"371","messageId":"372","endLine":507,"endColumn":61},{"ruleId":"369","severity":1,"message":"370","line":513,"column":52,"nodeType":"371","messageId":"372","endLine":513,"endColumn":54},{"ruleId":"369","severity":1,"message":"370","line":519,"column":53,"nodeType":"371","messageId":"372","endLine":519,"endColumn":55},{"ruleId":"369","severity":1,"message":"370","line":520,"column":59,"nodeType":"371","messageId":"372","endLine":520,"endColumn":61},{"ruleId":"369","severity":1,"message":"408","line":528,"column":28,"nodeType":"371","messageId":"372","endLine":528,"endColumn":30},{"ruleId":"369","severity":1,"message":"370","line":529,"column":81,"nodeType":"371","messageId":"372","endLine":529,"endColumn":83},{"ruleId":"369","severity":1,"message":"370","line":540,"column":59,"nodeType":"371","messageId":"372","endLine":540,"endColumn":61},{"ruleId":"392","severity":1,"message":"393","line":547,"column":31,"nodeType":"394","messageId":"395","endLine":547,"endColumn":33},{"ruleId":"369","severity":1,"message":"370","line":548,"column":21,"nodeType":"371","messageId":"372","endLine":548,"endColumn":23},{"ruleId":"409","severity":1,"message":"410","line":654,"column":17,"nodeType":"411","endLine":654,"endColumn":50},{"ruleId":"392","severity":1,"message":"393","line":676,"column":29,"nodeType":"394","messageId":"395","endLine":676,"endColumn":31},{"ruleId":"373","severity":1,"message":"374","line":681,"column":26,"nodeType":"375","messageId":"376","endLine":681,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":681,"column":63,"nodeType":"375","messageId":"376","endLine":681,"endColumn":65},{"ruleId":"363","severity":1,"message":"388","line":123,"column":10,"nodeType":"365","messageId":"366","endLine":123,"endColumn":22},{"ruleId":"377","severity":1,"message":"390","line":128,"column":3,"nodeType":"365","endLine":128,"endColumn":12,"suggestions":"412"},{"ruleId":"381","severity":1,"message":"382","line":286,"column":19,"nodeType":"359","endLine":286,"endColumn":95},{"ruleId":"373","severity":1,"message":"374","line":287,"column":39,"nodeType":"375","messageId":"376","endLine":287,"endColumn":41},{"ruleId":"373","severity":1,"message":"374","line":287,"column":122,"nodeType":"375","messageId":"376","endLine":287,"endColumn":124},{"ruleId":"381","severity":1,"message":"382","line":291,"column":19,"nodeType":"359","endLine":291,"endColumn":95},{"ruleId":"369","severity":1,"message":"370","line":302,"column":40,"nodeType":"371","messageId":"372","endLine":302,"endColumn":42},{"ruleId":"373","severity":1,"message":"374","line":194,"column":26,"nodeType":"375","messageId":"376","endLine":194,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":194,"column":63,"nodeType":"375","messageId":"376","endLine":194,"endColumn":65},{"ruleId":"392","severity":1,"message":"393","line":432,"column":31,"nodeType":"394","messageId":"395","endLine":432,"endColumn":33},{"ruleId":"373","severity":1,"message":"374","line":521,"column":67,"nodeType":"375","messageId":"376","endLine":521,"endColumn":69},{"ruleId":"373","severity":1,"message":"374","line":521,"column":173,"nodeType":"375","messageId":"376","endLine":521,"endColumn":175},{"ruleId":"392","severity":1,"message":"393","line":609,"column":29,"nodeType":"394","messageId":"395","endLine":609,"endColumn":31},{"ruleId":"373","severity":1,"message":"374","line":614,"column":26,"nodeType":"375","messageId":"376","endLine":614,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":614,"column":63,"nodeType":"375","messageId":"376","endLine":614,"endColumn":65},{"ruleId":"360","severity":1,"message":"361","line":42,"column":1,"nodeType":"362","endLine":52,"endColumn":3},{"ruleId":"363","severity":1,"message":"413","line":1,"column":17,"nodeType":"365","messageId":"366","endLine":1,"endColumn":26},{"ruleId":"363","severity":1,"message":"414","line":1,"column":28,"nodeType":"365","messageId":"366","endLine":1,"endColumn":36},{"ruleId":"363","severity":1,"message":"415","line":4,"column":8,"nodeType":"365","messageId":"366","endLine":4,"endColumn":17},{"ruleId":"363","severity":1,"message":"416","line":5,"column":8,"nodeType":"365","messageId":"366","endLine":5,"endColumn":22},{"ruleId":"369","severity":1,"message":"370","line":142,"column":73,"nodeType":"371","messageId":"372","endLine":142,"endColumn":75},{"ruleId":"360","severity":1,"message":"361","line":1,"column":1,"nodeType":"362","endLine":33,"endColumn":3},{"ruleId":"363","severity":1,"message":"414","line":1,"column":16,"nodeType":"365","messageId":"366","endLine":1,"endColumn":24},{"ruleId":"363","severity":1,"message":"413","line":1,"column":26,"nodeType":"365","messageId":"366","endLine":1,"endColumn":35},{"ruleId":"363","severity":1,"message":"417","line":2,"column":10,"nodeType":"365","messageId":"366","endLine":2,"endColumn":20},{"ruleId":"363","severity":1,"message":"414","line":1,"column":16,"nodeType":"365","messageId":"366","endLine":1,"endColumn":24},{"ruleId":"363","severity":1,"message":"413","line":1,"column":26,"nodeType":"365","messageId":"366","endLine":1,"endColumn":35},{"ruleId":"363","severity":1,"message":"417","line":2,"column":10,"nodeType":"365","messageId":"366","endLine":2,"endColumn":20},{"ruleId":"360","severity":1,"message":"361","line":25,"column":1,"nodeType":"362","endLine":29,"endColumn":3},{"ruleId":"363","severity":1,"message":"418","line":3,"column":10,"nodeType":"365","messageId":"366","endLine":3,"endColumn":18},{"ruleId":"363","severity":1,"message":"419","line":4,"column":8,"nodeType":"365","messageId":"366","endLine":4,"endColumn":21},{"ruleId":"363","severity":1,"message":"386","line":31,"column":3,"nodeType":"365","messageId":"366","endLine":31,"endColumn":8},{"ruleId":"363","severity":1,"message":"387","line":35,"column":8,"nodeType":"365","messageId":"366","endLine":35,"endColumn":19},{"ruleId":"367","severity":1,"message":"368","line":156,"column":52,"nodeType":"359","endLine":156,"endColumn":130},{"ruleId":"363","severity":1,"message":"388","line":211,"column":12,"nodeType":"365","messageId":"366","endLine":211,"endColumn":24},{"ruleId":"363","severity":1,"message":"389","line":212,"column":23,"nodeType":"365","messageId":"366","endLine":212,"endColumn":35},{"ruleId":"363","severity":1,"message":"420","line":228,"column":12,"nodeType":"365","messageId":"366","endLine":228,"endColumn":31},{"ruleId":"377","severity":1,"message":"390","line":230,"column":5,"nodeType":"365","endLine":230,"endColumn":14,"suggestions":"421"},{"ruleId":"392","severity":1,"message":"393","line":255,"column":44,"nodeType":"394","messageId":"395","endLine":255,"endColumn":46},{"ruleId":"369","severity":1,"message":"370","line":256,"column":47,"nodeType":"371","messageId":"372","endLine":256,"endColumn":49},{"ruleId":"369","severity":1,"message":"370","line":258,"column":50,"nodeType":"371","messageId":"372","endLine":258,"endColumn":52},{"ruleId":"373","severity":1,"message":"374","line":258,"column":55,"nodeType":"375","messageId":"376","endLine":258,"endColumn":57},{"ruleId":"373","severity":1,"message":"374","line":258,"column":85,"nodeType":"375","messageId":"376","endLine":258,"endColumn":87},{"ruleId":"392","severity":1,"message":"393","line":306,"column":38,"nodeType":"394","messageId":"395","endLine":306,"endColumn":40},{"ruleId":"392","severity":1,"message":"393","line":309,"column":40,"nodeType":"394","messageId":"395","endLine":309,"endColumn":42},{"ruleId":"369","severity":1,"message":"370","line":335,"column":50,"nodeType":"371","messageId":"372","endLine":335,"endColumn":52},{"ruleId":"369","severity":1,"message":"370","line":359,"column":43,"nodeType":"371","messageId":"372","endLine":359,"endColumn":45},{"ruleId":"367","severity":1,"message":"368","line":439,"column":59,"nodeType":"359","endLine":439,"endColumn":132},{"ruleId":"422","severity":1,"message":"423","line":126,"column":33,"nodeType":"424","messageId":"425","endLine":126,"endColumn":65},{"ruleId":"373","severity":1,"message":"374","line":200,"column":26,"nodeType":"375","messageId":"376","endLine":200,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":200,"column":63,"nodeType":"375","messageId":"376","endLine":200,"endColumn":65},{"ruleId":"373","severity":1,"message":"374","line":458,"column":67,"nodeType":"375","messageId":"376","endLine":458,"endColumn":69},{"ruleId":"373","severity":1,"message":"374","line":458,"column":173,"nodeType":"375","messageId":"376","endLine":458,"endColumn":175},{"ruleId":"392","severity":1,"message":"393","line":532,"column":29,"nodeType":"394","messageId":"395","endLine":532,"endColumn":31},{"ruleId":"373","severity":1,"message":"374","line":537,"column":26,"nodeType":"375","messageId":"376","endLine":537,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":537,"column":63,"nodeType":"375","messageId":"376","endLine":537,"endColumn":65},{"ruleId":"367","severity":1,"message":"368","line":159,"column":9,"nodeType":"359","endLine":159,"endColumn":63},"no-native-reassign",["426"],"no-negated-in-lhs",["427"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'content' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["428"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'category' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCategory'. Either include it or remove the dependency array.",["429"],"'Badge' is defined but never used.","'UserService' is defined but never used.","'searchString' is assigned a value but never used.","'setErrorText' is assigned a value but never used.","React Hook useEffect contains a call to 'setIsLoaded'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [isLoaded] as a second argument to the useEffect Hook.",["430"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'ReceivedPlaylistService' is defined but never used.",["431"],"'fileName' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'itemsPerPage'. Either include it or remove the dependency array.",["432"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'responsiveFontSizes' is defined but never used.","'Form' is defined but never used.","React Hook React.useEffect has a missing dependency: 'getAllVideos'. Either include it or remove the dependency array.",["433"],"'beep' is defined but never used.","Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["434"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'InputIcon' is defined but never used.","'InputAdornment' is defined but never used.","'useHistory' is defined but never used.","'CKEditor' is defined but never used.","'ClassicEditor' is defined but never used.","'blogPrivatePlaylist' is assigned a value but never used.",["435"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"440","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"440","fix":"447"},{"desc":"440","fix":"448"},"Update the dependencies array to be: [history]",{"range":"449","text":"450"},"Update the dependencies array to be: [getCategory]",{"range":"451","text":"452"},"Add dependencies array: [isLoaded]",{"range":"453","text":"454"},{"range":"455","text":"454"},"Update the dependencies array to be: [itemsPerPage]",{"range":"456","text":"457"},"Update the dependencies array to be: [getAllVideos]",{"range":"458","text":"459"},{"range":"460","text":"454"},{"range":"461","text":"454"},[1378,1380],"[history]",[677,679],"[getCategory]",[7637,7637],", [isLoaded]",[4361,4361],[7797,7799],"[itemsPerPage]",[6008,6010],"[getAllVideos]",[4635,4635],[9024,9024]]